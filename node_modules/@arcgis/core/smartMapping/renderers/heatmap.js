/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{isSome as e}from"../../core/maybe.js";import r from"../../core/Error.js";import a from"../../Color.js";import"../../renderers/Renderer.js";import"../../renderers/ClassBreaksRenderer.js";import"../../renderers/UniqueValueRenderer.js";import"../../renderers/DictionaryRenderer.js";import"../../renderers/DotDensityRenderer.js";import s from"../../renderers/support/HeatmapColorStop.js";import t from"../../renderers/HeatmapRenderer.js";import"../../renderers/SimpleRenderer.js";import"../../renderers/support/jsonUtils.js";import{getFieldsList as i}from"../support/utils.js";import{createLayerAdapter as n,getLayerTypeLabels as o}from"../support/adapters/support/layerUtils.js";import{verifyBasicFieldValidity as m,createColors as l,getBasemapInfo as p}from"./support/utils.js";import d from"../statistics/heatmapStatistics.js";import{c as u,g as c}from"../../chunks/heatmap.js";async function f(r,i){const{fieldOffset:n}=r,{field:o,basemap:m,blurRadius:d,minRatio:f,maxRatio:h,fadeToTransparent:b,heatmapScheme:w,view:j}=i,{scheme:y,basemapId:R,basemapTheme:T}=await async function(r){let a=r.scheme,s=null,t=null;const i=await p(r.basemap,r.view);if(s=e(i.basemapId)?i.basemapId:null,t=e(i.basemapTheme)?i.basemapTheme:null,a)return{scheme:u(a),basemapId:s,basemapTheme:t};const n=c({basemap:s,basemapTheme:t});return n&&(a=n.primaryScheme,s=n.basemapId,t=n.basemapTheme),{scheme:a,basemapId:s,basemapTheme:t}}({basemap:m,scheme:w,view:j}),g=y.colors,v=g.length,I=!r.count,x=I?[0,100]:[r.min,r.max],S=(h-f)/(v-1),O=g[0],U=[new s({ratio:0,color:new a([O.r,O.g,O.b,0])}),new s({ratio:.01,color:new a([O.r,O.g,O.b,0])}),new s({ratio:b?f:.01,color:O})];l(g,v).forEach(((e,r)=>{U.push(new s({ratio:f+S*r,color:e}))}));const C=new t({blurRadius:d,colorStops:U,field:o,minPixelIntensity:x[0],maxPixelIntensity:x[1]});return null!=n&&(C.fieldOffset=n),{renderer:C,statistics:r,defaultValuesUsed:I,scheme:u(y),basemapId:R,basemapTheme:T}}async function h(a){const s=await async function(a){if(!(a&&a.layer&&a.view))throw new r("heatmap-renderer:missing-parameters","'layer' and 'view' parameters are required");const{blurRadius:s,minRatio:t,maxRatio:l,fadeToTransparent:p}=a,d={...a};d.blurRadius=null==s?10:s,d.minRatio=null==t?.01:t,d.maxRatio=null==l?1:l,d.fadeToTransparent=null==p||p;const u=[0,2,1],c=n(d.layer,u);if(d.layer=c,!c)throw new r("heatmap-renderer:invalid-parameters","'layer' must be one of these types: "+o(u).join(", "));const f=e(d.signal)?{signal:d.signal}:null;await c.load(f);const h=await i({field:d.field}),b=m(c,h,"heatmap-renderer:invalid-parameters");if(b)throw b;return d}(a);return f(s.statistics?s.statistics:await d({layer:s.layer,field:s.field,fieldOffset:s.fieldOffset,blurRadius:s.blurRadius,view:s.view,signal:s.signal}),s)}export{h as createRenderer};

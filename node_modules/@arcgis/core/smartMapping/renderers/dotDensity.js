/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{isSome as e}from"../../core/maybe.js";import t from"../../core/Error.js";import{all as r}from"../../core/promiseUtils.js";import i from"../../renderers/support/AuthoringInfo.js";import"../../renderers/Renderer.js";import"../../renderers/ClassBreaksRenderer.js";import"../../renderers/UniqueValueRenderer.js";import"../../renderers/DictionaryRenderer.js";import a from"../../renderers/DotDensityRenderer.js";import"../../renderers/HeatmapRenderer.js";import"../../renderers/SimpleRenderer.js";import"../../renderers/support/jsonUtils.js";import{getResolutionForScale as s}from"../../geometry/support/scaleUtils.js";import{getFieldsList as n}from"../support/utils.js";import{createLayerAdapter as o,getLayerTypeLabels as l}from"../support/adapters/support/layerUtils.js";import d from"../statistics/spatialStatistics.js";import m from"../heuristics/outline.js";import{createColors as u,getSymbolOutlineFromScheme as p,getBasemapInfo as c}from"./support/utils.js";import{roundValue as y}from"./support/dotDensityUtils.js";import f from"../statistics/summaryStatisticsForAttributes.js";import b from"../statistics/support/attributeDensity.js";import{c as g,g as w}from"../../chunks/dotDensity.js";async function v(e){const{view:i,layer:a,attributes:n,signal:o}=e,l=await a.getSampleFeatures({view:i,sampleSize:500,returnGeometry:!0,signal:o}),[m,u]=await r([d({features:l,geometryType:a.geometryType}),f({layer:a,attributes:n,includeZeros:!1,includeNegatives:!1,view:i,signal:o})]),p="avgSize"in m&&m.avgSize,c=u.avg;if(!p)throw new t("dot-density-renderer:insufficient-info","Average polygon size is invalid");if(!c)throw new t("dot-density-renderer:insufficient-info","Average attribute value is invalid");const b=s(i.scale,i.spatialReference);return{dotValue:y(c/(p*p/(b*b)*.1))||1,referenceScale:i.scale,minSliderValue:1,maxSliderValue:y(c)}}async function h(e){const{view:r,layer:i,attributes:a,signal:o}=e,l=[];for(const e of a){const t=await n({field:e.field,valueExpression:e.valueExpression});l.push(...t)}const d=await i.getSampleFeatures({view:r,sampleSize:500,requiredFields:l,returnGeometry:!0,signal:o}),m=await b({features:d,attributes:a,includeZeros:!1,includeNegatives:!1,view:r});if(!m.avgDensity||!m.minDensity||!m.maxDensity)throw new t("dot-density-renderer:insufficient-info","Invalid density values");const u=s(r.scale,r.spatialReference),p=u*u,c=y(m.minDensity*p),f=y(m.maxDensity*p);let g=y(m.avgDensity*p*10)||1;return g>f&&(g=f),{dotValue:g,referenceScale:r.scale,minSliderValue:c,maxSliderValue:f}}async function j(s){const n=await async function(i){if(!(i&&i.layer&&i.view&&i.attributes&&i.attributes.length))throw new t("dot-density-renderer:missing-parameters","'layer', 'view' and 'attributes' parameters are required");if(i.attributes.length>8)throw new t("dot-density-renderer:invalid-parameters","Dot density renderer does not support more than 8 attributes");const a={...i},s=[2,1],n=o(a.layer,s);if(a.layer=n,a.dotBlendingEnabled=null==a.dotBlendingEnabled||a.dotBlendingEnabled,a.dotValueOptimizationEnabled=null==a.dotValueOptimizationEnabled||a.dotValueOptimizationEnabled,!n)throw new t("dot-density-renderer:invalid-parameters","'layer' must be one of these types: "+l(s).join(", "));const d=e(a.signal)?{signal:a.signal}:null;if(await r([a.view.when(),n.load(d)]),"polygon"!==n.geometryType)throw new t("dot-density-renderer:not-supported","Dot density renderer is supported for polygon layers only");return a}(s),d=n.layer,y=d.geometryType,f=await async function(t){let r=t.dotDensityScheme,i=null,a=null;const s=await c(t.basemap,t.view);if(i=e(s.basemapId)?s.basemapId:null,a=e(s.basemapTheme)?s.basemapTheme:null,r)return{scheme:g(r),basemapId:i,basemapTheme:a};const n=w({basemap:i,numColors:t.attributes.length,basemapTheme:a});return n&&(r=n.primaryScheme,i=n.basemapId,a=n.basemapTheme),{scheme:r,basemapId:i,basemapTheme:a}}(n),b=f&&f.scheme;if(!b)throw new t("dot-density-renderer:insufficient-info","Unable to find dot-density scheme");const j={layer:d,view:n.view,attributes:n.attributes,signal:n.signal},S={layer:n.layer,view:n.view,signal:n.signal},[V,D]=await r([n.trueDensity?h(j):v(j),n.outlineOptimizationEnabled?m(S):null]),{dotValue:E,referenceScale:T,minSliderValue:x,maxSliderValue:z}=V,I=u(b.colors,n.attributes.length),R=n.attributes.map(((e,t)=>({field:e.field,valueExpression:e.valueExpression,label:e.label,valueExpressionTitle:e.valueExpressionTitle,color:I[t]}))),O=new a({attributes:R,dotBlendingEnabled:n.dotBlendingEnabled,outline:D?p(b,y,D.opacity):null,dotValue:E,referenceScale:n.dotValueOptimizationEnabled?T:null,legendOptions:n.legendOptions});return D&&D.visualVariables&&D.visualVariables.length&&(O.visualVariables=D.visualVariables.map((e=>e.clone()))),O.authoringInfo=new i({type:"dot-density",minSliderValue:x,maxSliderValue:z}),{renderer:O,dotDensityScheme:b,basemapId:f.basemapId,basemapTheme:f.basemapTheme}}export{j as createRenderer};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{unique as e}from"../../../core/arrayUtils.js";import{numericTypes as n}from"../../../layers/support/fieldUtils.js";import"../../../popup/content/Content.js";import"../../../popup/content/AttachmentsContent.js";import"../../../popup/content/CustomContent.js";import t from"../../../popup/FieldInfo.js";import i from"../../../popup/content/FieldsContent.js";import"../../../popup/content/MediaContent.js";import s from"../../../popup/content/TextContent.js";import r from"../../../popup/ExpressionInfo.js";import{substitute as o}from"../../../intl/substitute.js";import{fetchMessageBundle as a}from"../../../intl/messages.js";import{viewScaleRE as l}from"../../../renderers/visualVariables/support/visualVariableUtils.js";import{getAttributes as p}from"../../../renderers/support/utils.js";let m=0;const f="expression/";function u(e){return"hasVisualVariables"in e&&e.hasVisualVariables()?e.visualVariables.filter((e=>!l.test(e.valueExpression)&&(!("target"in e)||"outline"!==e.target))):[]}function d(e,i){let s=null;"popupTemplate"in e&&e.popupTemplate&&(s=e.popupTemplate.fieldInfos);const r=e.getField(i);let o=null;if(s&&s.some((e=>!(!e||e.fieldName.toLowerCase()!==r.name.toLowerCase())&&(o=e.clone(),!0))),!o){const e=n.indexOf(r.type)>-1,i="integer"===r.type||"small-integer"===r.type;o=new t({fieldName:r.name,isEditable:r.editable,visible:!0,format:e?{places:i?0:2,digitSeparator:!0}:null})}return o.label||(o.label=r.alias),o}function c(e){const{expression:n,title:t,returnType:i}=e;return new r({name:"expr"+m++,expression:n,title:t,returnType:i})}function x(e){const n="number"===e.returnType?{places:2,digitSeparator:!0}:null;return new t({fieldName:`expression/${e.name}`,visible:!0,format:n})}async function b(n){const t=await a("esri/smartMapping/t9n/smartMapping"),{renderer:i,layer:s,normFieldExpressionTemplate:r}=n,l=[],m=[],f=p(i,u);for(const e of f)if("field"===e.type)l.push(d(s,e.field));else if("normalized-field"===e.type){const n=s.getField(e.field),i=s.getField(e.normalizationField),a=c({type:"expression",expression:`\n      $feature["${n.name}"];\n      $feature["${i.name}"];\n      ${"percentage"===r?`($feature["${n.name}"] / $feature["${i.name}"]) * 100;`:`$feature["${n.name}"] / $feature["${i.name}"];`}\n      `,title:o("percentage"===r?t.normFieldLabelAsPercent:t.normFieldLabel,{expression1:n.alias,expression2:i.alias}),returnType:"number"});l.push(x(a),d(s,e.field),d(s,e.normalizationField)),m.push(a)}else if("expression"===e.type){const n=c(e);l.push(x(n)),m.push(n)}return{fieldInfos:e(l,((e,n)=>e.fieldName===n.fieldName)),expressionInfos:e(m,((e,n)=>e.expression===n.expression))}}async function g(e,n){const{fieldInfos:t,expressionInfos:r}=n,l=await a("esri/smartMapping/t9n/smartMapping");if(t.length>2)return[new i({fieldInfos:t})];const p=[];for(const n of t){const t=n.fieldName;let i=n.label;if(!i){const n=e.getField(t);if(n)i=n.alias||t;else if(r){const e=t.split("expression/")[1],n=r[r.findIndex((n=>n.name===e))];n&&(i=n.title||n.name)}}p.push(new s({text:o(l.fieldInfo,{fieldLabel:i,fieldValue:`{${t}}`})}))}return p}function y(e){return!(!("normalizationField"in e)||!e.normalizationField)||"hasVisualVariables"in e&&e.hasVisualVariables()&&e.visualVariables.some((e=>!(!("normalizationField"in e)||!e.normalizationField)))}export{f as expressionFieldPrefix,g as getContentFromFieldInfos,c as getExpressionInfo,b as getFieldAndExpressionInfos,d as getFieldInfo,x as getFieldInfoFromExpressionInfo,u as getPrimaryVisualVariables,y as hasNormalizedField};

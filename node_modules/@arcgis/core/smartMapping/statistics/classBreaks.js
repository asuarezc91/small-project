/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{isSome as a}from"../../core/maybe.js";import e from"../../core/Error.js";import{getNormalizationType as s,getFieldsList as i}from"../support/utils.js";import{verifyBasicFieldValidity as r,verifyNumericField as l}from"./support/utils.js";import{createLayerAdapter as n,getLayerTypeLabels as t}from"../support/adapters/support/layerUtils.js";async function o(o){const{layerAdapter:m,...p}=await async function(o){if(!o||!o.layer||!o.field&&!o.valueExpression)throw new e("class-breaks:missing-parameters","'layer' and 'field' or 'valueExpression' parameters are required");if(o.valueExpression&&!o.view)throw new e("class-breaks:missing-parameters","View is required when 'valueExpression' is specified");const m=[0,2,1,3],{layer:p,...u}=o,f=n(p,m),d={layerAdapter:f,...u};if(d.normalizationType=s(d),d.numClasses=d.numClasses||5,!f)throw new e("class-breaks:invalid-parameters","'layer' must be one of these types: "+t(m).join(", "));const w=a(d.signal)?{signal:d.signal}:null;await f.load(w);const c=d.field,h=d.minValue,y=d.maxValue,v=null!=h||null!=y,z=d.classificationMethod,b="percent-of-total"===d.normalizationType,x=!1!==d.analyzeData,k=c?f.getField(c):null,V=await i({field:d.field,normalizationField:d.normalizationField,valueExpression:d.valueExpression}),g=r(f,V,"class-breaks:invalid-parameters");if(g)throw g;if(k){const a=l(f,k,"class-breaks:invalid-parameters");if(a)throw a}if(d.valueExpression&&d.normalizationType)throw new e("class-breaks:invalid-parameters","Normalization is not allowed when 'valueExpression' is specified");if(v)if(x){if(b&&null==d.normalizationTotal)throw new e("class-breaks:missing-parameters","'normalizationTotal' is required when 'normalizationType' is 'precent-of-total' and 'minValue', 'maxValue' are specified")}else{if(null==h||null==y)throw new e("class-breaks:missing-parameters","Both 'minValue' and 'maxValue' are required when 'analyzeData' is false");if(h>=y)throw new e("class-breaks:invalid-parameters","'minValue' should be less than 'maxValue'");if(z&&"equal-interval"!==z)throw new e("class-breaks:invalid-parameters","'classificationMethod' other than 'equal-interval' is not allowed when 'analyzeData' is false");if(b&&null==d.normalizationTotal)throw new e("class-breaks:missing-parameters","'normalizationTotal' is required when 'normalizationType' is 'precent-of-total' and 'analyzeData' is false")}else if(!x)throw new e("class-breaks:missing-parameters","Both 'minValue' and 'maxValue' are required when 'analyzeData' is false");return d}(o);return m.classBreaks(p)}export default o;

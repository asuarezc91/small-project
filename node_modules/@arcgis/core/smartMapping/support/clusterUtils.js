/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{isSome as n}from"../../core/maybe.js";import{unique as e}from"../../core/arrayUtils.js";import{isValidNumber as i}from"../../renderers/visualVariables/support/sizeVariableUtils.js";import{createMD5Hash as t}from"../../core/MD5.js";import{getNormalizationType as o}from"./utils.js";import{getPrimaryVisualVariables as l}from"../popup/support/utils.js";const r="cluster_count";function a(n,e){return n.split(`cluster_${e}_`).pop()}function s(e,l){const r=function(n){if(!n)return null;const{field:e,valueExpression:t,normalizationField:l,normalizationType:r,normalizationTotal:a}=n;let s=null;if(t)s=t;else if(e){const n=o({normalizationType:r,normalizationField:l,normalizationTotal:a});if(n){const t=n.toLowerCase();if(s=e.toLowerCase()+",norm:"+t,l)s+=","+l.toLowerCase();else if("percent-of-total"===t){let n=a;i(n)&&0!==n||(n=null),s+=","+n}}}return s}(e);return`${l}_${n(r)?function(n){return t(n)}(r):e.field}`}function u(n,e){return`cluster_${s(n,e)}`}function p(n,e){const i=e.getField(n);return i&&i.type}function f(e,i){const t="field"in i&&i.field,o=t?p(t,e):null;return{field:t,fieldType:n(o)?o:null,valueExpression:"valueExpression"in i?i.valueExpression:null,valueExpressionTitle:"valueExpressionTitle"in i?i.valueExpressionTitle:null,normalizationField:"normalizationField"in i?i.normalizationField:null,normalizationType:"normalizationType"in i?i.normalizationType:null,normalizationTotal:"normalizationTotal"in i?i.normalizationTotal:null}}function c(e,i){const t="rotation"===i.type?i.rotationType:null,o=i.legendOptions&&i.legendOptions.title,l=i.field,r=l?p(l,e):null;return{field:l,fieldType:n(r)?r:null,rotationType:t,valueExpression:i.valueExpression,valueExpressionTitle:i.valueExpressionTitle||i.valueExpression&&o,normalizationField:"normalizationField"in i?i.normalizationField:null,vvType:i.type}}function m(n){return n?n.replace(/"/g,'\\"'):""}function v(n,e,i){return`\n  var uvInfos = [${function(n){return n.map((n=>`{\n        "value": "${String(n.value)}",\n        "label": "${m(String(n.label))}"\n      }`))}(n).join(", ")}];\n  var predominantType = Text($feature["${e}"]);\n  var label = "${m(i)}";\n\n  for (var i = 0; i < Count(uvInfos); i++) {\n    if (uvInfos[i].value == predominantType) {\n      label = uvInfos[i].label;\n      break;\n    }\n  }\n\n  return label;\n  `}function T(n,e){const i=[s(n,e)];return"date"===n.fieldType&&i.push(n.fieldType.toLowerCase()),n.rotationType&&i.push(n.rotationType.toLowerCase()),i.join("_")}function d(n,e){return{statisticHash:T(n,e),attributeInfo:n,statisticType:e}}function y(n,i,t=!0){const o=[],r=f(n,i);"class-breaks"===i.type?o.push(d(r,"avg")):"unique-value"===i.type&&o.push(d(r,"type"));const a=l(i);for(const e of a){const i=c(n,e);o.push(d(i,"avg"))}return t?e(o,((n,e)=>n.statisticHash===e.statisticHash)):o}export{r as clusterCountField,u as getClusterField,a as getClusterFieldHash,v as getPredominantTypeExpression,f as getRendererAttributeInfo,s as getStatisticId,d as getStatisticInfo,y as getStatisticInfos,c as getVariableAttributeInfo};

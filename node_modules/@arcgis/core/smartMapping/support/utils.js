/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{loadArcade as e}from"../../support/arcadeOnDemand.js";import t from"../../Basemap.js";import{getWellKnownBasemapId as n}from"../../support/basemapUtils.js";const r={light:["streets","gray","topo","terrain","national-geographic","oceans","osm","gray-vector","streets-vector","topo-vector","streets-relief-vector","streets-navigation-vector"],dark:["satellite","hybrid","dark-gray","dark-gray-vector","streets-night-vector"]},o={years:365,months:30,days:1,hours:1/24,minutes:1/1440,seconds:1/86400,milliseconds:1/864e5},i=["integer","small-integer"];let s=null;async function a(t){const n=t.field,r=t.normalizationField,o=t.valueExpression;let i=[];if(o){if(!s){const{arcadeUtils:t}=await e();s=t}i=s.extractFieldNames(o)}return n&&i.push(n),r&&i.push(r),i}function l(e){let t=e.normalizationType;return t||(e.normalizationField?t="field":null!=e.normalizationTotal&&(t="percent-of-total")),t}function u(e){return String(e).padStart(2,"0")}function c(e,t,n){let r;if("date"===t||"number"===t){"number"===t&&(e=new Date(e));r=`TIMESTAMP'${n?e.getFullYear():e.getUTCFullYear()}-${u((n?e.getMonth():e.getUTCMonth())+1)}-${u(n?e.getDate():e.getUTCDate())} ${u(n?e.getHours():e.getUTCHours())}:${u(n?e.getMinutes():e.getUTCMinutes())}:${u(n?e.getSeconds():e.getUTCSeconds())}'`}else r=e;return r}function f(e,t,n,r){const{hasQueryEngine:i}=e;let s=`(${c(n,g(e,n),i)} - ${c(t,g(e,t),i)})`;i&&(s=`(${s} * ${o.milliseconds})`);let a=o[r],l="/";a<1&&(a=1/a,l="*");return{sqlExpression:1===a?s:`(${s} ${l} ${a})`,sqlWhere:null}}function g(e,t){if(t instanceof Date)return"date";if("number"==typeof t)return"number";if("string"==typeof t){const n=e.getField(t);if("<now>"===t.toLowerCase())return;if(n&&"date"===n.type)return"field"}}function d(e,t=r){for(const n in t)if(t[n].indexOf(e)>-1)return n}function p(e,r,o=!0){let i=null;return"string"==typeof e&&r.indexOf(e)>-1?i=e:e instanceof t&&(i=n(e)),o?i||"gray":i}function m(e,t){const n=t&&e.getField(t);return n&&i.indexOf(n.type)>-1}function y(e){return`cast(${e} as float)`}export{y as castIntegerFieldToFloat,r as defaultBasemapGroups,d as getBasemapGroup,p as getBasemapId,f as getDateDiffSQL,g as getDateType,a as getFieldsList,l as getNormalizationType,m as isIntegerField,o as unitValueInDays};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import t from"../Logger.js";import{handlesGroup as e}from"../handleUtils.js";import{create as s,throwIfAborted as i,isThenable as n,resolve as r,first as l,reject as o,all as h}from"../promiseUtils.js";import c from"./RemoteClient.js";const _=t.getLogger("esri.core.workers.Connection");export default class{constructor(){this._clients=new Array,this._clientPromises=new Array,this._clientIdx=0}destroy(){this.close()}get closed(){return!this._clients||!this._clients.length}open(t,e){return s(((s,l)=>{let o=!0;const h=t=>{i(e.signal),o&&(o=!1,t())};this._clients.length=t.length,this._clientPromises.length=t.length;for(let i=0;i<t.length;++i){const o=t[i];n(o)?this._clientPromises[i]=o.then((t=>(this._clients[i]=new c(t,e),h(s),this._clients[i])),(()=>(h(l),null))):(this._clients[i]=new c(o,e),this._clientPromises[i]=r(this._clients[i]),h(s))}}))}broadcast(t,e,s){const i=new Array(this._clientPromises.length);for(let n=0;n<this._clientPromises.length;++n){const r=this._clientPromises[n];i[n]=r.then((i=>i.invoke(t,e,s)))}return i}close(){for(const t of this._clientPromises)t.then((t=>t.close()));this._clients.length=0,this._clientPromises.length=0}getAvailableClient(){let t;for(let e=0;e<this._clients.length;++e){const s=this._clients[e];if(s){if(!s.isBusy())return r(s)}else t=t||[],t.push(this._clientPromises[e])}return t?l(t):(this._clientIdx=(this._clientIdx+1)%this._clients.length,r(this._clients[this._clientIdx]))}invoke(t,e,s){let i=null;if(Array.isArray(s)?(_.warn("invoke()","The transferList parameter is deprecated, use the options object instead"),i={transferList:s}):i=s,this.closed)return o(new Error("Connection closed"));return this.getAvailableClient().then((s=>s.invoke(t,e,i)))}on(t,s){return h(this._clientPromises).then((()=>e(this._clients.map((e=>e.on(t,s))))))}openPorts(){return s((t=>{const e=new Array(this._clientPromises.length);let s=e.length;for(let i=0;i<this._clientPromises.length;++i){this._clientPromises[i].then((n=>{e[i]=n.openPort(),0==--s&&t(e)}))}}))}get test(){return{numClients:this._clients.length}}}

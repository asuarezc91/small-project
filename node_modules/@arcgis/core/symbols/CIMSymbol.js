/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as r}from"../chunks/tslib.es6.js";import"../core/has.js";import{clone as o}from"../core/lang.js";import{numericHash as t}from"../core/string.js";import"../core/Logger.js";import"../core/accessorSupport/ensureType.js";import{property as e}from"../core/accessorSupport/decorators/property.js";import{enumeration as s}from"../core/accessorSupport/decorators/enumeration.js";import{reader as i}from"../core/accessorSupport/decorators/reader.js";import{subclass as a}from"../core/accessorSupport/decorators/subclass.js";import{writer as p}from"../core/accessorSupport/decorators/writer.js";import"../core/urlUtils.js";import"../core/uuid.js";import"../portal/support/resourceExtension.js";import{all as c}from"../core/promiseUtils.js";import{collectArcadeFieldNames as m}from"../layers/support/fieldUtils.js";import n from"./Symbol.js";var l;let d=l=class extends n{constructor(r){super(r),this.data=null,this.type="cim"}readData(r,o){return o}writeData(r,o){if(r)for(const t in r)o[t]=r[t]}async collectRequiredFields(r,o){if("CIMSymbolReference"===this.data.type){const t=this.data.primitiveOverrides;if(t){const e=t.map((t=>{const e=t.valueExpressionInfo;return m(r,o,e.expression)}));await c(e)}}}clone(){return new l({data:o(this.data)})}hash(){return t(JSON.stringify(this.data)).toString()}};r([e({json:{write:!1}})],d.prototype,"color",void 0),r([e({json:{write:!0}})],d.prototype,"data",void 0),r([i("data",["symbol"])],d.prototype,"readData",null),r([p("data")],d.prototype,"writeData",null),r([s({CIMSymbolReference:"cim"},{readOnly:!0})],d.prototype,"type",void 0),d=l=r([a("esri.symbols.CIMSymbol")],d);var u=d;export default u;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{resampleHermite as e}from"./utils.js";import r from"./Rect.js";import{SymbolHelper as t,CIMSymbolHelper as a}from"./CIMSymbolHelper.js";import{getSDFInfo as n,buildSDF as i}from"./SDFHelper.js";export default class{dispose(){this._rasterizationCanvas=null}rasterizeJSONResource(e,s,o){if(this._rasterizationCanvas||(this._rasterizationCanvas=document.createElement("canvas")),"simple-fill"===e.type||"esriSFS"===e.type){const[r,a,n]=t.rasterizeSimpleFill(this._rasterizationCanvas,e.style,s);return{size:[a,n],image:new Uint32Array(r.buffer),sdf:!1,simplePattern:!0,anchorX:0,anchorY:0}}if("simple-line"===e.type||"esriSLS"===e.type){const[r,a,n]=t.rasterizeSimpleLine(e.style,e.cap);return{size:[a,n],image:new Uint32Array(r.buffer),sdf:!0,simplePattern:!0,anchorX:0,anchorY:0}}let m,l,f;if("simple-marker"===e.type||"esriSMS"===e.type||"line-marker"===e.type?(m=a.fromSimpleMarker(e),f=n(m)):"CIMHatchFill"===e.type?(m=a.fromCIMHatchFill(e),l=new r(m.frame.xmin,-m.frame.ymax,m.frame.xmax-m.frame.xmin,m.frame.ymax-m.frame.ymin)):e.markerPlacement&&"CIMMarkerPlacementInsidePolygon"===e.markerPlacement.type?(m=a.fromCIMInsidePolygon(e),l=new r(m.frame.xmin,-m.frame.ymax,m.frame.xmax-m.frame.xmin,m.frame.ymax-m.frame.ymin)):(m=e,f=n(m)),f&&!o){const[e,r,t]=i(f);return e?{size:[r,t],image:new Uint32Array(e.buffer),sdf:!0,simplePattern:!0,anchorX:0,anchorY:0}:null}const[c,h,p,y,u]=a.rasterize(this._rasterizationCanvas,m,l,!o);return c?{size:[h,p],image:new Uint32Array(c.buffer),sdf:!1,simplePattern:!1,anchorX:y,anchorY:u}:null}rasterizeImageResource(r,t,a,n){this._rasterizationCanvas||(this._rasterizationCanvas=document.createElement("canvas")),this._rasterizationCanvas.width=r,this._rasterizationCanvas.height=t;const i=this._rasterizationCanvas.getContext("2d");a instanceof ImageData?i.putImageData(a,0,0):(a.setAttribute("width",`${r}px`),a.setAttribute("height",`${t}px`),i.drawImage(a,0,0,r,t));const s=i.getImageData(0,0,r,t),o=new Uint8Array(s.data);if(n)for(const e of n)if(e&&e.oldColor&&4===e.oldColor.length&&e.newColor&&4===e.newColor.length){const[r,t,a,n]=e.oldColor,[i,s,m,l]=e.newColor;if(r===i&&t===s&&a===m&&n===l)continue;for(let e=0;e<o.length;e+=4)r===o[e]&&t===o[e+1]&&a===o[e+2]&&n===o[e+3]&&(o[e]=i,o[e+1]=s,o[e+2]=m,o[e+3]=l)}let m;for(let e=0;e<o.length;e+=4)m=o[e+3]/255,o[e]=o[e]*m,o[e+1]=o[e+1]*m,o[e+2]=o[e+2]*m;let l=o,f=r,c=t;const h=512;if(f>=h||c>=h){const a=f/c;a>1?(f=h,c=Math.round(h/a)):(c=h,f=Math.round(h*a)),l=new Uint8Array(4*f*c);const n=new Uint8ClampedArray(l.buffer);e(o,r,t,n,f,c,!1)}return{size:[r,t],image:new Uint32Array(l.buffer),sdf:!1,simplePattern:!1,anchorX:0,anchorY:0}}}

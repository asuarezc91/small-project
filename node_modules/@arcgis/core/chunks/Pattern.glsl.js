/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{glsl as e}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{Transform as t}from"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js";import{ShaderBuilder as a}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";import{ColorConversion as o}from"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js";import{Slice as r}from"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js";import{OutputHighlight as i}from"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js";import{symbolAlphaCutoff as n}from"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js";import{VertexColor as l}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js";import{OutputDepth as c}from"../views/3d/webgl-engine/core/shaderLibrary/output/OutputDepth.glsl.js";const d=.70710678118;function s(s){const p=new a;s.draped||p.extensions.add("GL_OES_standard_derivatives");const v=1===s.output;p.include(t,{linearDepth:v}),p.include(l,s),p.vertex.uniforms.add("proj","mat4"),p.vertex.uniforms.add("view","mat4"),v&&(p.include(c,s),p.vertex.uniforms.add("nearFar","vec2"),p.varyings.add("linearDepth","float")),s.draped?p.vertex.uniforms.add("worldToScreenRatio","float"):(p.vertex.uniforms.add("worldToScreenPerDistanceRatio","float"),p.vertex.uniforms.add("camPos","vec3"),p.attributes.add("bound1","vec3"),p.attributes.add("bound2","vec3"),p.attributes.add("bound3","vec3")),p.attributes.add("position","vec3"),p.attributes.add("uvMapSpace","vec4"),p.varyings.add("vpos","vec3"),p.varyings.add("vuv","vec2");const u=3===s.style||4===s.style||5===s.style;return u&&p.vertex.code.add(e`
      const mat2 rotate45 = mat2(${e.float(d)}, ${e.float(-.70710678118)},
                                 ${e.float(.70710678118)}, ${e.float(d)});
    `),s.draped||(p.vertex.code.add(e`
      vec3 projectPointToLineSegment(vec3 center, vec3 halfVector, vec3 point) {
        float projectedLength = dot(halfVector, point - center) / dot(halfVector, halfVector);
        return center + halfVector * clamp(projectedLength, -1.0, 1.0);
      }
    `),p.vertex.code.add(e`
      vec3 intersectRayPlane(vec3 rayDir, vec3 rayOrigin, vec3 planeNormal, vec3 planePoint) {
        float d = dot(planeNormal, planePoint);
        float t = (d - dot(planeNormal, rayOrigin)) / dot(planeNormal, rayDir);

        return rayOrigin + t * rayDir;
      }
    `),p.vertex.code.add(e`
      float boundingRectDistanceToCamera() {
        vec3 halfU = (bound2 - bound1) * 0.5;
        vec3 halfV = (bound3 - bound1) * 0.5;
        vec3 center = bound1 + halfU + halfV;
        vec3 n = normalize(cross(halfU, halfV));

        vec3 viewDir = - vec3(view[0][2], view[1][2], view[2][2]);

        float viewAngle = dot(viewDir, n);
        float minViewAngle = ${e.float(.08715574274)};

        if (abs(viewAngle) < minViewAngle) {
          // view direction is (almost) parallel to plane -> clamp it to min angle
          float normalComponent = sign(viewAngle) * minViewAngle - viewAngle;
          viewDir = normalize(viewDir + normalComponent * n);
        }

        // intersect view direction with infinite plane that contains bounding rect
        vec3 planeProjected = intersectRayPlane(viewDir, camPos, n, center);

        // clip to bounds by projecting to u and v line segments individually
        vec3 uProjected = projectPointToLineSegment(center, halfU, planeProjected);
        vec3 vProjected = projectPointToLineSegment(center, halfV, planeProjected);

        // use to calculate the closest point to camera on bounding rect
        vec3 closestPoint = uProjected + vProjected - center;

        return length(closestPoint - camPos);
      }
    `)),p.vertex.code.add(e`
    vec2 scaledUV() {
      vec2 uv = uvMapSpace.xy ${u?" * rotate45":""};
      vec2 uvCellOrigin = uvMapSpace.zw ${u?" * rotate45":""};

      ${s.draped?e`
            float ratio = worldToScreenRatio;
          `:e`
            float distanceToCamera = boundingRectDistanceToCamera();
            float ratio = worldToScreenPerDistanceRatio / distanceToCamera;

            // Logarithmically discretize ratio to avoid jittering
            float step = 0.1;
            ratio = log(ratio);
            ratio = ceil(ratio / step) * step;
            ratio = exp(ratio);
          `}

      vec2 uvOffset = mod(uvCellOrigin * ratio, ${e.float(s.patternSpacing)});
      return uvOffset + (uv * ratio);
    }
  `),p.vertex.code.add(e`
    void main(void) {
      vuv = scaledUV();
      vpos = position;
      forwardNormalizedVertexColor();
      gl_Position = ${v?e`transformPositionWithDepth(proj, view, vpos, nearFar, linearDepth);`:e`transformPosition(proj, view, vpos);`}
    }
  `),p.include(r,s),p.fragment.include(o),p.fragment.uniforms.add("matColor","vec4"),s.draped&&p.fragment.uniforms.add("texelSize","float"),4===s.output&&p.include(i),4!==s.output&&(p.fragment.code.add(e`
      const float lineWidth = ${e.float(s.lineWidth)};
      const float spacing = ${e.float(s.patternSpacing)};
      const float spacingINV = ${e.float(1/s.patternSpacing)};

      float coverage(float p, float txlSize) {
        p = mod(p, spacing);

        float halfTxlSize = txlSize / 2.0;

        float start = p - halfTxlSize;
        float end = p + halfTxlSize;

        float coverage = (ceil(end * spacingINV) - floor(start * spacingINV)) * lineWidth;
        coverage -= min(lineWidth, mod(start, spacing));
        coverage -= max(lineWidth - mod(end, spacing), 0.0);

        return coverage / txlSize;
      }
    `),s.draped||p.fragment.code.add(e`
        const int maxSamples = 5;

        float sample(float p) {
          vec2 dxdy = abs(vec2(dFdx(p), dFdy(p)));
          float fwidth = dxdy.x + dxdy.y;

          ivec2 samples = 1 + ivec2(clamp(dxdy, 0.0, float(maxSamples - 1)));
          vec2 invSamples = 1.0 / vec2(samples);

          float accumulator = 0.0;

          for (int j = 0; j < maxSamples; j++) {
            if(j >= samples.y) {
              break;
            }

            for (int i = 0; i < maxSamples; i++) {
              if(i >= samples.x) {
                break;
              }

              vec2 step = vec2(i,j) * invSamples - 0.5;
              accumulator += coverage(p + step.x * dxdy.x + step.y * dxdy.y, fwidth);
            }
          }

          accumulator /= float(samples.x * samples.y);
          return accumulator;
        }
      `)),p.fragment.code.add(e`
    void main() {
      discardBySlice(vpos);
      vec4 color = ${s.attributeColor?"vColor * matColor;":"matColor;"}
      color = highlightSlice(color, vpos);

      ${4!==s.output?e`color.a *= ${function(t){function a(a){return t.draped?e`coverage(vuv.${a}, texelSize)`:e`sample(vuv.${a})`}switch(t.style){case 3:case 0:return a("y");case 4:case 1:return a("x");case 5:case 2:return e`
        1.0 - (1.0 - ${a("x")}) * (1.0 - ${a("y")})
      `;default:return"0.0"}}(s)};`:""}

      if (color.a < ${e.float(n)}) {
        discard;
      }

      ${7===s.output?e`gl_FragColor = vec4(color.a);`:""}

      ${0===s.output?e`gl_FragColor = color; ${s.OITEnabled?"gl_FragColor = premultiplyAlpha(gl_FragColor);":""}`:""}
      ${4===s.output?e`outputHighlight();`:""}
      ${1===s.output?e`outputDepth(linearDepth);`:""};
    }
  `),p}var p=Object.freeze({__proto__:null,build:s});export{p as P,s as b};

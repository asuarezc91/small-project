/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import t from"../Color.js";import{GeomType as e,ID as r,Properties as a,Zoom as s}from"../views/2d/engine/vectorTiles/expression/data.js";import{unitBezier as n}from"../views/2d/unitBezier.js";import{interpolate as o}from"../views/2d/engine/vectorTiles/GeometryUtils.js";class i{constructor(t){this.args=t}static parse(t){if(4!==t.length)throw new Error('"rgb" expects 3 arguments.');const e=t.slice(1).map((t=>Et(t)));return new i(e)}evaluate(t,e){const r=this.args[1].evaluate(t,e),a=this.args[2].evaluate(t,e),s=this.args[3].evaluate(t,e);return`rgb(${Math.round(r)},${Math.round(a)},${Math.round(s)})`}}class l{constructor(t){this.args=t}static parse(t){if(5!==t.length)throw new Error('"rgba" expects 4 arguments.');const e=t.slice(1).map((t=>Et(t)));return new i(e)}evaluate(t,e){const r=this.args[1].evaluate(t,e),a=this.args[2].evaluate(t,e),s=this.args[3].evaluate(t,e),n=this.args[4].evaluate(t,e);return`rgb(${Math.round(r)},${Math.round(a)},${Math.round(s)},${n})`}}class u{constructor(t){this.color=t}static parse(t){if(2!==t.length)throw new Error('"to-rgba" expects 1 argument.');const e=Et(t[1]);return new u(e)}evaluate(e,r){return new t(this.color.evaluate(e,r)).toRgba()}}class c{constructor(t,e,r){this.lhs=t,this.rhs=e,this.compare=r}static parse(t,e){if(3!==t.length&&4!==t.length)throw new Error(`"${t[0]}" expects 2 or 3 arguments`);if(4===t.length)throw new Error(`"${t[0]}" collator not supported`);return new c(Et(t[1]),Et(t[2]),e)}evaluate(t,e){return this.compare(this.lhs.evaluate(t,e),this.rhs.evaluate(t,e))}}class h extends c{static parse(t){return c.parse(t,((t,e)=>t===e))}}class p extends c{static parse(t){return c.parse(t,((t,e)=>t!==e))}}class f extends c{static parse(t){return c.parse(t,((t,e)=>t<e))}}class g extends c{static parse(t){return c.parse(t,((t,e)=>t<=e))}}class w extends c{static parse(t){return c.parse(t,((t,e)=>t>e))}}class m extends c{static parse(t){return c.parse(t,((t,e)=>t>=e))}}class v{constructor(t){this.arg=t}static parse(t){if(2!==t.length)throw new Error('"!" expects 1 argument');return new v(Et(t[1]))}evaluate(t,e){return!this.arg.evaluate(t,e)}}class b{constructor(t){this.args=t}static parse(t){const e=[];for(let r=1;r<t.length;r++)e.push(Et(t[r]));return new b(e)}evaluate(t,e){for(const r of this.args)if(!r.evaluate(t,e))return!1;return!0}}class d{constructor(t){this.args=t}static parse(t){const e=[];for(let r=1;r<t.length;r++)e.push(Et(t[r]));return new d(e)}evaluate(t,e){for(const r of this.args)if(r.evaluate(t,e))return!0;return!1}}class y{constructor(t){this.args=t}static parse(t){const e=[];for(let r=1;r<t.length;r++)e.push(Et(t[r]));return new y(e)}evaluate(t,e){for(const r of this.args)if(r.evaluate(t,e))return!1;return!0}}class x{constructor(t,e){this.args=t,this.fallback=e}static parse(t){if(t.length<4)throw new Error('"case" expects at least 3 arguments');if(t.length%2==1)throw new Error('"case" expects an odd number of arguments');const e=[];for(let r=1;r<t.length-1;r+=2)e.push({condition:Et(t[r]),output:Et(t[r+1])});return new x(e,Et(t[t.length-1]))}evaluate(t,e){for(const r of this.args)if(r.condition.evaluate(t,e))return r.output.evaluate(t,e);return this.fallback.evaluate(t,e)}}class E{constructor(t){this.args=t}static parse(t){if(t.length<2)throw new Error('"coalesce" expects at least 1 argument');const e=[];for(let r=1;r<t.length;r++)e.push(Et(t[r]));return new E(e)}evaluate(t,e){for(const r of this.args){const a=r.evaluate(t,e);if(null!==a)return a}return null}}class M{constructor(t,e,r,a){this.input=t,this.labels=e,this.outputs=r,this.fallback=a}static parse(t){if(t.length<3)throw new Error('"match" expects at least 3 arguments');if(t.length%2==0)throw new Error('"case" expects an even number of arguments');const e=Et(t[1]),r=[],a={};let s;for(let e=2;e<t.length-1;e+=2){let n=t[e];Array.isArray(n)||(n=[n]);for(const t of n){const e=typeof t;if("string"!==e&&"number"!==e)throw new Error('"match" requires string or number literal as labels');if(s){if(e!==s)throw new Error('"match" requires labels to have the same type')}else s=e;a[t]=r.length}r.push(Et(t[e+1]))}return new M(e,a,r,Et(t[t.length-1]))}evaluate(t,e){const r=this.input.evaluate(t,e);return(this.outputs[this.labels[r]]||this.fallback).evaluate(t,e)}}const k=4/29,$=6/29,A=3*$*$,j=Math.PI/180,q=180/Math.PI;function N(t){return t>.008856451679035631?Math.pow(t,1/3):t/A+k}function I(t){return t>$?t*t*t:A*(t-k)}function T(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function R(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function z(t){const e=R(t.r),r=R(t.g),a=R(t.b),s=N((.4124564*e+.3575761*r+.1804375*a)/.95047),n=N((.2126729*e+.7151522*r+.072175*a)/1);return{l:116*n-16,a:500*(s-n),b:200*(n-N((.0193339*e+.119192*r+.9503041*a)/1.08883)),alpha:t.a}}function C(e){let r=(e.l+16)/116,a=isNaN(e.a)?r:r+e.a/500,s=isNaN(e.b)?r:r-e.b/200;return r=1*I(r),a=.95047*I(a),s=1.08883*I(s),new t([T(3.2404542*a-1.5371385*r-.4985314*s),T(-.969266*a+1.8760108*r+.041556*s),T(.0556434*a-.2040259*r+1.0572252*s),e.alpha])}function L(t){const{l:e,a:r,b:a}=z(t),s=Math.atan2(a,r)*q;return{h:s<0?s+360:s,c:Math.sqrt(r*r+a*a),l:e,alpha:t.a}}function O(t,e,r){const a=e-t;return t+r*(a>180||a<-180?a-360*Math.round(a/360):a)}class S{constructor(t,e,r,a){this.operator=t,this.input=e,this.stops=r,this.interpolation=a}static parse(t){if(t.length<5)throw new Error(`"${t[0]}" expects at least 4 arguments.`);const e=t[1];if(!Array.isArray(e)||0===e.length)throw new Error(`"${t[0]}" expects an interpolation type expression.`);switch(e[0]){case"linear":break;case"exponential":if("number"!=typeof e[1])throw new Error(`"${t[0]}" expects a numeric base for exponential interpolation.`);break;case"cubic-bezier":if(5!==e.length)throw new Error("Cubic bezier interpolation requires four numeric arguments with values between 0 and 1.");for(let t=1;t<5;t++){const r=e[t];if("number"!=typeof r||r<0||r>1)throw new Error("Cubic bezier interpolation requires four numeric arguments with values between 0 and 1.")}break;default:throw new Error(`"${t[0]}" unknown interpolation type "${e[0]}".`)}if(t.length%2!=1)throw new Error(`"${t[0]}" expects an even number of arguments.`);const r=Et(t[2]),a=[];for(let e=3;e<t.length;e+=2){const r=t[e];if("number"!=typeof r)throw new Error(`"${t[0]}" requires stop inputs as literal numbers.`);if(a.length&&a[a.length-1][0]>=r)throw new Error(`"${t[0]}" requires strictly ascending stop inputs.`);a.push([r,Et(t[e+1])])}return new S(t[0],r,a,e)}evaluate(t,e){const r=this.stops;if(1===r.length)return r[0][1].evaluate(t,e);const a=this.input.evaluate(t,e);if(a<=r[0][0])return r[0][1].evaluate(t,e);if(a>=r[r.length-1][0])return r[r.length-1][1].evaluate(t,e);let s=0;for(;++s<r.length&&!(a<r[s][0]););const n=r[s-1][0],i=r[s][0],l=S.interpolationRatio(this.interpolation,a,n,i),u=r[s-1][1].evaluate(t,e),c=r[s][1].evaluate(t,e);return"interpolate"===this.operator?Array.isArray(u)?u.map(((t,e)=>o(t,c[e],l))):o(u,c,l):"interpolate-hcl"===this.operator?function(t){const e=t.h*j,r=t.c;return C({l:t.l,a:Math.cos(e)*r,b:Math.sin(e)*r,alpha:t.alpha})}(function(t,e,r){return{h:O(t.h,e.h,r),c:o(t.c,e.c,r),l:o(t.l,e.l,r),alpha:o(t.alpha,e.alpha,r)}}(L(u),L(c),l)):C(function(t,e,r){return{l:o(t.l,e.l,r),a:o(t.a,e.a,r),b:o(t.b,e.b,r),alpha:o(t.alpha,e.alpha,r)}}(z(u),z(c),l))}static interpolationRatio(t,e,r,a){let s=0;if("exponential"===t[0])s=S.exponentialInterpolationRatio(e,t[1],r,a);else if("linear"===t[0])s=S.exponentialInterpolationRatio(e,1,r,a);else if("cubic-bezier"===t[0]){s=n(t[1],t[2],t[3],t[4])(S.exponentialInterpolationRatio(e,1,r,a),1e-5)}return s}static exponentialInterpolationRatio(t,e,r,a){const s=a-r;if(0===s)return 0;const n=t-r;return 1===e?n/s:(Math.pow(e,n)-1)/(Math.pow(e,s)-1)}}class P{constructor(t,e){this.input=t,this.stops=e}static parse(t){if(t.length<5)throw new Error('"step" expects at least 4 arguments.');if(t.length%2!=1)throw new Error('"step" expects an even number of arguments.');const e=Et(t[1]),r=[];r.push([-1/0,Et(t[2])]);for(let e=3;e<t.length;e+=2){const a=t[e];if("number"!=typeof a)throw new Error('"step" requires stop inputs as literal numbers.');if(r.length&&r[r.length-1][0]>=a)throw new Error('"step" requires strictly ascending stop inputs.');r.push([a,Et(t[e+1])])}return new P(e,r)}evaluate(t,e){const r=this.stops;if(1===r.length)return r[0][1].evaluate(t,e);const a=this.input.evaluate(t,e);let s=0;for(;++s<r.length&&!(a<r[s][0]););return this.stops[s-1][1].evaluate(t,e)}}class U{constructor(t,e){this.index=t,this.array=e}static parse(t){if(3!==t.length)throw new Error('"at" expects 2 arguments.');const e=Et(t[1]),r=Et(t[2]);return new U(e,r)}evaluate(t,e){const r=this.index.evaluate(t,e),a=this.array.evaluate(t,e);if(r<0||r>=a.length)throw new Error('"at" index out of bounds.');if(r!==Math.floor(r))throw new Error('"at" index must be an integer.');return a[r]}}class B{constructor(t,e){this.key=t,this.obj=e}static parse(t){let e,r;switch(t.length){case 2:return e=Et(t[1]),new B(e);case 3:return e=Et(t[1]),r=Et(t[2]),new B(e,r);default:throw new Error('"get" expects 1 or 2 arguments')}}evaluate(t,e){const r=this.key.evaluate(t,e);if(this.obj){return this.obj.evaluate(t,e)[r]}return t.values[r]}}class F{constructor(t,e){this.key=t,this.obj=e}static parse(t){let e,r;switch(t.length){case 2:return e=Et(t[1]),new F(e);case 3:return e=Et(t[1]),r=Et(t[2]),new F(e,r);default:throw new Error('"has" expects 1 or 2 arguments')}}evaluate(t,e){const r=this.key.evaluate(t,e);if(this.obj){return r in this.obj.evaluate(t,e)}return void 0!==t.values[r]}}class G{constructor(t,e){this.key=t,this.vals=e}static parse(t){if(3!==t.length)throw new Error('"in" expects 2 arguments');return new G(Et(t[1]),Et(t[2]))}evaluate(t,e){const r=this.key.evaluate(t,e);return-1!==this.vals.evaluate(t,e).indexOf(r)}}class J{constructor(t,e,r){this.item=t,this.array=e,this.from=r}static parse(t){if(t.length<3||t.length>4)throw new Error('"index-of" expects 3 or 4 arguments.');const e=Et(t[1]),r=Et(t[2]);if(4===t.length){const a=Et(t[3]);return new J(e,r,a)}return new J(e,r)}evaluate(t,e){const r=this.item.evaluate(t,e),a=this.array.evaluate(t,e);if(this.from){const s=this.from.evaluate(t,e);if(s!==Math.floor(s))throw new Error('"index-of" index must be an integer.');return a.indexOf(r,s)}return a.indexOf(r)}}class D{constructor(t){this.arg=t}static parse(t){if(2!==t.length)throw new Error('"length" expects 2 arguments.');const e=Et(t[1]);return new D(e)}evaluate(t,e){const r=this.arg.evaluate(t,e);if("string"==typeof r)return r.length;if(Array.isArray(r))return r.length;throw new Error('"length" expects string or array.')}}class H{constructor(t,e,r){this.array=t,this.from=e,this.to=r}static parse(t){if(t.length<3||t.length>4)throw new Error('"slice" expects 2 or 3 arguments.');const e=Et(t[1]),r=Et(t[2]);if(4===t.length){const a=Et(t[3]);return new H(e,r,a)}return new H(e,r)}evaluate(t,e){const r=this.array.evaluate(t,e),a=this.from.evaluate(t,e);if(a<0||a>=r.length)throw new Error('"slice" index out of bounds.');if(a!==Math.floor(a))throw new Error('"slice" index must be an integer.');if(this.to){const s=this.to.evaluate(t,e);if(s<0||s>=r.length)throw new Error('"slice" index out of bounds.');if(s!==Math.floor(s))throw new Error('"slice" index must be an integer.');return r.slice(a,s)}return r.slice(a)}}class K{static parse(t){if(1!==t.length)throw new Error('"has-id" expects no arguments');return new K}evaluate(t,e){return void 0!==t.id}}class Q{constructor(t,e){this.args=t,this.calculate=e}static parse(t,e){const r=t.slice(1).map((t=>Et(t)));return new Q(r,e)}evaluate(t,e){let r;return this.args&&(r=this.args.map((r=>r.evaluate(t,e)))),this.calculate(r)}}class V extends Q{static parse(t){switch(t.length){case 2:return Q.parse(t,(t=>-t[0]));case 3:return Q.parse(t,(t=>t[0]-t[1]));default:throw new Error('"-" expects 1 or 2 arguments')}}}class W extends Q{static parse(t){return Q.parse(t,(t=>{let e=1;for(const r of t)e*=r;return e}))}}class X extends Q{static parse(t){if(3===t.length)return Q.parse(t,(t=>t[0]/t[1]));throw new Error('"/" expects 2 arguments')}}class Y extends Q{static parse(t){if(3===t.length)return Q.parse(t,(t=>t[0]%t[1]));throw new Error('"%" expects 2 arguments')}}class Z extends Q{static parse(t){if(3===t.length)return Q.parse(t,(t=>Math.pow(t[0],t[1])));throw new Error('"^" expects 1 or 2 arguments')}}class _ extends Q{static parse(t){return Q.parse(t,(t=>{let e=0;for(const r of t)e+=r;return e}))}}class tt{constructor(t,e){this.args=t,this.calculate=e}static parse(t){const e=t.slice(1).map((t=>Et(t)));return new tt(e,tt.ops[t[0]])}evaluate(t,e){let r;return this.args&&(r=this.args.map((r=>r.evaluate(t,e)))),this.calculate(r)}}tt.ops={abs:t=>Math.abs(t[0]),acos:t=>Math.acos(t[0]),asin:t=>Math.asin(t[0]),atan:t=>Math.atan(t[0]),ceil:t=>Math.ceil(t[0]),cos:t=>Math.cos(t[0]),e:()=>Math.E,floor:t=>Math.floor(t[0]),ln:t=>Math.log(t[0]),ln2:()=>Math.LN2,log10:t=>Math.log(t[0])/Math.LN10,log2:t=>Math.log(t[0])/Math.LN2,max:t=>Math.max(...t),min:t=>Math.min(...t),pi:()=>Math.PI,round:t=>Math.round(t[0]),sin:t=>Math.sin(t[0]),sqrt:t=>Math.sqrt(t[0]),tan:t=>Math.tan(t[0])};class et{constructor(t){this.args=t}static parse(t){return new et(t.slice(1).map((t=>Et(t))))}evaluate(t,e){return this.args.map((r=>r.evaluate(t,e))).join("")}}class rt{constructor(t,e){this.arg=t,this.calculate=e}static parse(t){if(2!==t.length)throw new Error(`${t[0]} expects 1 argument.`);const e=Et(t[1]);return new rt(e,rt.ops[t[0]])}evaluate(t,e){return this.calculate(this.arg.evaluate(t,e))}}rt.ops={downcase:t=>t.toLowerCase(),upcase:t=>t.toUpperCase()};const at={kind:"null"},st={kind:"number"},nt={kind:"string"},ot={kind:"boolean"},it={kind:"color"},lt={kind:"object"},ut={kind:"value"},ct={kind:"error"};function ht(t,e){return{kind:"array",itemType:t,n:e}}const pt=[at,st,nt,ot,it,lt,ht(ut)];function ft(t){if("array"===t.kind){const e=ft(t.itemType);return"number"==typeof t.n?`array<${e}, ${t.n}>`:"value"===t.itemType.kind?"array":`array<${e}>`}return t.kind}function gt(e){if(null===e)return at;if("string"==typeof e)return nt;if("boolean"==typeof e)return ot;if("number"==typeof e)return st;if(e instanceof t)return it;if(Array.isArray(e)){let t;for(const r of e){const e=gt(r);if(t){if(t===e)continue;t=ut;break}t=e}return ht(t||ut,e.length)}return lt}function wt(t,e){if("error"===t.kind)return null;if("array"===e.kind){if("array"===t.kind&&(0===t.n&&"value"===t.itemType.kind||!wt(t.itemType,e.itemType))&&("number"!=typeof e.n||e.n===t.n))return null}else{if(e.kind===t.kind)return null;if("value"===e.kind)for(const e of pt)if(!wt(e,t))return null}return`Expected ${ft(e)} but found ${ft(t)} instead.`}function mt(e){const r=typeof e;return null===e?"":"string"===r||"number"===r||"boolean"===r?String(e):e instanceof t?e.toString():JSON.stringify(e)}class vt{constructor(t,e){this.type=t,this.args=e}static parse(t){const e=t[0];if(t.length<2)throw new Error(`${e} expects at least one argument.`);let r,a=1;if("array"===e){if(t.length>2){switch(t[1]){case"string":r=nt;break;case"number":r=st;break;case"boolean":r=ot;break;default:throw new Error('"array" type argument must be string, number or boolean')}a++}else r=ut;let e;if(t.length>3){if(e=t[2],null!==e&&("number"!=typeof e||e<0||e!==Math.floor(e)))throw new Error('"array" length argument must be a positive integer literal');a++}r=ht(r,e)}else switch(e){case"string":r=nt;break;case"number":r=st;break;case"boolean":r=ot;break;case"object":r=lt}const s=[];for(;a<t.length;a++){const e=Et(t[a]);s.push(e)}return new vt(r,s)}evaluate(t,e){for(const r of this.args){const a=r.evaluate(t,e);if(!wt(gt(a),this.type))return a}return null}}class bt{constructor(t,e){this.type=t,this.args=e}static parse(t){const e=t[0];if("to-boolean"===e||"to-string"===e){if(2!==t.length)throw new Error(`${e} expects one argument.`)}else if(t.length<2)throw new Error(`${e} expects at least one argument.`);const r=bt.types[e],a=[];for(let e=1;e<t.length;e++){const r=Et(t[e]);a.push(r)}return new bt(r,a)}evaluate(e,r){if(this.type===ot)return Boolean(this.args[0].evaluate(e,r));if(this.type===nt)return mt(this.args[0].evaluate(e,r));if(this.type===st){for(const t of this.args){const a=t.evaluate(e,r);if(null===a)return 0;const s=Number(a);if(!isNaN(s))return s}return null}if(this.type===it){for(const a of this.args){const s=a.evaluate(e,r);if(s instanceof t)return s;if("string"==typeof s)return t.fromString(s);if(Array.isArray(s)&&(3===s.length||4===s.length))return t.fromArray(s)}return null}}}bt.types={"to-boolean":ot,"to-color":it,"to-number":st,"to-string":nt};class dt{constructor(t){this.val=t}static parse(t){if(2!==t.length)throw new Error('"literal" expects 1 argument');return new dt(t[1])}evaluate(t,e){return this.val}}class yt{constructor(t){this.arg=t}static parse(t){if(2!==t.length)throw new Error('"typeof" expects 1 argument');return new yt(Et(t[1]))}evaluate(t,e){return ft(gt(this.arg.evaluate(t,e)))}}const xt={array:vt,boolean:vt,collator:null,format:null,literal:dt,image:null,number:vt,"number-format":null,object:vt,string:vt,"to-boolean":bt,"to-color":bt,"to-number":bt,"to-string":bt,typeof:yt,accumulated:null,"feature-state":null,"geometry-type":e,id:r,"line-progress":null,properties:a,at:U,get:B,has:F,in:G,"index-of":J,length:D,slice:H,"!":v,"!=":p,"<":f,"<=":g,"==":h,">":w,">=":m,all:b,any:d,case:x,coalesce:E,match:M,within:null,interpolate:S,"interpolate-hcl":S,"interpolate-lab":S,step:P,let:null,var:null,concat:et,downcase:rt,"is-supported-script":null,"resolved-locale":null,upcase:rt,rgb:i,rgba:l,"to-rgba":u,"-":V,"*":W,"/":X,"%":Y,"^":Z,"+":_,abs:tt,acos:tt,asin:tt,atan:tt,ceil:tt,cos:tt,e:tt,floor:tt,ln:tt,ln2:tt,log10:tt,log2:tt,max:tt,min:tt,pi:tt,round:tt,sin:tt,sqrt:tt,tan:tt,zoom:s,"heatmap-density":null,"has-id":K,none:y};function Et(t){if(null!==t&&"string"!=typeof t&&"boolean"!=typeof t&&"number"!=typeof t||(t=["literal",t]),!Array.isArray(t)||0===t.length)throw new Error("Expression must be a non empty array");const e=t[0];if("string"!=typeof e)throw new Error("First element of expression must be a string");const r=xt[e];if(void 0===r)throw new Error(`Invalid expression operator "${e}"`);if(!r)throw new Error(`Unimplemented expression operator "${e}"`);return r.parse(t)}export{b as A,ot as B,x as C,X as D,h as E,it as F,w as G,F as H,S as I,ct as J,ht as K,f as L,M,p as N,lt as O,Z as P,ft as Q,i as R,P as S,u as T,mt as U,ut as V,vt as W,bt as X,dt as Y,yt as Z,l as a,g as b,Et as c,m as d,v as e,d as f,y as g,E as h,U as i,B as j,G as k,J as l,D as m,H as n,xt as o,K as p,V as q,W as r,Y as s,_ as t,tt as u,et as v,rt as w,at as x,st as y,nt as z};

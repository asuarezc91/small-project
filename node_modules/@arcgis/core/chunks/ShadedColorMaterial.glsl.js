/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{glsl as e}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{Transform as o}from"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js";import{ShaderBuilder as r}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";import{ColorConversion as i}from"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js";import{Slice as a}from"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js";import{symbolAlphaCutoff as d}from"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js";import{ScreenSizeScaling as l}from"../views/3d/webgl-engine/core/shaderLibrary/ScreenSizeScaling.glsl.js";function n(n){const s=new r;return s.include(o,{linearDepth:!1}),s.include(l.builder,{}),s.include(a,n),s.fragment.include(i),s.vertex.uniforms.add("proj","mat4").add("view","mat4"),s.fragment.uniforms.add("color","vec4"),s.attributes.add("position","vec3"),s.varyings.add("vWorldPosition","vec3"),n.screenSizeEnabled&&s.attributes.add("offset","vec3"),n.shadingEnabled&&(s.vertex.uniforms.add("viewNormal","mat4"),s.fragment.uniforms.add("shadedColor","vec4").add("shadingDirection","vec3"),s.attributes.add("normal","vec3"),s.varyings.add("vViewNormal","vec3")),s.vertex.code.add(e`
    void main(void) {
      vWorldPosition = ${n.screenSizeEnabled?"screenSizeScaling(offset, position)":"position"};
  `),n.shadingEnabled&&s.vertex.code.add(e`
      vec3 worldNormal = normal;
      vViewNormal = (viewNormal * vec4(worldNormal, 1)).xyz;
    `),s.vertex.code.add(e`
    gl_Position = transformPosition(proj, view, vWorldPosition);
  }
  `),s.fragment.code.add(e`
    void main() {
      discardBySlice(vWorldPosition);
    `),n.shadingEnabled?s.fragment.code.add(e`
      vec3 viewNormalNorm = normalize(vViewNormal);
      float shadingFactor = 1.0 - clamp(-dot(viewNormalNorm, shadingDirection), 0.0, 1.0);
      vec4 finalColor = mix(color, shadedColor, shadingFactor);
    `):s.fragment.code.add(e`
      vec4 finalColor = color;
    `),s.fragment.code.add(e`
      if (finalColor.a < ${e.float(d)}) {
        discard;
      }
      ${7===n.output?e`gl_FragColor = vec4(finalColor.a);`:""}

      ${0===n.output?e`gl_FragColor = highlightSlice(finalColor, vWorldPosition); ${n.OITEnabled?"gl_FragColor = premultiplyAlpha(gl_FragColor);":""}`:""}
    }
    `),s}var s=Object.freeze({__proto__:null,build:n});export{s as S,n as b};

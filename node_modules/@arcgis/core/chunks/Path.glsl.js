/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{glsl as e}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{Transform as a}from"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js";import{ShaderBuilder as o}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";import{ColorConversion as i}from"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js";import{Slice as r}from"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js";import{OutputHighlight as d}from"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js";import{OutputDepth as l}from"../views/3d/webgl-engine/core/shaderLibrary/output/OutputDepth.glsl.js";import{ReadShadowMap as n}from"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js";import{ForwardLinearDepth as t}from"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js";import{NormalUtils as s}from"../views/3d/webgl-engine/core/shaderLibrary/shading/NormalUtils.glsl.js";import{EvaluateAmbientOcclusion as c}from"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js";import{EvaluateSceneLighting as m}from"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js";import{Normals as g}from"../views/3d/webgl-engine/core/shaderLibrary/shading/Normals.glsl.js";import{PathVertexPosition as v}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/PathVertexPosition.glsl.js";function u(u){const p=new o;return p.vertex.uniforms.add("proj","mat4").add("view","mat4").add("camPos","vec3").add("localOrigin","vec3"),p.varyings.add("vpos","vec3"),p.include(v,u),0!==u.output&&7!==u.output||(p.include(a,{linearDepth:!1}),u.receiveShadows&&p.include(n,u),p.include(t,u),p.varyings.add("vnormal","vec3"),p.varyings.add("vcolor","vec4"),p.vertex.code.add(e`
      void main() {
        vpos = calculateVPos();
        vnormal = normalize(localNormal());

        gl_Position = transformPosition(proj, view, vpos);

        ${0===u.output?"forwardLinearDepth();":""}

        vcolor = getColor();
      }
    `)),7===u.output&&(p.include(r,u),p.fragment.uniforms.add("camPos","vec3"),p.fragment.uniforms.add("localOrigin","vec3"),p.fragment.uniforms.add("opacity","float"),p.fragment.code.add(e`
      void main() {
        discardBySlice(vpos);
        float combinedOpacity = vcolor.a * opacity;
        gl_FragColor = vec4(combinedOpacity);
      }
    `)),0===u.output&&(p.include(r,u),p.include(m,u),p.include(c,u),u.receiveShadows&&p.include(n,u),p.include(g,u),p.fragment.uniforms.add("camPos","vec3").add("localOrigin","vec3").add("ambient","vec3").add("diffuse","vec3").add("specular","vec3").add("opacity","float"),p.fragment.include(i),p.fragment.code.add(e`
      void main() {
        discardBySlice(vpos);

        shadingParams.viewDirection = normalize(vpos - camPos);
        shadingParams.normalView = vnormal;
        vec3 normal = shadingNormal(shadingParams);
        float ssao = evaluateAmbientOcclusionInverse();

        float additionalAmbientScale = _oldHeuristicLighting(vpos + localOrigin);
        vec3 additionalLight = ssao * lightingMainIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;
    `),u.receiveShadows?p.fragment.code.add(e`
        float shadow = readShadowMap(vpos, linearDepth);
      `):1===u.viewingMode?p.fragment.code.add(e`
        float shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);
      `):p.fragment.code.add(e`
        float shadow = 0.0;
      `),p.fragment.code.add(e`
        vec3 albedo = vcolor.rgb * max(ambient, diffuse); // combine the old material parameters into a single one
        float combinedOpacity = vcolor.a * opacity;
        albedo += 0.25 * specular; // don't completely ignore specular for now

        vec3 shadedColor = evaluateSceneLighting(normal, albedo, shadow, 1.0 - ssao, additionalLight);
        gl_FragColor = vec4(shadedColor, combinedOpacity);
        gl_FragColor = highlightSlice(gl_FragColor, vpos);
        ${u.OITEnabled?"gl_FragColor = premultiplyAlpha(gl_FragColor);":""}
      }
    `)),1!==u.output&&3!==u.output||(p.include(a,{linearDepth:!0}),p.vertex.uniforms.add("nearFar","vec2"),p.varyings.add("depth","float"),p.vertex.code.add(e`
        void main() {
          vpos = calculateVPos();
          gl_Position = transformPositionWithDepth(proj, view, vpos, nearFar, depth);
        }
    `),p.include(r,u),p.include(l,u),p.fragment.uniforms.add("timeElapsed","float"),p.fragment.code.add(e`
        void main() {
          discardBySlice(vpos);
          outputDepth(depth);
        }
    `)),2===u.output&&(p.include(a,{linearDepth:!1}),p.include(s,u),p.vertex.uniforms.add("viewNormal","mat4"),p.varyings.add("vnormal","vec3"),p.vertex.code.add(e`
        void main(void) {
          vpos = calculateVPos();
          vnormal = normalize((viewNormal * vec4(localNormal(), 1.0)).xyz);
          gl_Position = transformPosition(proj, view, vpos);
        }
    `),p.include(r,u),p.fragment.uniforms.add("waterColor","vec4"),p.fragment.code.add(e`
        void main() {
          discardBySlice(vpos);
          vec3 normal = normalize(vnormal);
          if (gl_FrontFacing == false) normal = -normal;
          gl_FragColor = vec4(vec3(0.5) + 0.5 * normal, 1.0);
        }
    `)),4===u.output&&(p.include(a,{linearDepth:!1}),p.include(s,u),p.vertex.uniforms.add("viewNormal","mat4"),p.varyings.add("vnormal","vec3"),p.vertex.code.add(e`
        void main(void) {
          vpos = calculateVPos();
          gl_Position = transformPosition(proj, view, vpos);
        }
    `),p.include(r,u),p.include(d),p.fragment.code.add(e`
      void main() {
        discardBySlice(vpos);
        outputHighlight();
      }
    `)),p}var p=Object.freeze({__proto__:null,build:u});export{p as P,u as b};

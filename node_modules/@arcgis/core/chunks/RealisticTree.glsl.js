/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{glsl as e}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{Transform as o}from"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js";import{ShaderBuilder as r}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";import{Slice as a}from"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js";import{VisualVariables as i}from"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js";import{symbolAlphaCutoff as l,DiscardOrAdjustAlpha as t}from"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js";import{VerticalOffset as d}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js";import{VertexColor as n}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js";import{ReadShadowMap as s}from"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js";import{ForwardLinearDepth as c}from"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js";import{PhysicallyBasedRendering as g}from"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js";import{InstancedDoublePrecision as v}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js";import{TextureCoordinateAttribute as m}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js";import{PhysicallyBasedRenderingParameters as p}from"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js";import{Offset as u}from"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js";import{NormalAttribute as b}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js";import{PositionAttribute as f}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js";import{SymbolColor as h}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js";import{DefaultMaterialAuxiliaryPasses as w}from"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js";import{EvaluateAmbientOcclusion as x}from"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js";import{EvaluateSceneLighting as y}from"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js";import{MixExternalColor as C}from"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js";function L(L){const M=new r,j=M.vertex.code,O=M.fragment.code;return M.vertex.uniforms.add("proj","mat4").add("view","mat4").add("camPos","vec3").add("localOrigin","vec3"),M.include(f),M.varyings.add("vpos","vec3"),M.include(i,L),M.include(v,L),M.include(d,L),0!==L.output&&7!==L.output||(M.include(b,L),M.include(o,{linearDepth:!1}),L.offsetBackfaces&&M.include(u),L.instancedColor&&M.attributes.add("instanceColor","vec4"),M.varyings.add("vNormalWorld","vec3"),M.varyings.add("localvpos","vec3"),M.include(m,L),M.include(c,L),M.include(h,L),M.include(n,L),M.vertex.uniforms.add("externalColor","vec4"),M.varyings.add("vcolorExt","vec4"),j.add(e`
        void main(void) {
          forwardNormalizedVertexColor();
          vcolorExt = externalColor;
          ${L.instancedColor?"vcolorExt *= instanceColor;":""}
          vcolorExt *= vvColor();
          vcolorExt *= getSymbolColor();
          forwardColorMixMode();

          if (vcolorExt.a < ${e.float(l)}) {
            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
          }
          else {
            vpos = calculateVPos();
            localvpos = vpos - view[3].xyz;
            vpos = subtractOrigin(vpos);
            vNormalWorld = dpNormal(vvLocalNormal(normalModel()));
            vpos = addVerticalOffset(vpos, localOrigin);
            gl_Position = transformPosition(proj, view, vpos);
            ${L.offsetBackfaces?"gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, camPos);":""}
          }
          forwardLinearDepth();
          forwardTextureCoordinates();
        }
      `)),7===L.output&&(M.include(a,L),M.include(t,L),M.fragment.uniforms.add("camPos","vec3").add("localOrigin","vec3").add("opacity","float").add("layerOpacity","float"),M.fragment.uniforms.add("view","mat4"),L.hasColorTexture&&M.fragment.uniforms.add("tex","sampler2D"),M.fragment.include(C),O.add(e`
      void main() {
        discardBySlice(vpos);
        ${L.hasColorTexture?e`
        vec4 texColor = texture2D(tex, vuv0);
        ${L.textureAlphaPremultiplied?"texColor.rgb /= texColor.a;":""}
        discardOrAdjustAlpha(texColor);`:e`vec4 texColor = vec4(1.0);`}
        ${L.attributeColor?e`
        float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:e`
        float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));
        `}

        gl_FragColor = vec4(opacity_);
      }
    `)),0===L.output&&(M.include(a,L),M.include(y,L),M.include(x,L),M.include(t,L),L.receiveShadows&&M.include(s,L),M.fragment.uniforms.add("camPos","vec3").add("localOrigin","vec3").add("ambient","vec3").add("diffuse","vec3").add("opacity","float").add("layerOpacity","float"),M.fragment.uniforms.add("view","mat4"),L.hasColorTexture&&M.fragment.uniforms.add("tex","sampler2D"),M.include(p,L),M.include(g,L),M.fragment.include(C),O.add(e`
      void main() {
        discardBySlice(vpos);
        ${L.hasColorTexture?e`
        vec4 texColor = texture2D(tex, vuv0);
        ${L.textureAlphaPremultiplied?"texColor.rgb /= texColor.a;":""}
        discardOrAdjustAlpha(texColor);`:e`vec4 texColor = vec4(1.0);`}
        vec3 viewDirection = normalize(vpos - camPos);
        ${1===L.pbrMode?"applyPBRFactors();":""}
        float ssao = evaluateAmbientOcclusionInverse();
        ssao *= getBakedOcclusion();

        float additionalAmbientScale = _oldHeuristicLighting(vpos + localOrigin);
        vec3 additionalLight = ssao * lightingMainIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;
        ${L.receiveShadows?"float shadow = readShadowMap(vpos, linearDepth);":1===L.viewingMode?"float shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);":"float shadow = 0.0;"}
        vec3 matColor = max(ambient, diffuse);
        ${L.attributeColor?e`
        vec3 albedo_ = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));
        float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:e`
        vec3 albedo_ = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));
        float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));
        `}
        ${e`
        vec3 shadedNormal = normalize(vNormalWorld);
        albedo_ *= 1.2;
        vec3 viewForward = - vec3(view[0][2], view[1][2], view[2][2]);
        float alignmentLightView = clamp(dot(-viewForward, lightingMainDirection), 0.0, 1.0);
        float transmittance = 1.0 - clamp(dot(-viewForward, shadedNormal), 0.0, 1.0);
        float treeRadialFalloff = vColor.r;
        float backLightFactor = 0.5 * treeRadialFalloff * alignmentLightView * transmittance * (1.0 - shadow);
        additionalLight += backLightFactor * lightingMainIntensity;`}
        ${1===L.pbrMode||2===L.pbrMode?1===L.viewingMode?e`vec3 normalGround = normalize(vpos + localOrigin);`:e`vec3 normalGround = vec3(0.0, 0.0, 1.0);`:e``}
        ${1===L.pbrMode||2===L.pbrMode?e`
            float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * lightingMainIntensity[2];
            vec3 shadedColor = evaluateSceneLightingPBR(shadedNormal, albedo_, shadow, 1.0 - ssao, additionalLight, viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);`:"vec3 shadedColor = evaluateSceneLighting(shadedNormal, albedo_, shadow, 1.0 - ssao, additionalLight);"}
        gl_FragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);
        ${L.OITEnabled?"gl_FragColor = premultiplyAlpha(gl_FragColor);":""}
      }
    `)),M.include(w,L),M}var M=Object.freeze({__proto__:null,build:L});export{M as R,L as b};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import n from"./Point.js";import{fromJSON as t}from"./support/jsonUtils.js";import"../geometry.js";import{open as r}from"../core/workers/workers.js";function e(n){var t;return Array.isArray(n)?null==(t=n[0])?void 0:t.spatialReference:null==n?void 0:n.spatialReference}function i(n){return n?Array.isArray(n)?n.map(i):n.toJSON?n.toJSON():n:n}function a(n){return Array.isArray(n)?n.map((n=>t(n))):t(n)}let o;async function c(n,t){return(await async function(){return o||(o=r("geometryEngineWorker",{strategy:"distributed"})),o}()).invoke("executeGEOperation",{operation:n,parameters:i(t)})}function u(n){return c("extendedSpatialReferenceInfo",[n])}async function s(n,t){return a(await c("clip",[e(n),n,t]))}async function f(n,t){return a(await c("cut",[e(n),n,t]))}function l(n,t){return c("contains",[e(n),n,t])}function y(n,t){return c("crosses",[e(n),n,t])}function p(n,t,r){return c("distance",[e(n),n,t,r])}function w(n,t){return c("equals",[e(n),n,t])}function m(n,t){return c("intersects",[e(n),n,t])}function d(n,t){return c("touches",[e(n),n,t])}function g(n,t){return c("within",[e(n),n,t])}function A(n,t){return c("disjoint",[e(n),n,t])}function x(n,t){return c("overlaps",[e(n),n,t])}function S(n,t,r){return c("relate",[e(n),n,t,r])}function O(n){return c("isSimple",[e(n),n])}async function h(n){return a(await c("simplify",[e(n),n]))}async function v(n,t=!1){return a(await c("convexHull",[e(n),n,t]))}async function J(n,t){return a(await c("difference",[e(n),n,t]))}async function N(n,t){return a(await c("symmetricDifference",[e(n),n,t]))}async function R(n,t){return a(await c("intersect",[e(n),n,t]))}async function E(n,t=null){const r=function(n,t){let r;return Array.isArray(n)?r=n:(r=[],r.push(n),null!=t&&r.push(t)),r}(n,t);return a(await c("union",[e(r),r]))}async function j(n,t,r,i,o,u){return a(await c("offset",[e(n),n,t,r,i,o,u]))}async function k(n,t,r,i=!1){const o=[e(n),n,t,r,i];return a(await c("buffer",o))}async function I(n,t,r,i,o,u){const s=[e(n),n,t,r,i,o,u];return a(await c("geodesicBuffer",s))}async function V(t,r,i=!0){const a=await c("nearestCoordinate",[e(t),t,r,i]);return{...a,coordinate:n.fromJSON(a.coordinate)}}async function b(t,r){const i=await c("nearestVertex",[e(t),t,r]);return{...i,coordinate:n.fromJSON(i.coordinate)}}async function z(t,r,i,a){return(await c("nearestVertices",[e(t),t,r,i,a])).map((t=>({...t,coordinate:n.fromJSON(t.coordinate)})))}function D(n){return"xmin"in n?n.center:"x"in n?n:n.extent.center}async function H(n,t,r){var e;if(null==n)throw new Error("Illegal Argument Exception");const i=n.spatialReference;r=null!=(e=r)?e:D(n);const a=n.constructor.fromJSON(await c("rotate",[i,n,t,r]));return a.spatialReference=i,a}async function L(n,t){var r;if(null==n)throw new Error("Illegal Argument Exception");const e=n.spatialReference;t=null!=(r=t)?r:D(n);const i=n.constructor.fromJSON(await c("flipHorizontal",[e,n,t]));return i.spatialReference=e,i}async function q(n,t){var r;if(null==n)throw new Error("Illegal Argument Exception");const e=n.spatialReference;t=null!=(r=t)?r:D(n);const i=n.constructor.fromJSON(await c("flipVertical",[e,n,t]));return i.spatialReference=e,i}async function B(n,t,r,i){return a(await c("generalize",[e(n),n,t,r,i]))}async function C(n,t,r){return a(await c("densify",[e(n),n,t,r]))}async function G(n,t,r,i=0){return a(await c("geodesicDensify",[e(n),n,t,r,i]))}function P(n,t){return c("planarArea",[e(n),n,t])}function U(n,t){return c("planarLength",[e(n),n,t])}function W(n,t,r){return c("geodesicArea",[e(n),n,t,r])}function F(n,t,r){return c("geodesicLength",[e(n),n,t,r])}export{k as buffer,s as clip,l as contains,v as convexHull,y as crosses,f as cut,C as densify,J as difference,A as disjoint,p as distance,w as equals,u as extendedSpatialReferenceInfo,L as flipHorizontal,q as flipVertical,B as generalize,W as geodesicArea,I as geodesicBuffer,G as geodesicDensify,F as geodesicLength,R as intersect,m as intersects,O as isSimple,V as nearestCoordinate,b as nearestVertex,z as nearestVertices,j as offset,x as overlaps,P as planarArea,U as planarLength,S as relate,H as rotate,h as simplify,N as symmetricDifference,d as touches,E as union,g as within};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import t from"../geometry/Geometry.js";import s from"./ImmutableArray.js";import{i,a as e,b as r,t as o,c as n,d as a,e as u,f as l,g as f,h as c}from"../chunks/languageUtils.js";function b(t){let s=null;if(null===t);else if(e(t))s=n(t);else if(i(t))s=a(t);else if(r(t))s=u(t);else if(l(t))s=f(t);else if(c(t)){s=[];for(const i of t)s.push(b(i))}else{if(0===Object.keys(t).length)return null;const i=new h;i.immutable=!1;for(const s of Object.keys(t)){const e=t[s];void 0!==e&&i.setField(s,b(e))}i.immutable=!0,s=i}return s}class h{constructor(t){this.declaredClass="esri.arcade.Dictionary",this.attributes=null,this.plain=!1,this.immutable=!0,this.attributes=t instanceof h?t.attributes:null==t?{}:t}field(t){const s=t.toLowerCase(),i=this.attributes[t];if(void 0!==i)return i;for(const t in this.attributes)if(t.toLowerCase()===s)return this.attributes[t];throw new Error("Field not Found : "+t)}setField(t,s){if(this.immutable)throw new Error("Dictionary is Immutable");const i=t.toLowerCase();if(void 0===this.attributes[t]){for(const t in this.attributes)if(t.toLowerCase()===i)return void(this.attributes[t]=s);this.attributes[t]=s}else this.attributes[t]=s}hasField(t){const s=t.toLowerCase();if(void 0!==this.attributes[t])return!0;for(const t in this.attributes)if(t.toLowerCase()===s)return!0;return!1}keys(){let t=[];for(const s in this.attributes)t.push(s);return t=t.sort(),t}castToText(){let n="";for(const a in this.attributes){""!==n&&(n+=",");const u=this.attributes[a];null==u?n+=JSON.stringify(a)+":null":i(u)||e(u)||r(u)?n+=JSON.stringify(a)+":"+JSON.stringify(u):u instanceof t||u instanceof s||u instanceof Array?n+=JSON.stringify(a)+":"+o(u):u instanceof Date?n+=JSON.stringify(a)+":"+JSON.stringify(u):null!==u&&"object"==typeof u&&void 0!==u.castToText&&(n+=JSON.stringify(a)+":"+u.castToText())}return"{"+n+"}"}static convertObjectToArcadeDictionary(t){const s=new h;s.immutable=!1;for(const i in t){const e=t[i];void 0!==e&&s.setField(i.toString(),b(e))}return s.immutable=!0,s}}export default h;

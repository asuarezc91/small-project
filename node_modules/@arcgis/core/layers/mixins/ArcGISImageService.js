/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import"../../core/has.js";import{clone as t}from"../../core/lang.js";import{isNone as r,isSome as i}from"../../core/maybe.js";import s from"../../core/Logger.js";import{Integer as n,ensureNumber as a}from"../../core/accessorSupport/ensureType.js";import{property as o,ensureRange as l}from"../../core/accessorSupport/decorators/property.js";import{aliasOf as u}from"../../core/accessorSupport/decorators/aliasOf.js";import{strict as p}from"../../core/jsonMap.js";import{reader as c}from"../../core/accessorSupport/decorators/reader.js";import{subclass as d}from"../../core/accessorSupport/decorators/subclass.js";import{writer as m}from"../../core/accessorSupport/decorators/writer.js";import h from"../../core/Error.js";import{urlToObject as f}from"../../core/urlUtils.js";import"../../core/uuid.js";import"../../portal/support/resourceExtension.js";import{reject as y,when as g,all as R,create as v,resolve as x}from"../../core/promiseUtils.js";import b from"../../geometry/SpatialReference.js";import I from"../../geometry/Point.js";import S from"../../geometry/Extent.js";import w from"../../geometry/Polygon.js";import"../../geometry.js";import _ from"../../request.js";import O from"../../Graphic.js";import{opacityDrawingInfo as N,url as P}from"../support/commonProperties.js";import F from"../support/PixelBlock.js";import{rasterRendererTypes as D,websceneRasterRendererTypes as j,read as T}from"../../rasterRenderers.js";import J from"../support/Field.js";import C from"../support/FieldsIndex.js";import V from"../../tasks/support/FeatureSet.js";import M from"../../tasks/support/Query.js";import q from"../../tasks/QueryTask.js";import z from"../support/DimensionalDefinition.js";import A from"../support/RasterFunction.js";import{isSupportedRendererType as U}from"../support/imageryRendererUtils.js";import E from"../support/MosaicRule.js";import{ExportImageServiceParameters as H}from"../support/ExportImageServiceParameters.js";import Q from"../support/RasterInfo.js";import L from"../support/RasterJobHandler.js";import{decode as k,getFormat as B}from"../support/rasterFormats/RasterCodec.js";import{getSupportedRendererTypes as G,getDefaultBandCombination as W,createDefaultRenderer as X}from"../../renderers/support/rasterRendererHelper.js";import Y from"../../renderers/support/RasterSymbolizer.js";import{computeHistograms as K,computeStatisticsHistograms as $}from"../../rest/imageService.js";import Z from"../../tasks/ImageIdentifyTask.js";import ee from"../../tasks/support/ImageIdentifyParameters.js";const te=s.getLogger("esri.layers.mixins.ArcGISImageService"),re=p()({RSP_NearestNeighbor:"nearest",RSP_BilinearInterpolation:"bilinear",RSP_CubicConvolution:"cubic",RSP_Majority:"majority"}),ie=p()({esriNoDataMatchAny:"any",esriNoDataMatchAll:"all"}),se=p()({U1:"u1",U2:"u2",U4:"u4",U8:"u8",S8:"s8",U16:"u16",S16:"s16",U32:"u32",S32:"s32",F32:"f32",F64:"f64",C64:"c64",C128:"c128",UNKNOWN:"unknown"}),ne=new Set(["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"]),ae=l(a,{min:0,max:255});const oe=s=>{let a=class extends s{constructor(){super(...arguments),this._functionRasterInfos={},this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this._symbolizer=null,this._defaultServiceMosaicRule=null,this.rasterAttributeTableFieldPrefix="Raster.",this.adjustAspectRatio=null,this.bandCount=null,this.bandIds=void 0,this.capabilities=null,this.compressionQuality=void 0,this.compressionTolerance=.01,this.copyright=null,this.definitionExpression=null,this.exportImageServiceParameters=null,this.rasterInfo=null,this.fields=null,this.fullExtent=null,this.hasMultidimensions=!1,this.imageMaxHeight=4100,this.imageMaxWidth=4100,this.interpolation=void 0,this.minScale=0,this.maxScale=0,this.multidimensionalInfo=null,this.noData=null,this.noDataInterpretation=void 0,this.objectIdField=null,this.pixelSizeX=null,this.pixelSizeY=null,this.pixelFilter=null,this.raster=void 0,this.viewId=void 0,this.renderer=null,this.rasterAttributeTable=null,this.rasterFunctionInfos=null,this.serviceDataType=null,this.spatialReference=null,this.pixelType=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.url=null,this.version=null}initialize(){this._set("exportImageServiceParameters",new H({layer:this}))}readDefaultServiceMosaicRule(e,t){return E.fromJSON(t)}get rasterFunctionNamesIndex(){const e=new Map;return!this.rasterFunctionInfos||this.rasterFunctionInfos.length<1||this.rasterFunctionInfos.forEach((t=>{e.set(t.name.toLowerCase().replace(/ /gi,"_"),t.name)})),e}get queryTask(){return new q({url:this.url})}readBandIds(e,t){if(Array.isArray(e)&&e.length>0&&e.every((e=>"number"==typeof e)))return e}readCapabilities(e,t){return this._readCapabilities(t)}writeCompressionQuality(e,t,r){null!=e&&"lerc"!==this.format&&(t[r]=e)}writeCompressionTolerance(e,t,r){"lerc"===this.format&&null!=e&&(t[r]=e)}get fieldsIndex(){return this.fields?new C(this.fields):null}set format(e){e&&ne.has(e.toLowerCase())&&this._set("format",e.toLowerCase())}readFormat(e,t){return"esriImageServiceDataTypeVector-UV"===t.serviceDataType||"esriImageServiceDataTypeVector-MagDir"===t.serviceDataType||null!=this.pixelFilter?"lerc":"jpgpng"}readMinScale(e,t){return null!=t.minLOD&&null!=t.maxLOD?e:0}readMaxScale(e,t){return null!=t.minLOD&&null!=t.maxLOD?e:0}set mosaicRule(e){let t=e;t&&t.mosaicMethod&&(t=E.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}readMosaicRule(e,t){return E.fromJSON(e||t.mosaicRule||t)}writeMosaicRule(e,t,r){let i=this.mosaicRule;const s=this.definitionExpression;i?s&&s!==i.where&&(i=i.clone(),i.where=s):s&&(i=new E({where:s})),this._isValidCustomizedMosaicRule(i)&&(t[r]=i.toJSON())}writeNoData(e,t,r){null!=e&&"number"==typeof e&&(t[r]=ae(e))}readObjectIdField(e,t){if(!e){const r=t.fields.filter((e=>"esriFieldTypeOID"===e.type||"oid"===e.type));e=r&&r[0]&&r[0].name}return e}get parsedUrl(){return this.url?f(this.url):null}readRenderer(e,t,r){const i=t&&t.layerDefinition&&t.layerDefinition.drawingInfo&&t.layerDefinition.drawingInfo.renderer,s=T(i,r)||void 0;if(null!=s)return U(s)||te.warn("ArcGISImageService","Imagery layer doesn't support given renderer type."),s}get rasterFields(){const e=this.rasterAttributeTableFieldPrefix||"Raster.",r=new J({name:"Raster.ItemPixelValue",alias:"Item Pixel Value",domain:null,editable:!1,length:50,type:"string"}),i=new J({name:"Raster.ServicePixelValue",alias:"Service Pixel Value",domain:null,editable:!1,length:50,type:"string"}),s=new J({name:"Raster.ServicePixelValue.Raw",alias:"Raw Service Pixel Value",domain:null,editable:!1,length:50,type:"string"});let n=this.fields?t(this.fields):[];n.push(i),this.capabilities.operations.supportsQuery&&this.fields&&this.fields.length>0&&n.push(r),this.version>=10.4&&this.rasterFunctionInfos&&this.rasterFunctionInfos.some((e=>"none"===e.name.toLowerCase()))&&n.push(s),this.rasterFunctionInfos&&this.rasterFunctionInfos.filter((e=>"none"!==e.name.toLowerCase())).forEach((e=>{n.push(new J({name:"Raster.ServicePixelValue."+e.name,alias:e.name,domain:null,editable:!1,length:50,type:"string"}))})),null==this.pixelFilter||"esriImageServiceDataTypeVector-UV"!==this.serviceDataType&&"esriImageServiceDataTypeVector-MagDir"!==this.serviceDataType||(n.push(new J({name:"Raster.Magnitude",alias:"Magnitude",domain:null,editable:!1,type:"double"})),n.push(new J({name:"Raster.Direction",alias:"Direction",domain:null,editable:!1,type:"double"})));const a=this.rasterInfo.attributeTable&&this.rasterInfo.attributeTable.fields||null;if(a&&a.length>0){const r=a.filter((e=>"esriFieldTypeOID"!==e.type&&"value"!==e.name.toLowerCase())).map((r=>{const i=t(r);return i.name=e+r.name,i}));n=n.concat(r)}return n}set renderingRule(e){let t=e;t&&t.rasterFunction&&(t=A.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("renderingRule",t)}readRenderingRule(e,t){const r=t.rasterFunctionInfos;return t.renderingRule||r&&r.length&&"None"!==r[0].name?A.fromJSON(t.renderingRule||{rasterFunctionInfos:t.rasterFunctionInfos}):null}writeRenderingRule(e,t,r){this._isRFTJson(e)||(t[r]=e.toJSON())}readSpatialReference(e,t){const r=e||t.extent.spatialReference;return r?b.fromJSON(r):null}readPixelType(e){return se.fromJSON(e)||e}writePixelType(e,t,i){(r(this.serviceRasterInfo)||this.pixelType!==this.serviceRasterInfo.pixelType)&&(t[i]=se.toJSON(e))}readVersion(e,t){let r=t.currentVersion;return r||(r=t.hasOwnProperty("fields")||t.hasOwnProperty("timeInfo")?10:9.3),r}applyFilter(e){let t=e;return this.pixelFilter&&(t=this._clonePixelData(e),this.pixelFilter(t)),t}async applyRenderer(e,t){let r=e;if(!this._isPicture()&&this.renderer&&this._symbolizer&&!this.pixelFilter){const i=JSON.stringify(this._cachedRendererJson)!==JSON.stringify(this.renderer.toJSON()),s=this._rasterJobHandler.instance,{bandIds:n}=this;if(s){i&&(this._symbolizer.bind(),await s.updateSymbolizer(this._symbolizer,t),this._cachedRendererJson=this.renderer.toJSON());const a=await s.symbolize({bandIds:n,...e},t);r={extent:e.extent,pixelBlock:a}}else r={extent:e.extent,pixelBlock:this._symbolizer.symbolize({bandIds:n,...e})}}return r}destroy(){this._shutdownJobHandler()}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}async computeHistograms(e,t){const r=null==t?void 0:t.signal;if(await this._fetchCapabilities(r),!this.capabilities.operations.supportsComputeHistograms)throw new h("imagery-layer:compute-histograms","this operation is not supported on the input image service");e=e.clone();const{raster:i,mosaicRule:s,renderingRule:n}=this;return n&&null==e.renderingRule&&(e.renderingRule=n),s&&null==e.mosaicRule&&(e.mosaicRule=s),i&&null==e.raster&&(e.raster=i),K(this.url,e,{signal:r})}async computeStatisticsHistograms(e,t){const r=null==t?void 0:t.signal;if(await this._fetchCapabilities(r),!this.capabilities.operations.supportsComputeStatisticsHistograms)throw new h("imagery-layer:compute-statistics-histograms","this operation is not supported on the input image service");e=e.clone();const{raster:i,mosaicRule:s,renderingRule:n}=this;return n&&null==e.renderingRule&&(e.renderingRule=n),s&&null==e.mosaicRule&&(e.mosaicRule=s),i&&null==e.raster&&(e.raster=i),$(this.url,e,{signal:r})}fetchImage(e,t,r,i={}){if(null==e||null==t||null==r)return y(new h("imagery-layer:fetch-image","Insufficient parameters for requesting an image. A valid extent, width and height values are required."));const s=this.renderer||this._symbolizer?this.generateRasterInfo(this.renderingRule,{signal:i.signal}):null;return g(s).then((s=>{s&&(this.rasterInfo=s);const n={imageServiceParameters:this.getExportImageServiceParameters(e,t,r,i.timeExtent),imageProps:{extent:e,width:t,height:r,format:this.format},requestAsImageElement:i.requestAsImageElement&&!this.pixelFilter||!1,signal:i.signal};return this._requestArrayBuffer(n)}))}fetchKeyProperties(e){const t=e&&e.renderingRule&&e.renderingRule.toJSON();return _(this.parsedUrl.path+"/keyProperties",{query:this._getQueryParams({renderingRule:this.version>=10.3&&t?JSON.stringify(t):null})}).then((e=>e.data))}fetchRasterAttributeTable(e){const t=e&&e.renderingRule&&e.renderingRule.toJSON();return this.version<10.1?y(new h("#fetchRasterAttributeTable()","Failed to get rasterAttributeTable")):_(this.parsedUrl.path+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.3&&t?JSON.stringify(t):null})}).then((e=>V.fromJSON(e.data)))}async getCatalogItemRasterInfo(e,t){const r=_(this.parsedUrl.path+"/"+e+"/info",{query:this._getQueryParams(),...t}).then((e=>e.data)),i=_(this.parsedUrl.path+"/"+e+"/info/keyProperties",{query:this._getQueryParams(),...t}).then((e=>e.data)).catch((()=>{})),s=await R([r,i]);if(!s[0])return;const n=S.fromJSON(s[0].extent),a=s[0].statistics?s[0].statistics.map((e=>({min:e[0],max:e[1],avg:e[2],stddev:e[3]}))):null;return new Q({bandCount:s[0].bandCount,extent:n,spatialReference:n.sr,pixelSize:new I({x:s[0].pixelSizeX,y:s[0].pixelSizeY,spatialReference:n.sr}),pixelType:s[0].pixelType.toLowerCase(),statistics:a,histograms:s[0].histograms,keyProperties:s[1]||{}})}async getCatalogItemICSInfo(e,t){const{data:r}=await _(this.parsedUrl.path+"/"+e+"/info/ics",{query:this._getQueryParams(),...t}),i=r&&r.ics;if(!i)return;let s=null;try{s=(await _(this.parsedUrl.path+"/"+e+"/info",{query:this._getQueryParams(),...t})).data.extent}catch{}if(!s||!s.spatialReference)return{ics:i,icsToPixelTransform:null,icsExtent:null,northDirection:null};const n=this.version>=10.7?_(this.parsedUrl.path+"/"+e+"/info/icstopixel",{query:this._getQueryParams(),...t}).then((e=>e.data)).catch((()=>({}))):{},a=s.spatialReference,o={geometries:JSON.stringify({geometryType:"esriGeometryEnvelope",geometries:[s]}),inSR:a.wkid||JSON.stringify(a),outSR:"0:"+e},l=_(this.parsedUrl.path+"/project",{query:this._getQueryParams(o),...t}).then((e=>e.data)).catch((()=>({}))),u=(s.xmin+s.xmax)/2,p=(s.ymax-s.ymin)/6,c=s.ymin+p,d=[];for(let e=0;e<5;e++)d.push({x:u,y:c+p*e});const m={geometries:JSON.stringify({geometryType:"esriGeometryPoint",geometries:d}),inSR:a.wkid||JSON.stringify(a),outSR:"0:"+e},h=_(this.parsedUrl.path+"/project",{query:this._getQueryParams(m),...t}).then((e=>e.data)).catch((()=>({}))),f=await R([n,l,h]);let y=f[0].ipxf;if(null==y){var g,v,x;const e=null==(g=i.geodataXform)?void 0:g.xf_0;"topup"===(null==e||null==(v=e.name)?void 0:v.toLowerCase())&&6===(null==e||null==(x=e.coefficients)?void 0:x.length)&&(y={affine:{name:"ics [sensor: Frame] to pixel (column, row) transformation",coefficients:e.coefficients,cellsizeRatio:0,type:"GeometricXform"}})}const I=S.fromJSON(f[1]&&f[1].geometries&&f[1].geometries[0]);I&&(I.spatialReference=new b({wkid:0,imageCoordinateSystem:i}));const w=f[2].geometries?f[2].geometries.filter((e=>null!=e&&null!=e.x&&null!=e.y&&"NaN"!==e.x&&"NaN"!==e.y)):[],O=w.length;if(O<3)return{ics:i,icsToPixelTransform:y,icsExtent:I,northDirection:null};let N=0,P=0,F=0,D=0;for(let e=0;e<O;e++)N+=w[e].x,P+=w[e].y,F+=w[e].x*w[e].x,D+=w[e].x*w[e].y;const j=(O*D-N*P)/(O*F-N*N);let T=0;const J=w[4].x>w[0].x,C=w[4].y>w[0].y;return j===1/0?T=C?90:270:0===j?T=J?0:180:j>0?T=J?180*Math.atan(j)/Math.PI:180*Math.atan(j)/Math.PI+180:j<0&&(T=C?180+180*Math.atan(j)/Math.PI:360+180*Math.atan(j)/Math.PI),{ics:i,icsToPixelTransform:y,icsExtent:I,northDirection:T}}async generateRasterInfo(e,t){if((!e||"none"===e.functionName.toLowerCase())&&i(this.serviceRasterInfo))return this.serviceRasterInfo;const r=function(e){if(!e)return null;const t=JSON.stringify(e).match(/"rasterFunction":"(.*?")/gi),r=null==t?void 0:t.map((e=>e.replace('"rasterFunction":"',"").replace('"',"")));return r?r.join("/"):null}(e);if(this._functionRasterInfos[r])return this._functionRasterInfos[r];const s=this._generateRasterInfo(e,t);this._functionRasterInfos[r]=s;try{return await s}catch{return this._functionRasterInfos[r]=null,null}}getExportImageServiceParameters(e,t,r,s){const n=(e=e.clone().shiftCentralMeridian()).spatialReference;let a;if(n.imageCoordinateSystem){const{id:e,referenceServiceName:t}=n.imageCoordinateSystem;a=null!=e?t?this.parsedUrl.path.toLowerCase().indexOf("/"+t.toLowerCase()+"/")>-1?"0:"+e:JSON.stringify({icsid:e,icsns:t}):"0:"+e:JSON.stringify({ics:n.imageCoordinateSystem})}else a=n.wkid||JSON.stringify(n.toJSON());i(this.serviceRasterInfo)&&this.pixelType!==this.serviceRasterInfo.pixelType&&(this.exportImageServiceParameters.pixelType=this.pixelType);const o=this.exportImageServiceParameters.toJSON(),{bandIds:l,noData:u,mosaicRule:p,renderingRule:c}=o;l instanceof Array&&l.length>0&&(o.bandIds=l.join(",")),u instanceof Array&&u.length>0&&(o.noData=u.join(","));const d=this.timeInfo;p&&p.multidimensionalDefinition&&s&&d&&d.startField&&(p.multidimensionalDefinition=p.multidimensionalDefinition.filter((e=>e.dimensionName!==d.startField))),o.mosaicRule=p&&JSON.stringify(p),o.renderingRule=c&&JSON.stringify(c);const m={};if(s){const{start:e,end:t}=s.toJSON();e&&t&&e===t?m.time=""+e:null==e&&null==t||(m.time=`${null==e?"null":e},${null==t?"null":t}`)}return{bbox:e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:a,imageSR:a,size:t+","+r,...o,...m}}async identify(e,t){if(await this._fetchCapabilities(null==t?void 0:t.signal),!this.capabilities.operations.supportsIdentify)throw new h("imagery-layer:query-rasters","query operation is not supported on the input image service");e=e.clone();const{raster:r,mosaicRule:i,renderingRule:s}=this;s&&null==e.renderingRule&&(e.renderingRule=s),i&&null==e.mosaicRule&&(e.mosaicRule=i),r&&null==e.raster&&(e.raster=r);return new Z({url:this.url}).execute(e,t)}async queryRasters(e,t){if(await this._fetchCapabilities(null==t?void 0:t.signal),!this.capabilities.operations.supportsQuery)throw new h("imagery-layer:query-rasters","query operation is not supported on the input image service");return this.queryTask.execute(e,t)}queryVisibleRasters(e,t){if(!e)return y(new h("imagery-layer: query-visible-rasters","missing query parameter"));const{pixelSize:s,returnDomainValues:n,returnTopmostRaster:a,showNoDataRecords:o}=t||{pixelSize:null,returnDomainValues:!1,returnTopmostRaster:!1,showNoDataRecords:!1};let l=!1,u=null,p=null;const c="raster.servicepixelvalue",d=this.rasterFunctionNamesIndex;if(i(e.outFields)&&(l=e.outFields.some((e=>-1===e.toLowerCase().indexOf(c))),this.version>=10.4)){const t=e.outFields.filter((e=>e.toLowerCase().indexOf(c)>-1&&e.length>c.length)).map((e=>{const t=e.slice(c.length+1);return[this._updateRenderingRulesFunctionName(t,d),t]}));u=t.map((e=>new A({functionName:e[0]}))),p=t.map((e=>e[1])),0===u.length?this.renderingRule?(u.push(this.renderingRule),p.push(this.renderingRule.functionName)):u=null:this.renderingRule&&!u.some((e=>e.functionName===this.renderingRule.functionName))&&(u.push(this.renderingRule),p.push(this.renderingRule.functionName))}const m=r(e.outSpatialReference)||e.outSpatialReference.equals(this.spatialReference),f=this._getQueryParams({geometry:e.geometry,timeExtent:e.timeExtent,mosaicRule:this.exportImageServiceParameters.mosaicRule,renderingRule:this.version<10.4?this.renderingRule:null,renderingRules:u,pixelSize:s,returnCatalogItems:l,returnGeometry:m,maxItemCount:a?1:null});delete f.f;const g=new ee(f),R=new Z({url:this.url}),x=this.generateRasterInfo(this.renderingRule);return v((t=>{x.then((()=>{R.execute(g).then((r=>{const i=e.outFields;if(l&&!m&&r.catalogItems&&r.catalogItems.features&&r.catalogItems.features.length>0){const s=this.objectIdField||"ObjectId",a=r.catalogItems.features,l=a.map((e=>e.attributes&&e.attributes[s])),u=new M({objectIds:l,returnGeometry:!0,outSpatialReference:e.outSpatialReference,outFields:[s]});return this.queryRasters(u).then((l=>{l&&l.features&&l.features.length>0&&l.features.forEach((t=>{a.forEach((r=>{r.attributes[s]===t.attributes[s]&&(r.geometry=new w(t.geometry),r.geometry.spatialReference=e.outSpatialReference)}))})),t(this._processVisibleRastersResponse(r,{returnDomainValues:n,templateRRFunctionNames:p,showNoDataRecords:o,templateFields:i}))})).catch((()=>{throw new h("imagery-layer:query-visible-rasters","encountered error when querying visible rasters geometry")}))}t(this._processVisibleRastersResponse(r,{returnDomainValues:n,templateRRFunctionNames:p,showNoDataRecords:o,templateFields:i}))})).catch((()=>{throw new h("imagery-layer:query-visible-rasters","encountered error when querying visible rasters")}))}))}))}async fetchVariableStatisticsHistograms(e,t){const r=_(this.parsedUrl.path+"/statistics",{query:this._getQueryParams({variable:e}),signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.statistics})),i=_(this.parsedUrl.path+"/histograms",{query:this._getQueryParams({variable:e}),signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),s=await R([r,i]);return s[0]&&s[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:s[0]||null,histograms:s[1]||null}}async _fetchService(e){await this._fetchServiceInfo(e),i(this.serviceRasterInfo)&&!this.rasterInfo&&(this.rasterInfo=this.serviceRasterInfo);const t=this.sourceJSON,r=i(this.serviceRasterInfo)?x(this.serviceRasterInfo):this._fetchAuxiliaryRasterInfo({serviceInfo:t,signal:e}).then((e=>(this._set("serviceRasterInfo",e),e))),s=this.renderingRule&&"none"!==this.renderingRule.functionName.toLowerCase()?this.generateRasterInfo(this.renderingRule,{signal:e}):null;return R([r,s]).then((e=>{e[1]?this._set("rasterInfo",e[1]):this._set("rasterInfo",e[0]),this.renderer&&G(this.rasterInfo).indexOf(this.renderer.type)<0&&(this.renderer=null,te.warn("ArcGISImageService","Switching to the default renderer. Renderer applied is not valid for this Imagery Layer")),this._configDefaultRenderer(),this.watch("renderer",(()=>this._configDefaultRenderer())),this.watch("renderingRule",(e=>{(this.renderer||this._symbolizer||this.popupEnabled&&this.popupTemplate)&&this.generateRasterInfo(e).then((e=>{e&&(this.rasterInfo=e)}))}));const t=i(this.serviceRasterInfo)&&this.serviceRasterInfo.multidimensionalInfo;t&&this._updateMultidimensionalDefinition(t)}))}async _initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new L;this._rasterJobHandler.connectionPromise=e.initialize().then((()=>{this._rasterJobHandler.instance=e}),(()=>null)),await this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0}async _fetchCapabilities(e){return this.capabilities||await this._fetchServiceInfo(e),this.capabilities}async _fetchServiceInfo(e){var t;let r=this.sourceJSON;if(!r){const{data:t,ssl:i}=await _(this.parsedUrl.path,{query:this._getQueryParams(),signal:e});r=t,this.sourceJSON=r,i&&(this.url=this.url.replace(/^http:/i,"https:"))}if((null==(t=r.capabilities)?void 0:t.toLowerCase().split(",").map((e=>e.trim())).indexOf("tilesonly"))>-1)throw new h("imagery-layer:fetch-service-info","use ImageryTileLayer to open tiles-only image services");this.read(r,{origin:"service",url:this.parsedUrl})}_isPicture(){return!this.format||this.format.indexOf("jpg")>-1||this.format.indexOf("png")>-1}_configDefaultRenderer(){if(!this._isPicture()&&!this.pixelFilter){if(!this.bandIds&&this.rasterInfo.bandCount>=3){const e=W(this.rasterInfo);!e||3===this.rasterInfo.bandCount&&0===e[0]&&1===e[1]&&2===e[2]||(this.bandIds=e)}var e,t;if(!this.renderer)this.renderer=X(this.rasterInfo,{bandIds:this.bandIds,variableName:this.renderingRule?null:null==(e=this.mosaicRule)||null==(t=e.multidimensionalDefinition)?void 0:t[0].variableName});this._symbolizer?(this._symbolizer.rendererJSON=this.renderer.toJSON(),this._symbolizer.rasterInfo=this.rasterInfo):this._symbolizer=new Y({rendererJSON:this.renderer.toJSON(),rasterInfo:this.rasterInfo}),this._symbolizer.bind()||(this._symbolizer=null)}}_clonePixelData(e){return null==e?e:{extent:e.extent&&e.extent.clone(),pixelBlock:e.pixelBlock&&e.pixelBlock.clone()}}_getQueryParams(e){const{raster:t,viewId:r}=this;return{raster:t,viewId:r,f:"json",...e}}_decodePixelBlock(e,t,r){return this._rasterJobHandler.instance?this._rasterJobHandler.instance.decode({data:e,options:t}):k(e,t,r)}async _fetchMultidimensionalInfo(e){var t;const r=await _(this.parsedUrl.path+"/multidimensionalInfo",{query:this._getQueryParams(),signal:e}).then((e=>{var t;return null==(t=e.data)?void 0:t.multidimensionalInfo}));return null!=(t=r.variables)&&t.length&&r.variables.forEach((e=>{var t;null!=(t=e.statistics)&&t.length&&e.statistics.forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation}))})),r}_fetchAuxiliaryRasterInfo(e){const t=e&&e.serviceInfo;if(!t)return y(new h("imagery-layer:fetch-metadata","valid serviceInfo is required"));const r=e.renderingRule?JSON.stringify(e.renderingRule.toJSON()):null,i=e.signal,s=!!(t.hasRasterAttributeTable&&this.version>=10.1)&&_(this.parsedUrl.path+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.1?r:null}),signal:i}).then((e=>V.fromJSON(e.data))).catch((()=>null)),n=!!(t.hasColormap&&this.version>=10.1)&&_(this.parsedUrl.path+"/colormap",{query:this._getQueryParams({renderingRule:this.version>=10.6?r:null}),signal:i}).then((e=>{var t;return null==(t=e.data)?void 0:t.colormap})),a=!!(t.hasHistograms&&this.version>=10.1)&&_(this.parsedUrl.path+"/histograms",{query:this._getQueryParams({renderingRule:this.version>=10.1?r:null}),signal:i}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),o=this.version>=10.3&&_(this.parsedUrl.path+"/keyProperties",{query:this._getQueryParams({renderingRule:r}),signal:i}).then((e=>e.data)).catch((()=>{})),l=!!(t.hasMultidimensions&&this.version>=10.3)&&this._fetchMultidimensionalInfo();return R([s,n,a,o,l]).then((e=>{let r=null;if(t.minValues&&t.minValues.length===t.bandCount){r=[];for(let e=0;e<t.minValues.length;e++)r.push({min:t.minValues[e],max:t.maxValues[e],avg:t.meanValues[e],stddev:t.stdvValues[e]})}const i=Math.ceil((t.extent.xmax-t.extent.xmin)/t.pixelSizeX-.1),s=Math.ceil((t.extent.ymax-t.extent.ymin)/t.pixelSizeY-.1),n=b.fromJSON(t.spatialReference||t.extent.spatialReference);return new Q({width:i,height:s,bandCount:t.bandCount,extent:S.fromJSON(t.extent),spatialReference:n,pixelSize:new I({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:n}),pixelType:t.pixelType.toLowerCase(),statistics:r,attributeTable:e[0]||null,colormap:e[1]||null,histograms:e[2]||null,keyProperties:e[3]||{},multidimensionalInfo:e[4]||null})}))}_requestArrayBuffer(e){const{imageProps:t,requestAsImageElement:r,signal:i}=e;if(r&&!this.pixelFilter&&t.format&&t.format.indexOf("png")>-1)return _(this.parsedUrl.path+"/exportImage",{responseType:"image",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:i}).then((e=>({imageElement:e.data,params:t})));const s=this._initJobHandler(),n=_(this.parsedUrl.path+"/exportImage",{responseType:"array-buffer",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:i});return R([n,s]).then((e=>{const r=e[0].data,s=t.format||"jpgpng";let n=s;if("bsq"!==n&&"bip"!==n&&(n=B(r)),!n){throw new h("imagery-layer:fetch-image","unsupported format signature "+String.fromCharCode.apply(null,new Uint8Array(r)))}const a="gif"===s||"bmp"===s||s.indexOf("png")>-1&&("png"===n||"jpg"===n),o={signal:i};return a?k(r,{useCanvas:!0,...t},o).then((e=>({pixelData:{pixelBlock:e,extent:t.extent},params:t}))):this._decodePixelBlock(r,{width:t.width,height:t.height,planes:null,pixelType:null,noDataValue:null,format:s},o).then((e=>({pixelData:{pixelBlock:e,extent:t.extent},params:t})))}))}async _generateRasterInfo(e,t){const{data:r}=await _(this.parsedUrl.path,{query:this._getQueryParams({renderingRule:e}),...t});return await this._fetchAuxiliaryRasterInfo({serviceInfo:r,renderingRule:e,...t})}_isValidCustomizedMosaicRule(e){return e&&JSON.stringify(e.toJSON())!==JSON.stringify(this._defaultServiceMosaicRule&&this._defaultServiceMosaicRule.toJSON())}_updateMultidimensionalDefinition(e){if(this._isValidCustomizedMosaicRule(this.mosaicRule))return;const t=e.variables[0].dimensions,r=[];for(const e in t)if(t.hasOwnProperty(e)){const i=t[e],s=i.extent;let n=!0,a=[s[0]];i.hasRanges&&!0===i.hasRanges?(n=!1,a=[i.values[0]]):"stdz"===i.name.toLowerCase()&&Math.abs(s[1])<=Math.abs(s[0])&&(a=[s[1]]),r.push(new z({variableName:"",dimensionName:t[e].name,isSlice:n,values:a}))}if(r.length>0){this.mosaicRule=this.mosaicRule||new E;const e=this.mosaicRule.multidimensionalDefinition;(!e||e&&e.length<=0)&&(this.mosaicRule.multidimensionalDefinition=r)}}_formatAttributeValue(e,t){if("string"==typeof e){const r=this.popupTemplate&&this.popupTemplate.fieldInfos,i=this._getFieldInfo(r,t),s=i&&i.format;if(s){let t,r;return e.trim().indexOf(",")>-1?(t=",",r=t+" ",this._formatDelimitedString(e,t,r,s)):e.trim().indexOf(" ")>-1?(t=r=" ",this._formatDelimitedString(e,t,r,s)):this._formatNumberFromString(e,s)}}return e}_getFieldInfo(e,t){if(!e||!e.length||!t)return;const r=t.toLowerCase();let i;return e.some((e=>!(!e.fieldName||e.fieldName.toLowerCase()!==r&&e.fieldName.toLowerCase()!==r.replace(/ /g,"_"))&&(i=e,!0))),i}_formatDelimitedString(e,t,r,i){return e&&t&&r&&i?e.trim().split(t).map((e=>this._formatNumberFromString(e,i))).join(r):e}_formatNumberFromString(e,t){if(!e||!t)return e;const r=Number(e);return isNaN(r)?e:t.format(r)}_processVisibleRastersResponse(e,t){t=t||{};const r=e.value,{templateRRFunctionNames:s,showNoDataRecords:n,returnDomainValues:a,templateFields:o}=t,l=e.processedValues;let u=e.catalogItems&&e.catalogItems.features,p=e.properties&&e.properties.Values&&e.properties.Values.map((e=>e.replace(/ /gi,", ")))||[];const c=this.objectIdField||"ObjectId",d="string"==typeof r&&r.toLowerCase().indexOf("nodata")>-1,m=[];if(r&&!u&&!d){const e={};e[c]=0;p=[r],u=[new O(this.fullExtent,null,e)]}if(!u)return[];let h,f,y;this._updateResponseFieldNames(u,o);for(let e=0;e<u.length;e++){if(h=u[e],null!=r&&!d){if(f=p[e],y=this.renderingRule&&l&&l.length>0&&s&&s.length>0&&s.indexOf(this.renderingRule.functionName)>-1?l[s.indexOf(this.renderingRule.functionName)]:r,"nodata"===f.toLowerCase()&&!n)continue;const t="Raster.ItemPixelValue",a="Raster.ServicePixelValue";h.attributes[t]=this._formatAttributeValue(f,t),h.attributes[a]=this._formatAttributeValue(y,a),this._updateFeatureWithMagDirValues(h,f);const o=this.fields&&this.fields.length>0;let u=this.renderingRule&&i(this.serviceRasterInfo)&&this.serviceRasterInfo.attributeTable?o?f:r:y;this.renderingRule||(u=o?f:r),this._updateFeatureWithRasterAttributeTableValues(h,u)}if(h.sourceLayer=this,a&&this._updateFeatureWithDomainValues(h),s&&l&&s.length===l.length)for(let e=0;e<s.length;e++){const t="Raster.ServicePixelValue."+s[e];h.attributes[t]=this._formatAttributeValue(l[e],t)}m.push(u[e])}return m}_updateFeatureWithRasterAttributeTableValues(e,t){const r=this.rasterInfo&&this.rasterInfo.attributeTable||i(this.serviceRasterInfo)&&this.serviceRasterInfo.attributeTable,s=r&&r.features;if(!s)return;const n=r.fields,a=n.map((e=>e.name)).filter((e=>"value"===e.toLowerCase())),o=a&&a[0];if(!o)return;const l=s.filter((e=>e.attributes[o]===(null!=t?parseInt(t,10):null)));l&&l[0]&&n.forEach((t=>{const r=this.rasterAttributeTableFieldPrefix+t.name;e.attributes[r]=this._formatAttributeValue(l[0].attributes[t.name],r)}))}_updateFeatureWithMagDirValues(e,t){if(!this.pixelFilter||"esriImageServiceDataTypeVector-UV"!==this.serviceDataType&&"esriImageServiceDataTypeVector-MagDir"!==this.serviceDataType)return;const r=t.replace(" ",",").split(",").map((e=>parseFloat(e))),i=r.map((e=>[e])),s=r.map((e=>({minValue:e,maxValue:e,noDataValue:null}))),n=new F({height:1,width:1,pixelType:"f32",pixels:i,statistics:s});this.pixelFilter({pixelBlock:n,extent:new S(0,0,0,0,this.spatialReference)}),e.attributes["Raster.Magnitude"]=n.pixels[0][0],e.attributes["Raster.Direction"]=n.pixels[1][0]}_updateFeatureWithDomainValues(e){const t=this.fields&&this.fields.filter((e=>e.domain&&"coded-value"===e.domain.type));null!=t&&t.forEach((t=>{const r=e.attributes[t.name];if(null!=r){const i=t.domain.codedValues.filter((e=>e.code===r))[0];i&&(e.attributes[t.name]=i.name)}}))}_updateResponseFieldNames(e,t){if(!t||t.length<1)return;const r=this.fieldsIndex;r&&e.forEach((e=>{if(e&&e.attributes)for(const i of t)if(r.has(i)){const t=r.get(i).name;t!==i&&(e.attributes[i]=e.attributes[t],delete e.attributes[t])}}))}_updateRenderingRulesFunctionName(e,t){if(!e||e.length<1)return;if("Raw"===e)return e.replace("Raw","None");const r=e.toLowerCase().replace(/ /gi,"_");return t.has(r)?t.get(r):e}_isRFTJson(e){return e.name&&e.arguments&&e.function&&e.hasOwnProperty("functionType")}_readCapabilities(e){const t=e.capabilities?e.capabilities.toLowerCase().split(",").map((e=>e.trim())):["image","catalog"],{currentVersion:r,advancedQueryCapabilities:i,maxRecordCount:s}=e,n=t.indexOf("image")>-1,a="esriImageServiceDataTypeElevation"===e.serviceDataType,o=!!(e.spatialReference||e.extent&&e.extent.spatialReference);return{operations:{supportsComputeHistograms:n,supportsExportImage:n,supportsIdentify:n,supportsMeasure:t.indexOf("mensuration")>-1&&o,supportsDownload:t.indexOf("download")>-1,supportsQuery:t.indexOf("catalog")>-1&&e.fields&&e.fields.length>0,supportsGetSamples:r>=10.2&&n,supportsProject:r>=10.3&&n,supportsComputeStatisticsHistograms:r>=10.4&&n,supportsQueryBoundary:r>=10.6&&n,supportsCalculateVolume:r>=10.7&&a,supportsComputePixelLocation:r>=10.7&&t.indexOf("catalog")>-1},query:{supportsStatistics:!(!i||!i.supportsStatistics),supportsOrderBy:!(!i||!i.supportsOrderBy),supportsDistinct:!(!i||!i.supportsDistinct),supportsPagination:!(!i||!i.supportsPagination),supportsStandardizedQueriesOnly:!(!i||!i.useStandardizedQueries),maxRecordCount:s}}}};return e([o()],a.prototype,"_functionRasterInfos",void 0),e([o()],a.prototype,"_rasterJobHandler",void 0),e([o()],a.prototype,"_symbolizer",void 0),e([o()],a.prototype,"_defaultServiceMosaicRule",void 0),e([c("_defaultServiceMosaicRule",["defaultMosaicMethod"])],a.prototype,"readDefaultServiceMosaicRule",null),e([o()],a.prototype,"_cachedRendererJson",void 0),e([o()],a.prototype,"rasterAttributeTableFieldPrefix",void 0),e([o({readOnly:!0,dependsOn:["rasterFunctionInfos"]})],a.prototype,"rasterFunctionNamesIndex",null),e([o({readOnly:!0,dependsOn:["url"]})],a.prototype,"queryTask",null),e([o()],a.prototype,"adjustAspectRatio",void 0),e([o({readOnly:!0}),u("serviceRasterInfo.bandCount")],a.prototype,"bandCount",void 0),e([o({type:[n],json:{write:!0}})],a.prototype,"bandIds",void 0),e([c("bandIds")],a.prototype,"readBandIds",null),e([o({readOnly:!0,json:{read:!1}})],a.prototype,"capabilities",void 0),e([c("service","capabilities",["capabilities","currentVersion","serviceDataType"])],a.prototype,"readCapabilities",null),e([o({type:Number})],a.prototype,"compressionQuality",void 0),e([m("compressionQuality")],a.prototype,"writeCompressionQuality",null),e([o({type:Number})],a.prototype,"compressionTolerance",void 0),e([m("compressionTolerance")],a.prototype,"writeCompressionTolerance",null),e([o({json:{read:{source:"copyrightText"}}})],a.prototype,"copyright",void 0),e([o({type:String,json:{read:{source:"layerDefinition.definitionExpression"},write:{target:"layerDefinition.definitionExpression"}}})],a.prototype,"definitionExpression",void 0),e([o({readOnly:!0,constructOnly:!0})],a.prototype,"exportImageServiceParameters",void 0),e([o()],a.prototype,"rasterInfo",void 0),e([o({readOnly:!0,type:[J]})],a.prototype,"fields",void 0),e([o({readOnly:!0,dependsOn:["fields"]})],a.prototype,"fieldsIndex",null),e([o({type:["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"],json:{write:!0}})],a.prototype,"format",null),e([c("service","format",["serviceDataType"])],a.prototype,"readFormat",null),e([o({type:S})],a.prototype,"fullExtent",void 0),e([o({readOnly:!0})],a.prototype,"hasMultidimensions",void 0),e([o({json:{read:{source:"maxImageHeight"}}})],a.prototype,"imageMaxHeight",void 0),e([o({json:{read:{source:"maxImageWidth"}}})],a.prototype,"imageMaxWidth",void 0),e([o({type:String,json:{type:re.jsonValues,read:re.read,write:re.write}})],a.prototype,"interpolation",void 0),e([o()],a.prototype,"minScale",void 0),e([c("service","minScale")],a.prototype,"readMinScale",null),e([o()],a.prototype,"maxScale",void 0),e([c("service","maxScale")],a.prototype,"readMaxScale",null),e([o({type:E})],a.prototype,"mosaicRule",null),e([c("mosaicRule",["mosaicRule","defaultMosaicMethod"])],a.prototype,"readMosaicRule",null),e([m("mosaicRule")],a.prototype,"writeMosaicRule",null),e([o({readOnly:!0}),u("serviceRasterInfo.multidimensionalInfo")],a.prototype,"multidimensionalInfo",void 0),e([o({json:{type:n}})],a.prototype,"noData",void 0),e([m("noData")],a.prototype,"writeNoData",null),e([o({type:String,json:{type:ie.jsonValues,read:ie.read,write:ie.write}})],a.prototype,"noDataInterpretation",void 0),e([o({type:String,readOnly:!0,json:{read:{source:["fields"]}}})],a.prototype,"objectIdField",void 0),e([c("objectIdField")],a.prototype,"readObjectIdField",null),e([o({readOnly:!0,dependsOn:["url"]})],a.prototype,"parsedUrl",null),e([o({readOnly:!0}),u("serviceRasterInfo.pixelSize.x")],a.prototype,"pixelSizeX",void 0),e([o({readOnly:!0}),u("serviceRasterInfo.pixelSize.y")],a.prototype,"pixelSizeY",void 0),e([o({type:Function})],a.prototype,"pixelFilter",void 0),e([o()],a.prototype,"raster",void 0),e([o()],a.prototype,"viewId",void 0),e([o({types:D,json:{name:"layerDefinition.drawingInfo.renderer",origins:{"web-scene":{types:j,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type})}}}}})],a.prototype,"renderer",void 0),e([c("renderer")],a.prototype,"readRenderer",null),e([o(N)],a.prototype,"opacity",void 0),e([o({readOnly:!0}),u("serviceRasterInfo.attributeTable")],a.prototype,"rasterAttributeTable",void 0),e([o({readOnly:!0,dependsOn:["fields","rasterInfo","capabilities"]})],a.prototype,"rasterFields",null),e([o({readOnly:!0})],a.prototype,"rasterFunctionInfos",void 0),e([o({type:A})],a.prototype,"renderingRule",null),e([c("renderingRule",["renderingRule","rasterFunctionInfos"])],a.prototype,"readRenderingRule",null),e([m("renderingRule")],a.prototype,"writeRenderingRule",null),e([o()],a.prototype,"serviceDataType",void 0),e([o({readOnly:!0,type:b})],a.prototype,"spatialReference",void 0),e([c("spatialReference",["spatialReference","extent"])],a.prototype,"readSpatialReference",null),e([o({json:{type:se.jsonValues}})],a.prototype,"pixelType",void 0),e([c("pixelType")],a.prototype,"readPixelType",null),e([m("pixelType")],a.prototype,"writePixelType",null),e([o({constructOnly:!0,type:Q})],a.prototype,"serviceRasterInfo",void 0),e([o()],a.prototype,"sourceJSON",void 0),e([o(P)],a.prototype,"url",void 0),e([o({readOnly:!0})],a.prototype,"version",void 0),e([c("version",["currentVersion","fields","timeInfo"])],a.prototype,"readVersion",null),a=e([d("esri.layers.mixins.ArcGISImageService")],a),a};export{oe as ArcGISImageService};

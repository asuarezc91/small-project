/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{clone as e}from"../../core/lang.js";import t from"../../renderers/visualVariables/SizeVariable.js";import{convertColorRampToColormap as n,getColorRampName as r}from"../../renderers/support/colorRampUtils.js";import{stretchTypeJSONDict as a}from"../../renderers/support/stretchRendererUtils.js";import o from"./RasterFunction.js";const i={u1:[0,1],u2:[0,3],u4:[0,15],u8:[0,255],s8:[-128,127],u16:[0,65535],s16:[-32768,32767],u32:[0,4294967295],s32:[-2147483648,2147483647],f32:[-34e38,34e38],f64:[-Number.MAX_VALUE,Number.MAX_VALUE]},u={simple_scalar:"Simple Scalar",wind_barb:"Wind Barb",single_arrow:"Single Arrow",beaufort_kn:"Beaufort Wind (Knots)",beaufort_m:"Beaufort Wind (MetersPerSecond)",ocean_current_m:"Ocean Current (MetersPerSecond)",ocean_current_kn:"Ocean Current (Knots)"},s=new Set(["raster-stretch","unique-value","class-breaks","raster-shaded-relief","vector-field","raster-colormap"]);function l(e){return s.has(e.type)}function m(t,n){if(!t||!n)return e(t||n);const r=e(t);if("none"!==n.functionName.toLowerCase()){p(r.functionArguments).Raster=n}return r}function c(e,i){switch(i=i||{},e.type){case"raster-stretch":return function(e,t){const i=new o;i.functionName="Stretch";const u=f[a.toJSON(e.stretchType)],s="u8",l=function(e){const t=[];return e.forEach((e=>{const n=e;if(Array.isArray(n))t.push(n);else{if(null==n.min||null==n.max)return;const e=[n.min,n.max,n.avg||0,n.stddev||0];t.push(e)}})),t}(e.statistics),m={StretchType:u,Statistics:l,DRA:e.dynamicRangeAdjustment,UseGamma:e.useGamma,Gamma:e.gamma,ComputeGamma:e.computeGamma};null!=e.outputMin&&(m.Min=e.outputMin);null!=e.outputMax&&(m.Max=e.outputMax);u===f.standardDeviation?(m.NumberOfStandardDeviations=e.numberOfStandardDeviations,i.outputPixelType=s):u===f.percentClip?(m.MinPercent=e.minPercent,m.MaxPercent=e.maxPercent,i.outputPixelType=s):u===f.minMax?i.outputPixelType=s:u===f.sigmoid&&(m.SigmoidStrengthLevel=e.sigmoidStrengthLevel);if(i.functionArguments=m,i.variableName="Raster",e.colorRamp){const a=e.colorRamp,u=new o,s=r(a);return s?u.functionArguments={colorRamp:s}:!t.convertColorRampToColormap||"algorithmic"!==a.type&&"multipart"!==a.type?u.functionArguments={colorRamp:e.colorRamp.toJSON()}:u.functionArguments={Colormap:n(a,256)},u.variableName="Raster",u.functionName="Colormap",u.functionArguments.Raster=i,u}return i}(e,i);case"class-breaks":return function(e,t){const n=[],r=[],a=[],i=[],u=1e-6,{pixelType:s,rasterAttributeTable:l}=t,m=l&&l.features,c=g(l);if(m&&Array.isArray(m)&&e.classBreakInfos){e.classBreakInfos.forEach(((t,n)=>{const r=t.symbol.color;let a;r.a&&m.forEach((o=>{a=o.attributes[e.field],(a>=t.minValue&&a<t.maxValue||n===e.classBreakInfos.length-1&&a>=t.minValue)&&i.push([o.attributes[c],r.r,r.g,r.b])}))}));const t=s?d(i,s):i,n=new o;return n.functionName="Colormap",n.functionArguments={},n.functionArguments.Colormap=t,n.variableName="Raster",n}e.classBreakInfos.forEach(((e,t)=>{const o=e.symbol&&e.symbol.color;o.a?(0===t?n.push(e.minValue,e.maxValue+u):n.push(e.minValue+u,e.maxValue+u),r.push(t),i.push([t,o.r,o.g,o.b])):a.push(e.minValue,e.maxValue)}));const p=s?d(i,s):i,f=new o;f.functionName="Remap",f.functionArguments={InputRanges:n,OutputValues:r,NoDataRanges:a},f.variableName="Raster";const h=new o;return h.functionName="Colormap",h.functionArguments={Colormap:p,Raster:f},h}(e,i);case"unique-value":return function(e,t){const n=[],{pixelType:r,rasterAttributeTable:a}=t,i=a&&a.features,u=g(a);let s=!1;e.uniqueValueInfos&&e.uniqueValueInfos.forEach((t=>{const r=t.symbol.color;r.a&&(e.field!==u&&i?i&&i.forEach((a=>{String(a.attributes[e.field])===String(t.value)&&n.push([a.attributes[u],r.r,r.g,r.b])})):isNaN(+t.value)?s=!0:n.push([+t.value,r.r,r.g,r.b]))}));if(s)return null;const l=r&&n.length>0?d(n,r):n,m=new o;return m.functionName="Colormap",m.functionArguments={},m.functionArguments.Colormap=l,m.variableName="Raster",m}(e,i);case"raster-colormap":return function(e,t){const n=e.extractColormap();if(!n||0===n.length)return;const{pixelType:r}=t,a=r?d(n,r):n,i=new o;return i.functionName="Colormap",i.functionArguments={},i.functionArguments.Colormap=a,i}(e,i);case"vector-field":return function(e,n){const r=new o;r.functionName="VectorFieldRenderer";const{dataType:a,bandProperties:i}=n,s="vector-uv"===a;let l,m;i&&2===i.length&&(l=i.map((e=>e.BandName.toLowerCase())).indexOf("magnitude"),m=i.map((e=>e.BandName.toLowerCase())).indexOf("direction"));-1!==l&&null!==l||(l=0,m=1);const c="arithmetic"===e.rotationType?1:2,p="flow-from"===e.flowRepresentation?0:1,f=e.visualVariables?e.visualVariables.filter((e=>"Magnitude"===e.field))[0]:new t,d={magnitudeBandID:l,directionBandID:m,isUVComponents:s,referenceSystem:c,massFlowAngleRepresentation:p,symbolTileSize:50,symbolTileSizeUnits:100,calculationMethod:"Vector Average",symbologyName:u[e.style.toLowerCase().replace("-","_")],minimumMagnitude:f.minDataValue,maximumMagnitude:f.maxDataValue,minimumSymbolSize:f.minSize,maximumSymbolSize:f.maxSize};return r.functionArguments=d,r}(e,i);case"raster-shaded-relief":return function(e,t){if("elevation"!==t.dataType)return new o;const r=new o;r.functionName="Hillshade";const a="traditional"===e.hillshadeType?0:1,i="none"===e.scalingType?1:3,u={HillshadeType:a,SlopeType:i,ZFactor:e.zFactor};0===a&&(u.Azimuth=e.azimuth,u.Altitude=e.altitude);3===i&&(u.PSPower=e.pixelSizePower,u.PSZFactor=e.pixelSizeFactor);r.functionArguments=u,r.variableName="Raster",e.colorRamp&&(r.functionName="ShadedRelief",u.Colormap=n(e.colorRamp,256));return r}(e,i)}}function p(e){const t=e.Raster;return t&&"esri.layers.support.RasterFunction"===t.declaredClass?p(t.functionArguments):e}const f={none:0,standardDeviation:3,histogramEqualization:4,minMax:5,percentClip:6,sigmoid:9};function d(e,t){const n=i[String(t).toLowerCase()];return n&&e.push([Math.floor(n[0]-1),0,0,0],[Math.ceil(n[1]+1),0,0,0]),e}function g(e){if(!e)return;const{fields:t}=e,n=t&&t.find((e=>e&&e.name&&"value"===e.name.toLowerCase()));return n&&n.name}export{m as combineRenderingRules,c as convertRendererToRenderingRule,l as isSupportedRendererType,i as pixelTypeRanges};

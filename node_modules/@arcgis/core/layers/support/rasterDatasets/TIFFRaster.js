/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as t}from"../../../chunks/tslib.es6.js";import"../../../core/has.js";import{unwrap as e,isSome as r}from"../../../core/maybe.js";import"../../../core/Logger.js";import"../../../core/accessorSupport/ensureType.js";import{property as i}from"../../../core/accessorSupport/decorators/property.js";import{subclass as s}from"../../../core/accessorSupport/decorators/subclass.js";import a from"../../../core/Error.js";import"../../../core/urlUtils.js";import"../../../core/uuid.js";import"../../../portal/support/resourceExtension.js";import o from"../../../geometry/Point.js";import n from"../../../geometry/Extent.js";import"../../../geometry.js";import f from"../RasterInfo.js";import l from"../rasterFormats/TiffTags.js";import{parseSignature as u,getImageInfo as p,parseIFD as h,parseFieldValues as m}from"../rasterFormats/TiffDecoder.js";import{estimateStatisticsFromHistograms as c}from"../rasterFunctions/pixelUtils.js";import d from"../RasterStorageInfo.js";import y from"./BaseRaster.js";import{parsePAMInfo as g}from"./pamParser.js";const I=function(t,e){const r=t.get(e);return r&&r.values},T=function(t,e){const r=t.get(e);return r&&r.values[0]};let x=class extends y{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(t){var i;await this.init();const s=t?e(t.signal):null,{data:l}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:s});if(!l)throw new a("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{littleEndian:h,firstIFD:m,isBigTiff:y}=u(l),g=[];await this.readIFDs(g,l,h,m,0,y?8:4,s);const I=p(g),{width:T,height:x,tileWidth:w,tileHeight:F,planes:E,pixelType:S,compression:b,firstPyramidLevel:_,maximumPyramidLevel:v,pyramidBlockWidth:j,pyramidBlockHeight:B,tileBoundary:k,metadata:D}=I,L=n.fromJSON(I.extent),R=L.spatialReference,O=new o(L?{x:L.xmin,y:L.ymax,spatialReference:R}:{x:0,y:0}),z=new d({blockWidth:w,blockHeight:F,pyramidBlockWidth:j,pyramidBlockHeight:B,compression:b,origin:O,firstPyramidLevel:_,maximumPyramidLevel:v,blockBoundary:k}),H=new o({x:(L.xmax-L.xmin)/T,y:(L.ymax-L.ymin)/x,spatialReference:R}),G=D?{BandProperties:D.bandProperties,DataType:D.dataType}:{},P=new f({width:T,height:x,bandCount:E,pixelType:S,compression:b,pixelSize:H,storageInfo:z,spatialReference:R,keyProperties:G,extent:L,statistics:D?D.statistics:null});if(-1===(null==(i=this.ioConfig.skipExtensions)?void 0:i.indexOf("aux.xml"))){const e=await this._fetchAuxiliaryData(t);var q;if(null!=e)P.statistics=null!=(q=e.statistics)?q:P.statistics,P.histograms=e.histograms,e.histograms&&!r(P.statistics)&&(P.statistics=c(e.histograms))}if(this._set("rasterInfo",P),this._headerInfo={littleEndian:h,isBigTiff:y,ifds:g,...I},!this._headerInfo.isSupported)throw new a("tiffraster:open","this tiff is not supported: "+this._headerInfo.message);this.updateTileInfo()}async fetchRawTile(t,e,r,i={}){if(!this._headerInfo&&this._headerInfo.isSupported)return null;const{blockBoundary:s}=this.rasterInfo.storageInfo,a=t>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,o=t>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight,n=s[t];if(!n||n.maxRow<e||n.maxCol<r||n.minRow>e||n.minCol>r)return null;const f=this.getTileLocation(t,e,r);if(!f)return null;const{range:l,actualTileWidth:u,actualTileHeight:p,ifd:h}=f,{data:m}=await this.request(this.url,{range:l,responseType:"array-buffer",signal:i.signal}),c=await this.decodePixelBlock(m,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:h,offset:0,size:0},width:a,height:o,planes:null,pixelType:null});let d,y,g;if(u!==a||p!==o){let t=c.mask;if(t)for(d=0;d<o;d++)if(g=d*a,d<p)for(y=u;y<a;y++)t[g+y]=0;else for(y=0;y<a;y++)t[g+y]=0;else for(t=new Uint8Array(a*o),c.mask=t,d=0;d<p;d++)for(g=d*a,y=0;y<u;y++)t[g+y]=1}return c}async readIFDs(t,e,r,i,s,a=4,o){if(!i)return null;if(i>=e.byteLength||i<0){e=(await this.request(this.url,{range:{from:i+s,to:i+s+this._bufferSize},responseType:"array-buffer",signal:o})).data,s=i+s,i=0}const n=await this.readIFD(e,r,i,s,l.TIFF_TAGS,a,o);if(t.push(n.ifd),!n.nextIFD)return null;await this.readIFDs(t,e,r,n.nextIFD-s,s,a,o)}async readIFD(t,e,r,i,s=l.TIFF_TAGS,a=4,o){if(!t)return null;const n=h(t,e,r,i,s,a);if(n.success){const r=[];if(n.ifd.forEach((t=>{t.values||r.push(t)})),r.length>0){const s=r.map((t=>t.offlineOffsetSize)),a=Math.min.apply(null,s.map((t=>t[0])));if(Math.min.apply(null,s.map((t=>t[0]+t[1])))-a<=this._bufferSize){const{data:s}=await this.request(this.url,{range:{from:a,to:a+this._bufferSize},responseType:"array-buffer",signal:o});t=s,i=a,r.forEach((r=>m(t,e,r,i)))}}if(n.ifd.has("GEOKEYDIRECTORY")){const r=n.ifd.get("GEOKEYDIRECTORY"),s=r.values;if(s&&s.length>4){const a=s[0]+"."+s[1]+"."+s[2],n=await this.readIFD(t,e,r.valueOffset+6-i,i,l.GEO_KEYS,2,o);r.data=n.ifd,r.data&&r.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[a]})}}return n}if(n.requiredBufferSize&&n.requiredBufferSize!==t.byteLength){const r=await this.request(this.url,{range:{from:i,to:i+n.requiredBufferSize+4},responseType:"array-buffer",signal:o});return(t=r.data).byteLength<n.requiredBufferSize?null:this.readIFD(t,e,0,i,l.TIFF_TAGS,4,o)}}getTileLocation(t,e,r){const{firstPyramidLevel:i,blockBoundary:s}=this.rasterInfo.storageInfo,a=0===t?0:t-(i-1),o=this._headerInfo.ifds[a];if(!o)return null;const n=I(o,"TILEOFFSETS");if(void 0===n)return null;const f=I(o,"TILEBYTECOUNTS"),{minRow:l,minCol:u,maxRow:p,maxCol:h}=s[a];if(e>p||r>h||e<l||r<u)return null;const m=T(o,"IMAGEWIDTH"),c=T(o,"IMAGELENGTH"),d=T(o,"TILEWIDTH"),y=T(o,"TILELENGTH"),g=e*(h+1)+r,x=n[g],w=f[g];if(null==x||null==w)return null;return{range:{from:x,to:x+w-1},ifd:o,actualTileWidth:r===h?m%d:d,actualTileHeight:e===p?c%y:y}}async _fetchAuxiliaryData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:null==t?void 0:t.signal});return g(e)}catch{return null}}};t([i()],x.prototype,"_files",void 0),t([i()],x.prototype,"_headerInfo",void 0),t([i()],x.prototype,"_bufferSize",void 0),t([i({type:String,json:{write:!0}})],x.prototype,"datasetFormat",void 0),x=t([s("esri.layers.support.rasterDatasets.TIFFRaster")],x);var w=x;export default w;

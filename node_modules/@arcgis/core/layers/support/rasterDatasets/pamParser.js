/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import e from"../../../geometry/SpatialReference.js";import"../../../geometry.js";import{isSameTagIgnoreNS as t,getElementValue as n,getElements as a,getElement as r,getElementNumericValue as s,getElementNumericValues as l}from"./xmlUtilities.js";import o from"../rasterTransforms/PolynomialTransform.js";function i(e,t){if(!e||!t)return null;const n=[];for(let a=0;a<e.length;a++)n.push(e[a]),n.push(t[a]);return n}function u(t){if(!t)return null;let n=Number(t);if(!isNaN(n)&&0!==n)return new e({wkid:n});const a=t.replace(/\]/g,"[").replace(/\"/g,"").split("[").map((e=>e.trim())).filter((e=>""!==e)),r=a[a.length-1].split(",");return"EPSG"!==r[0]||(n=Number(r[1]),isNaN(n)||0===n)?new e({wkt:t}):new e({wkid:n})}function f(e){var f;if("pamdataset"!==(null==e||null==(f=e.documentElement.tagName)?void 0:f.toLowerCase()))return{};const c={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};e.documentElement.childNodes.forEach((e=>{if(1===e.nodeType)if(t(e,"SRS")){if(!c.spatialReference){const t=n(e);c.spatialReference=u(t)}}else if(t(e,"Metadata"))if("xml:ESRI"===e.getAttribute("domain")){const{spatialReference:t,transform:a}=function(e){var t;const a=r(e,"GeodataXform"),f=u(s(a,"SpatialReference/WKID")||n(a,"SpatialReference/WKT"));if("typens:PolynomialXform"!==a.getAttribute("xsi:type"))return{spatialReference:f,transform:null};const c=null!=(t=s(a,"PolynomialOrder"))?t:1,m=l(a,"CoeffX/Double"),d=l(a,"CoeffY/Double"),p=l(a,"InverseCoeffX/Double"),I=l(a,"InverseCoeffY/Double"),S=i(m,d),g=i(p,I);return{spatialReference:f,transform:new o({polynomialOrder:c,forwardCoefficients:S,inverseCoefficients:g})}}(e);c.transform=a,c.spatialReference||(c.spatialReference=t)}else{a(e,"MDI").forEach((e=>c.metadata[e.getAttribute("key")]=n(e)))}else if(t(e,"PAMRasterBand")){const t=function(e){var t;const l=s(e,"NoDataValue"),o=r(e,"Histograms/HistItem"),i=s(o,"HistMin"),u=s(o,"HistMax"),f=s(o,"BucketCount"),c=null==(t=n(o,"HistCounts"))?void 0:t.split("|").map((e=>Number(e)));let m,d,p,I;a(e,"Metadata/MDI").forEach((e=>{var t;const n=Number(null!=(t=e.textContent)?t:e.nodeValue);switch(e.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":m=n;break;case"STATISTICS_MAXIMUM":d=n;break;case"STATISTICS_MEAN":p=n;break;case"STATISTICS_STDDEV":I=n}}));const S=s(e,"Metadata/SourceBandIndex");return{noDataValue:l,histogram:null!=c&&c.length&&null!=m&&null!=d?{min:i,max:u,size:f||c.length,counts:c}:null,sourceBandIndex:S,statistics:null!=m&&null!=d?{min:m,max:d,avg:p,stddev:I}:null}}(e);null!=t.sourceBandIndex&&null==c.rasterBands[t.sourceBandIndex]?c.rasterBands[t.sourceBandIndex]=t:c.rasterBands.push(t)}}));const m=c.rasterBands;if(m){const e=!!m[0].statistics;c.statistics=e?m.map((e=>e.statistics)):null;const t=!!m[0].histogram;c.histograms=t?m.map((e=>e.histogram)):null}return c}export{f as parsePAMInfo};

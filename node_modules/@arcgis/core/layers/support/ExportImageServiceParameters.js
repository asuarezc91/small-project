/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import"../../core/has.js";import"../../core/Logger.js";import"../../core/accessorSupport/ensureType.js";import{property as r}from"../../core/accessorSupport/decorators/property.js";import{aliasOf as o}from"../../core/accessorSupport/decorators/aliasOf.js";import{JSONMap as t}from"../../core/jsonMap.js";import{subclass as i}from"../../core/accessorSupport/decorators/subclass.js";import{writer as s}from"../../core/accessorSupport/decorators/writer.js";import"../../core/urlUtils.js";import"../../core/uuid.js";import"../../portal/support/resourceExtension.js";import{JSONSupport as n}from"../../core/JSONSupport.js";import a from"./RasterFunction.js";import{isSupportedRendererType as l,combineRenderingRules as p,convertRendererToRenderingRule as c}from"./imageryRendererUtils.js";import y from"./MosaicRule.js";const d=new t({RSP_NearestNeighbor:"nearest",RSP_BilinearInterpolation:"bilinear",RSP_CubicConvolution:"cubic",RSP_Majority:"majority"}),u=new t({esriNoDataMatchAny:"any",esriNoDataMatchAll:"all"});let m=class extends n{constructor(){super(...arguments),this.layer=null,this.adjustAspectRatio=void 0,this.bandIds=void 0,this.compression=void 0,this.compressionQuality=void 0,this.compressionTolerance=.01,this.format=null,this.interpolation=null,this.noData=null,this.noDataInterpretation=void 0,this.pixelType=void 0,this.lercVersion=2}writeAdjustAspectRatio(e,r,o){this.layer.version<10.3||(r[o]=e)}writeCompressionQuality(e,r,o){this.format&&this.format.toLowerCase().indexOf("jpg")>-1&&null!=e&&(r[o]=e)}writeCompressionTolerance(e,r,o){"lerc"===this.format&&null!=e&&(r[o]=e)}writeLercVersion(e,r,o){"lerc"===this.format&&this.layer.version>=10.5&&(r[o]=e)}get version(){const e=this.layer;return e.bandIds,e.format,e.compressionQuality,e.compressionTolerance,e.interpolation,e.noData,e.noDataInterpretation,e.mosaicRule,e.renderingRule,e.adjustAspectRatio,e.pixelFilter,e.renderer,e.definitionExpression,(this._get("version")||0)+1}set version(e){this._set("version",e)}get mosaicRule(){const e=this.layer;let r=e.mosaicRule;const o=e.definitionExpression;return r?o&&o!==r.where&&(r=r.clone(),r.where=o):o&&(r=new y({where:o})),r}get renderingRule(){const e=this.layer;let r=e.renderingRule;const o=e.pixelFilter,t=!e.format||e.format.indexOf("jpg")>-1||e.format.indexOf("png")>-1;return r=this._addResampleRasterFunction(r),t&&!o&&(r=this.combineRendererWithRenderingRule()),r}combineRendererWithRenderingRule(){var e;const r=this.layer,{rasterInfo:o,renderingRule:t,renderer:i}=r;if(!i||!l(i))return t;return p(c(i,{rasterAttributeTable:o.attributeTable,pixelType:o.pixelType,dataType:o.dataType,bandProperties:null==(e=o.keyProperties)?void 0:e.BandProperties,convertColorRampToColormap:r.version<10.6}),t)}_addResampleRasterFunction(e){var r;let o=null;if("vector-field"===(null==(r=this.layer.renderer)?void 0:r.type)){const e={},r=this.layer.renderingRule;if(!r||"Resample"!==r.functionName){const r="esriImageServiceDataTypeVector-UV"===this.layer.serviceDataType?7:10;e.rasterFunction="Resample",e.rasterFunctionArguments={ResamplingType:r,InputCellSize:{x:this.layer.pixelSizeX,y:this.layer.pixelSizeY}}}o=a.fromJSON(e)}return p(o,e)}};e([r()],m.prototype,"layer",void 0),e([r({json:{write:!0}})],m.prototype,"adjustAspectRatio",void 0),e([s("adjustAspectRatio")],m.prototype,"writeAdjustAspectRatio",null),e([r({json:{write:!0}}),o("layer.bandIds")],m.prototype,"bandIds",void 0),e([r({json:{write:!0}})],m.prototype,"compression",void 0),e([r({json:{write:!0}}),o("layer.compressionQuality")],m.prototype,"compressionQuality",void 0),e([s("compressionQuality")],m.prototype,"writeCompressionQuality",null),e([r({json:{write:!0}}),o("layer.compressionTolerance")],m.prototype,"compressionTolerance",void 0),e([s("compressionTolerance")],m.prototype,"writeCompressionTolerance",null),e([r({json:{write:!0}}),o("layer.format")],m.prototype,"format",void 0),e([r({type:String,json:{read:{reader:d.read},write:{writer:d.write}}}),o("layer.interpolation")],m.prototype,"interpolation",void 0),e([r({json:{write:!0}}),o("layer.noData")],m.prototype,"noData",void 0),e([r({type:String,json:{read:{reader:u.read},write:{writer:u.write}}}),o("layer.noDataInterpretation")],m.prototype,"noDataInterpretation",void 0),e([r({json:{write:!0}})],m.prototype,"pixelType",void 0),e([r({json:{write:!0}})],m.prototype,"lercVersion",void 0),e([s("lercVersion")],m.prototype,"writeLercVersion",null),e([r({type:Number,dependsOn:["layer.adjustAspectRatio","layer.bandIds","layer.format","layer.compressionQuality","layer.compressionTolerance","layer.definitionExpression","layer.interpolation","layer.noData","layer.noDataInterpretation","layer.mosaicRule","layer.renderingRule","layer.pixelFilter","layer.renderer","lercVersion","pixelType"]})],m.prototype,"version",null),e([r({dependsOn:["layer.mosaicRule","layer.definitionExpression"],json:{write:!0}})],m.prototype,"mosaicRule",null),e([r({dependsOn:["layer.renderingRule","layer.renderer","layer.rasterInfo","layer.format"],json:{write:!0}})],m.prototype,"renderingRule",null),m=e([i("esri.layers.mixins.ExportImageServiceParameters")],m);export{m as ExportImageServiceParameters};

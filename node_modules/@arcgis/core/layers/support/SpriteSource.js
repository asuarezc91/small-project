/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import t from"../../core/Logger.js";import e from"../../core/Error.js";import{urlToObject as i,objectToQuery as s}from"../../core/urlUtils.js";import{all as a,resolve as r}from"../../core/promiseUtils.js";import h from"../../request.js";const o=t.getLogger("esri.layers.support.SpriteSource");export default class{constructor(t,e,i,s){this.baseURL=t,this.devicePixelRatio=e,this.maxTextureSize=i,this._spriteImageFormat=s,this._isRetina=!1,this._spritesData={},this.image=null,this.width=null,this.height=null,this.loadStatus="not-loaded"}get spriteNames(){const t=[];for(const e in this._spritesData)t.push(e);return t.sort(),t}getSpriteInfo(t){return this._spritesData[t]}async load(t){if(this.baseURL){this.loadStatus="loading";try{await this._loadSprites(t),this.loadStatus="loaded"}catch{this.loadStatus="failed"}}else this.loadStatus="failed"}_loadSprites(t){this._isRetina=this.devicePixelRatio>1.15;const l=i(this.baseURL),n=l.query?"?"+s(l.query):"",d=this._isRetina?"@2x":"",g=`${l.path}${d}.${this._spriteImageFormat}${n}`,m=`${l.path}${d}.json${n}`;return a([h(m,t),h(g,{responseType:"image",...t})]).then((([t,i])=>{const s=Object.keys(t.data);if(!s||0===s.length||1===s.length&&"_ssl"===s[0]||!i||!i.data)return this._spritesData=this.image=null,this.width=this.height=0,r(null);this._spritesData=t.data;const a=i.data,h=Math.max(this.maxTextureSize,4096);if(a.width>h||a.height>h){const t=`Sprite resource for style ${l.path} is bigger than the maximum allowed of ${h} pixels}`;throw o.error(t),new e("SpriteSource",t)}this.width=a.width,this.height=a.height;const n=document.createElement("canvas"),d=n.getContext("2d");n.width=a.width,n.height=a.height,d.drawImage(a,0,0,a.width,a.height);const g=d.getImageData(0,0,a.width,a.height),m=new Uint8Array(g.data);let p;for(let t=0;t<m.length;t+=4)p=m[t+3]/255,m[t]=m[t]*p,m[t+1]=m[t+1]*p,m[t+2]=m[t+2]*p;this.image=m}))}}

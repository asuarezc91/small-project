/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{isNone as t,isSome as r}from"../../core/maybe.js";import{throwIfAbortError as e,all as a}from"../../core/promiseUtils.js";import{id as o}from"../../kernel.js";import s from"../../request.js";import n from"../../portal/Portal.js";import i from"../../portal/PortalItem.js";import l from"../FeatureLayer.js";class c{constructor(t,r,e){this.parsedUrl=t,this.portalItem=r,this.signal=e,this.rootDocument=null;const a=this.parsedUrl.path.match(/^(.*)\/SceneServer\/layers\/([\d]*)\/?$/i);a&&(this.urlParts={root:a[1],layerId:parseInt(a[2],10)})}async fetch(){var r;if(!this.urlParts)return null;const e=null!=(r=this.portalItem)?r:await this.portalItemFromServiceItemId();if(t(e))return this.loadFromUrl();const a=await this.findAndLoadRelatedPortalItem(e);return t(a)?null:this.loadFeatureLayerFromPortalItem(a)}async fetchPortalItem(){var r;if(!this.urlParts)return null;const e=null!=(r=this.portalItem)?r:await this.portalItemFromServiceItemId();return t(e)?null:this.findAndLoadRelatedPortalItem(e)}async fetchRootDocument(){if(r(this.rootDocument))return this.rootDocument;if(t(this.urlParts))return this.rootDocument={},{};const e={query:{f:"json"},responseType:"json",authMode:"no-prompt",signal:this.signal},a=`${this.urlParts.root}/SceneServer`;try{const t=await s(a,e);this.rootDocument=t.data}catch{this.rootDocument={}}return this.rootDocument}async fetchServiceOwningPortalUrl(){var t;const r=null==(t=o)?void 0:t.findServerInfo(this.parsedUrl.path);if(null!=r&&r.owningSystemUrl)return r.owningSystemUrl;const a=this.parsedUrl.path.replace(/(.*\/rest)\/.*/i,"$1")+"/info";try{const t=(await s(a,{query:{f:"json"},responseType:"json",signal:this.signal})).data.owningSystemUrl;if(t)return t}catch(t){e(t)}return null}async findAndLoadRelatedPortalItem(t){try{return(await t.fetchRelatedItems({relationshipType:"Service2Service",direction:"reverse"},{signal:this.signal})).find((t=>"Feature Service"===t.type))||null}catch(t){return e(t),null}}async loadFeatureLayerFromPortalItem(t){await t.load({signal:this.signal});const r=await this.findMatchingAssociatedSublayerUrl(t.url);return new l({url:r,portalItem:t}).load({signal:this.signal})}async loadFromUrl(){const t=await this.findMatchingAssociatedSublayerUrl(`${this.urlParts.root}/FeatureServer`);return new l({url:t}).load({signal:this.signal})}async findMatchingAssociatedSublayerUrl(t){const r=t.replace(/^(.*FeatureServer)(\/[\d]*\/?)?$/i,"$1"),e={query:{f:"json"},responseType:"json",authMode:"no-prompt",signal:this.signal},o=this.urlParts.layerId,n=this.fetchRootDocument(),i=s(r,e),[l,c]=await a([i,n]),u=c&&c.layers,h=l.data&&l.data.layers;if(!Array.isArray(h))throw new Error("expected layers array");if(Array.isArray(u))for(let t=0;t<Math.min(u.length,h.length);t++){if(u[t].id===o)return`${r}/${h[t].id}`}else if(o<h.length)return`${r}/${h[o].id}`;throw new Error("could not find matching associated sublayer")}async portalItemFromServiceItemId(){const t=(await this.fetchRootDocument()).serviceItemId;if(!t)return null;const a=new i({id:t}),o=await this.fetchServiceOwningPortalUrl();r(o)&&(a.portal=new n({url:o}));try{return a.load({signal:this.signal})}catch(t){return e(t),null}}}export{c as FetchAssociatedFeatureLayer};

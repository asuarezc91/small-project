/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import"../../core/has.js";import e from"../../core/Logger.js";import{canProject as t,project as n}from"../../geometry/support/webMercatorUtils.js";import s from"../../geometry/Point.js";import{extentContainsPoint as i}from"../../geometry/support/contains.js";import"../../geometry.js";import{getMetersPerUnitForSR as o}from"../../core/unitUtils.js";import{toExtent as r,create as a}from"../../geometry/support/aaBoundingRect.js";const l=e.getLogger("esri.layers.support.ElevationSampler");class c{queryElevation(e){return u(e.clone(),this)}on(){return x}projectIfRequired(e,t){return h(e,t)}}class m extends c{constructor(e,t,n){super(),this.tile=e,this.noDataValue=n,this.extent=r(e.tile.extent,t.spatialReference);const s=o(t.spatialReference),i=t.lodAt(e.tile.level).resolution*s;this.demResolution={min:i,max:i}}get spatialReference(){return this.extent.spatialReference}contains(e){const t=this.projectIfRequired(e,this.spatialReference);return i(this.extent,t)}elevationAt(e){const t=this.projectIfRequired(e,this.spatialReference);if(!t)return null;if(!this.contains(e)){const t=this.extent,n=`${t.xmin}, ${t.ymin}, ${t.xmax}, ${t.ymax}`;l.warn("#elevationAt()",`Point used to sample elevation (${e.x}, ${e.y}) is outside of the sampler extent (${n})`)}return this.tile.sample(t.x,t.y)}}class p extends c{constructor(e,t,n){let s;super(),"number"==typeof t?(this.noDataValue=t,s=null):(s=t,this.noDataValue=n),this.samplers=s?e.map((e=>new m(e,s,this.noDataValue))):e;const i=this.samplers[0];if(i){this.extent=i.extent.clone();const{min:e,max:t}=i.demResolution;this.demResolution={min:e,max:t};for(let e=1;e<this.samplers.length;e++){const t=this.samplers[e];this.extent.union(t.extent),this.demResolution.min=Math.min(this.demResolution.min,t.demResolution.min),this.demResolution.max=Math.max(this.demResolution.max,t.demResolution.max)}}else this.extent=r(a(),s.spatialReference),this.demResolution={min:0,max:0}}get spatialReference(){return this.extent.spatialReference}elevationAt(e){const t=this.projectIfRequired(e,this.spatialReference);if(!t)return null;for(const e of this.samplers)if(e.contains(t))return e.elevationAt(t);return l.warn("#elevationAt()",`Point used to sample elevation (${e.x}, ${e.y}) is outside of the sampler`),null}}function u(e,t){const n=h(e,t.spatialReference);if(!n)return null;switch(e.type){case"point":!function(e,t,n){e.z=n.elevationAt(t)||0}(e,n,t);break;case"polyline":!function(e,t,n){f.spatialReference=t.spatialReference;const s=e.hasM&&!e.hasZ;for(let i=0;i<e.paths.length;i++){const o=e.paths[i],r=t.paths[i];for(let e=0;e<o.length;e++){const t=o[e],i=r[e];f.x=i[0],f.y=i[1];const a=n.elevationAt(f)||0;s&&(t[3]=t[2]),t[2]=a}}e.hasZ=!0}(e,n,t);break;case"multipoint":!function(e,t,n){f.spatialReference=t.spatialReference;const s=e.hasM&&!e.hasZ;for(let i=0;i<e.points.length;i++){const o=e.points[i],r=t.points[i];f.x=r[0],f.y=r[1];const a=n.elevationAt(f)||0;s&&(o[3]=o[2]),o[2]=a}e.hasZ=!0}(e,n,t)}return e}function h(e,s){const i=e.spatialReference;return i.equals(s)?e:t(i,s)?n(e,s):(l.error(`Cannot project geometry spatial reference (wkid:${i.wkid}) to elevation sampler spatial reference (wkid:${s.wkid})`),null)}const f=new s,x={remove(){}};export{c as ElevationSamplerBase,p as MultiTileElevationSampler,m as TileElevationSampler,u as updateGeometryElevation};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import"../../../../core/has.js";import{isNone as t,isSome as r,unwrapOr as o,get as s}from"../../../../core/maybe.js";import i from"../../../../core/Logger.js";import"../../../../core/accessorSupport/ensureType.js";import"../../../../core/accessorSupport/decorators/property.js";import{subclass as n}from"../../../../core/accessorSupport/decorators/subclass.js";import a from"../../../../core/Error.js";import"../../../../core/urlUtils.js";import"../../../../core/uuid.js";import"../../../../portal/support/resourceExtension.js";import{createResolver as c}from"../../../../core/promiseUtils.js";import u from"../../../../geometry/SpatialReference.js";import{fromJSON as f}from"../../../../geometry/support/jsonUtils.js";import"../../../../geometry.js";import d from"../../../../request.js";import h from"../../../../tasks/support/Query.js";import{executeQuery as l}from"../../../../tasks/operations/query.js";import{WebSocketConnection as y}from"./WebSocketConnection.js";const p=i.getLogger("esri.layers.graphics.sources.connections.GeoEventConnection"),m={maxQueryDepth:5,maxRecordCountFactor:3};let g=class extends y{constructor(e){super({...m,...e})}async _open(){const e=await this._fetchServiceDefinition(this._config.source);e.timeInfo.trackIdField||p.warn("GeoEvent service was configured without a TrackIdField. This may result in certain functionality being disabled. The purgeOptions.maxObservations property will have no effect.");const t=await this._fetchWebSocketUrl(e.streamUrls,this._config.spatialReference);this._buddyServicesQuery||(this._buddyServicesQuery=this._queryBuddyServices()),await this._buddyServicesQuery,await this._tryCreateWebSocket(t);const{filter:r,outFields:o}=this._config;this.destroyed||this._setFilter(r,o)}_onMessage(e){let t;try{t=this._enrich(JSON.parse(e.data)),this._featureZScaler&&this._featureZScaler(t.geometry)}catch(e){return void p.error(new a("geoevent-connection","Failed to parse message",e))}this.onFeature(t)}async _fetchServiceDefinition(e){const t=d(e.path,{query:{f:"json"},responseType:"json"}),r=(await t).data;return this._serviceDefinition=r,r}async _fetchWebSocketUrl(e,t){const r=e[0],{urls:o,token:s}=r;return`${this._inferWebSocketBaseUrl(o)}/subscribe?outSR=${t.wkid}${s?"&token="+s:""}`}_inferWebSocketBaseUrl(e){if(1===e.length)return e[0];for(const t of e)if(-1!==t.indexOf("wss"))return t;return p.error(new a("geoevent-connection","Unable to infer WebSocket url",e)),null}async _setFilter(e,r){const o=this._websocket;if(t(o)||t(e)&&t(r))return;const s=JSON.stringify({filter:this._serializeFilter(e,r)});let i=!1;const n=c();return o.onmessage=e=>{const t=JSON.parse(e.data);t.filter&&(t.error&&(p.error(new a("geoevent-connection","Failed to set service filter",t.error)),this._set("errorString",`Could not set service filter - ${t.error}`),n.reject(t.error)),o.onmessage=this._onMessage.bind(this),i=!0,n.resolve())},o.send(s),setTimeout((()=>{i||(this.destroyed||this._websocket!==o||p.error(new a("geoevent-connection","Server timed out when setting filter")),n.reject())}),1e4),n.promise}_serializeFilter(e,o){const s={};if(t(e)&&t(o))return s;if(r(e)&&e.geometry)try{const t=f(e.geometry);if("extent"!==t.type)throw new a(`Expected extent but found type ${t.type}`);s.geometry=JSON.stringify(t.shiftCentralMeridian())}catch(e){p.error(new a("geoevent-connection","Encountered an error when setting connection geometryDefinition",e))}return r(e)&&e.where&&"1 = 1"!==e.where&&(s.where=e.where),r(o)&&(s.outFields=o.join(",")),s}_enrich(e){if(!this._relatedFeatures)return e;const t=this._serviceDefinition.relatedFeatures.joinField,r=e.attributes[t];if(!this._relatedFeatures.has(r))return p.warn("geoevent-connection","Feature join failed. Is the join field configured correctly?",e),e;const{attributes:o,geometry:s}=this._relatedFeatures.get(r);for(const t in o)e.attributes[t]=o[t];return s&&(e.geometry=s),e.geometry||e.centroid||p.error(new a("geoevent-connection","Found malformed feature - no geometry found",e)),e}async _queryBuddyServices(){try{const{relatedFeatures:e,keepLatestArchive:t}=this._serviceDefinition,r=this._queryRelatedFeatures(e),o=this._queryArchive(t);await r;const s=await o;if(!s)return;for(const e of s.features)this.onFeature(this._enrich(e))}catch(e){p.error(new a("geoevent-connection","Encountered an error when querying buddy services",{error:e}))}}async _queryRelatedFeatures(e){if(!e)return;const t=await this._queryBuddy(e.featuresUrl);this._addRelatedFeatures(t)}async _queryArchive(e){if(e)return this._queryBuddy(e.featuresUrl)}async _queryBuddy(e){const t=new((await import("../../../FeatureLayer.js")).default)({url:e}),{capabilities:r}=await t.load(),i=r.query.supportsMaxRecordCountFactor,n=r.query.supportsPagination,a=r.query.supportsCentroid,c=this._config.maxRecordCountFactor,f=t.capabilities.query.maxRecordCount,d=i?f*c:f,y=new h;if(y.outFields=o(this._config.outFields,["*"]),y.where=o(s(this._config.filter,"where"),"1=1"),y.returnGeometry=!0,y.returnExceededLimitFeatures=!0,y.outSpatialReference=u.fromJSON(this._config.spatialReference),a&&(y.returnCentroid=!0),i&&(y.maxRecordCountFactor=c),n)return y.num=d,t.destroy(),this._queryPages(e,y);const p=await l(e,y,this._config.sourceSpatialReference);return t.destroy(),p.data}async _queryPages(e,t,o=[],s=0){t.start=r(t.num)?s*t.num:null;const{data:i}=await l(e,t,this._config.sourceSpatialReference);return i.exceededTransferLimit&&s<this._config.maxQueryDepth?(i.features.forEach((e=>o.push(e))),this._queryPages(e,t,o,s+1)):(o.forEach((e=>i.features.push(e))),i)}_addRelatedFeatures(e){const t=new Map,r=e.features,o=this._serviceDefinition.relatedFeatures.joinField;for(const e of r){const r=e.attributes[o];t.set(r,e)}this._relatedFeatures=t}};g=e([n("esri.layers.graphics.sources.connections.GeoEventConnection")],g);var _=g;export default _;

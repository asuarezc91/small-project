/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import"../../../../core/has.js";import{isSome as t,isNone as o}from"../../../../core/maybe.js";import r from"../../../../core/Logger.js";import"../../../../core/accessorSupport/ensureType.js";import{property as s}from"../../../../core/accessorSupport/decorators/property.js";import{subclass as n}from"../../../../core/accessorSupport/decorators/subclass.js";import c from"../../../../core/Error.js";import"../../../../core/urlUtils.js";import"../../../../core/uuid.js";import"../../../../portal/support/resourceExtension.js";import{after as i,create as a,createResolver as l}from"../../../../core/promiseUtils.js";import{getGeometryZScaler as d}from"../../../../tasks/operations/zscale.js";import p from"./StreamConnection.js";const h=r.getLogger("esri.layers.graphics.sources.connections.WebSocketConnection");var u;!function(e){e[e.CONNECTING=0]="CONNECTING",e[e.OPEN=1]="OPEN",e[e.CLOSING=2]="CLOSING",e[e.CLOSED=3]="CLOSED"}(u||(u={}));let m=class extends p{constructor(e){super(),this.errorString=null;const{geometryType:t,spatialReference:o,sourceSpatialReference:r}=e;this._config=e,this._featureZScaler=d(t,r,o),this._open()}async _open(){await this._tryCreateWebSocket(),this.destroyed||await this._handshake()}destroy(){t(this._websocket)&&(this._websocket.onopen=null,this._websocket.onclose=null,this._websocket.onerror=null,this._websocket.onmessage=null,this._websocket.close()),this._websocket=null}get connectionStatus(){if(o(this._websocket))return"disconnected";switch(this._websocket.readyState){case u.CONNECTING:case u.OPEN:return"connected";case u.CLOSING:case u.CLOSED:return"disconnected"}}async _tryCreateWebSocket(e=this._config.source.path,t=1e3,o=0){try{if(this.destroyed)return;this._websocket=await this._createWebSocket(e),this.notifyChange("connectionStatus")}catch(r){const s=t/1e3;return this._config.maxReconnectionAttempts&&o>=this._config.maxReconnectionAttempts?(h.error(new c("websocket-connection","Exceeded maxReconnectionAttempts attempts. No further attempts will be made")),void this.destroy()):(h.error(new c("websocket-connection",`Failed to connect. Attempting to reconnect in ${s}s`,r)),await i(t),this._tryCreateWebSocket(e,Math.min(1.5*t,1e3*this._config.maxReconnectionInterval),o+1))}}_createWebSocket(e){const t=new WebSocket(e),o=a(((e,o)=>{t.onopen=()=>e(t),t.onclose=e=>o(e)}));return o.then((()=>{if(this.destroyed)return t.onclose=()=>{},void t.close();t.onclose=e=>this._onClose(e),t.onerror=e=>this._onError(e),t.onmessage=e=>this._onMessage(e)})),o}async _handshake(e=1e4){const t=this._websocket;if(o(t))return;const r=l(),s=t.onmessage,{filter:n,outFields:i,spatialReference:a}=this._config;return r.timeout(e),t.onmessage=e=>{var o;let l=null;try{l=JSON.parse(e.data)}catch(e){}l&&"object"==typeof l||(h.error(new c("websocket-connection","Protocol violation. Handshake failed - malformed message",e.data)),r.reject(),this.destroy()),(null==(o=l.spatialReference)?void 0:o.wkid)!==(null==a?void 0:a.wkid)&&(h.error(new c("websocket-connection",`Protocol violation. Handshake failed - expected wkid of ${a.wkid}`,e.data)),r.reject(),this.destroy()),"json"!==l.format&&(h.error(new c("websocket-connection","Protocol violation. Handshake failed - format is not set",e.data)),r.reject(),this.destroy()),n&&l.filter!==n&&h.error(new c("websocket-connection","Tried to set filter, but server doesn't support it")),i&&l.outFields!==i&&h.error(new c("websocket-connection","Tried to set outFields, but server doesn't support it")),t.onmessage=s,r.resolve()},t.send(JSON.stringify({filter:n,outFields:i,format:"json",spatialReference:{wkid:a.wkid}})),r.promise}_onMessage(e){try{const t=JSON.parse(e.data);if("featureResult"!==t.type)throw new c("websocket-connection","Protocol violation - Expected to find message of type 'featureResult'",t);for(const e of t.features)this._featureZScaler&&this._featureZScaler(e.geometry),this.onFeature(e)}catch(e){return h.error(new c("websocket-connection","Failed to parse message",e)),void this.destroy()}}_onError(e){const t="Encountered an error over WebSocket connection";this._set("errorString",t),h.error("websocket-connection",t)}_onClose(e){this._websocket=null,this.notifyChange("connectionStatus"),1e3!==e.code&&h.error("websocket-connection",`WebSocket closed unexpectedly with error code ${e.code}`),this.destroyed||this._open()}};e([s()],m.prototype,"connectionStatus",null),e([s()],m.prototype,"errorString",void 0),m=e([n("esri.layers.graphics.sources.connections.WebSocketConnection")],m);export{u as ReadyState,m as WebSocketConnection};

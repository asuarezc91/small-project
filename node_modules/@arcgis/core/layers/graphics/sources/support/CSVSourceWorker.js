/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import e from"../../../../core/has.js";import{mixin as t}from"../../../../core/lang.js";import i from"../../../../core/Error.js";import{urlToObject as n,getFilename as r}from"../../../../core/urlUtils.js";import{all as o}from"../../../../core/promiseUtils.js";import{equals as l,isWebMercator as s,WGS84 as a}from"../../../../geometry/support/spatialReferenceUtils.js";import d from"../../../../geometry/SpatialReference.js";import{lngLatToXY as u}from"../../../../geometry/support/webMercatorUtils.js";import"../../../../geometry.js";import c from"../../../../request.js";import{projectMany as m}from"../../../../geometry/projection.js";import{_parseInfo as f}from"../../../../core/number.js";import p from"../../OptimizedFeature.js";import y from"../../OptimizedGeometry.js";import g from"../../../support/FieldsIndex.js";import{jsonAdapter as F}from"../../../../geometry/geometryAdapters/json.js";import{checkProjectionSupport as h}from"../../data/projectionSupport.js";import{createDrawingInfo as I}from"./clientSideDefaults.js";import N from"../../data/FeatureStore.js";import _ from"../../data/QueryEngine.js";import{readRows as x,inferDelimiter as b,parseRows as T}from"../csv/csv.js";const j=I("esriGeometryPoint"),w=["esriFieldTypeSmallInteger","esriFieldTypeInteger","esriFieldTypeSingle","esriFieldTypeDouble","esriFieldTypeLong"],E=["lat","latitude","latitude83","latdecdeg","lat_dd","y","ycenter","point-y"],D=["lon","lng","long","longitude","longitude83","longdecdeg","long_dd","x","xcenter","point-x"],q=/^((jan(uary)?)|(feb(ruary)?)|(mar(ch)?)|(apr(il)?)|(may)|(jun(e)?)|(jul(y)?)|(aug(ust)?)|(sep(tember)?)|(oct(ober)?)|(nov(ember)?)|(dec(ember)?)|(am)|(pm)|(gmt)|(utc))$/i,v=["csv"],S=[0,0];class C{constructor(e,t){this.x=e,this.y=t}}const V=function(){const e=f(),t=new RegExp("^"+e.regexp+"$"),i=new RegExp("["+e.group+"\\s\\xa0]","g"),n=e.factor;return function(r){const o=t.exec(r);if(e.factor=n,!o)return NaN;let l=o[1];if(!o[1]){if(!o[2])return NaN;l=o[2],e.factor*=-1}return l=l.replace(i,"").replace(e.decimal,"."),+l*e.factor}}(),k="isInteger"in Number?Number.isInteger:e=>"number"==typeof e&&isFinite(e)&&Math.floor(e)===e;export default class{constructor(){this._fieldsIndex=null,this._queryEngine=null}destroy(){this._queryEngine&&this._queryEngine&&this._queryEngine.destroy(),this._queryEngine=null,this._fieldsIndex=null}async load(e,t={}){const[i]=await o([this._fetch(e.url,t),this._checkProjection(t&&e.parsing&&e.parsing.spatialReference)]),n=this._parse(i,e);if(this._queryEngine=this._createQueryEngine(i,n),n.layerDefinition.extent=this._queryEngine.fullExtent,n.layerDefinition.timeInfo){const{start:e,end:t}=this._queryEngine.timeExtent;n.layerDefinition.timeInfo.timeExtent=[e,t]}return n}async applyEdits(){throw new i("csv-source:editing-not-supported","applyEdits() is not supported on CSVLayer")}async queryFeatures(e={},t={}){return this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return this._queryEngine.executeQueryForExtent(e,t.signal)}async _fetch(e,t){if(!e)throw new i("csv-source:invalid-source","url not defined");const r=n(e);return(await c(r.path,{query:r.query,responseType:"text",signal:t.signal})).data}_parse(e,n){const o=n.parsing||{},l={columnDelimiter:o.columnDelimiter,layerDefinition:null,locationInfo:{latitudeFieldName:o.latitudeField,longitudeFieldName:o.longitudeField}},s=x(e);let{value:a}=s.next();if(!a)throw new i("csv","CSV is empty",{csv:e});if(a=a.trim(),!o.columnDelimiter){const e=b(a);if(!e)throw new i("csv-source:invalid-delimiter","Unable to detect the delimiter from CSV");l.columnDelimiter=e}const d=a.split(l.columnDelimiter),u=l.layerDefinition={name:r(n.url,v)||"csv",drawingInfo:j,geometryType:"esriGeometryPoint",objectIdField:null,fields:[],timeInfo:o.timeInfo,extent:{xmin:Number.POSITIVE_INFINITY,ymin:Number.POSITIVE_INFINITY,xmax:Number.NEGATIVE_INFINITY,ymax:Number.NEGATIVE_INFINITY,spatialReference:o.spatialReference||{wkid:102100}}};if(!o.latitudeField||!o.longitudeField){const e=this._inferLocationInfo(d);if(!o.longitudeField&&!e.longitudeFieldName||!o.latitudeField&&!e.latitudeFieldName)throw new i("csv","Unable to identify latitudeField and/or longitudeField from CSV");l.locationInfo={longitudeFieldName:o.longitudeField||e.longitudeFieldName,latitudeFieldName:o.latitudeField||e.latitudeFieldName}}const c=this._inferFields(s,l.columnDelimiter,d,l.locationInfo);if(o.fields&&o.fields.length){const e=new Map;for(const t of o.fields)e.set(t.name.toLowerCase(),t);for(const i of c){const n=e.get(i.name.toLowerCase());if(n){const e=i.name;t(i,n),i.name=e}}}u.fields=c;if(!u.fields.some((e=>"esriFieldTypeOID"===e.type&&(u.objectIdField=e.name,!0)))){const e={name:"__OBJECTID",alias:"__OBJECTID",type:"esriFieldTypeOID",editable:!1,nullable:!1};u.objectIdField=e.name,u.fields.unshift(e)}if(this._fieldsIndex=new g(u.fields),u.timeInfo){const e=u.timeInfo;if(e.startTimeField){const t=this._fieldsIndex.get(e.startTimeField);t?(e.startTimeField=t.name,t.type="esriFieldTypeDate"):e.startTimeField=null}if(e.endTimeField){const t=this._fieldsIndex.get(e.endTimeField);t?(e.endTimeField=t.name,t.type="esriFieldTypeDate"):e.endTimeField=null}if(e.trackIdField){const t=this._fieldsIndex.get(e.trackIdField);e.trackIdField=t?t.name:null}e.startTimeField||e.endTimeField||(u.timeInfo=null)}return l}_inferLocationInfo(e){let t=null,i=null;const n=t=>e.find((e=>e.toLowerCase()===t));return D.some((e=>(t=n(e),!!t))),E.some((e=>(i=n(e),!!i))),{longitudeFieldName:t,latitudeFieldName:i}}_inferFields(e,t,i,n){const r=[],o=T(e,i,t),l=[];e:for(;l.length<10;){const{value:e,done:t}=o.next();if(t)break e;l.push(e)}for(const e of i)if(e===n.longitudeFieldName||e===n.latitudeFieldName)r.push({name:e,type:"esriFieldTypeDouble",alias:e});else{const t=l.map((t=>t[e])),i=this._inferFieldType(t),n={name:e,type:null,alias:e};switch(i){case"integer":n.type="esriFieldTypeInteger";break;case"double":n.type="esriFieldTypeDouble";break;case"date":n.type="esriFieldTypeDate",n.length=36;break;default:n.type="esriFieldTypeString",n.length=255}r.push(n)}return r}_inferFieldType(e){if(!e.length)return"string";const t=/[^+-.,0-9]/;return e.map((e=>{let i=!1;if(""!==e){if(t.test(e))i=!0;else{let t=V(e);if(!isNaN(t))return/[.,]/.test(e)||!k(t)||t>214783647||t<-214783648?"double":"integer";if(-1===e.indexOf("E"))i=!0;else{if(t=Number(e),!isNaN(t))return"double";if(-1===e.indexOf(","))i=!0;else{if(e=e.replace(",","."),t=Number(e),!isNaN(t))return"double";i=!0}}}if(i){if(!/^[-]?\d*[.,]?\d*$/.test(e)){const t=new Date(e);return this._isValidDate(t,e)?"date":"string"}return"string"}return"string"}})).reduce(((e,t)=>void 0===e||e===t?t:"string"===e||"string"===t?"string":"double"===e||"double"===t?"double":void 0))}_isValidDate(t,i){if(!t||"[object Date]"!==Object.prototype.toString.call(t)||isNaN(t.getTime()))return!1;let n=!0;if(e("chrome")&&/\d+\W*$/.test(i)){const e=i.match(/[a-zA-Z]{2,}/);if(e){let t=!1,i=0;for(;!t&&i<=e.length;)t=!q.test(e[i]),i++;n=!t}}return n}_createQueryEngine(e,t){const{latitudeFieldName:i,longitudeFieldName:n}=t.locationInfo,{objectIdField:r,fields:o,extent:a,timeInfo:c}=t.layerDefinition;let f=[];const g=[],h=new Set,I=new Set,b=[];for(const{name:e,type:t}of o)"esriFieldTypeDate"===t?h.add(e):w.indexOf(t)>-1&&I.add(e),e!==r&&b.push(e);let j=0;const E=x(e);E.next();const D=T(E,b,t.columnDelimiter);e:for(;;){const{value:e,done:t}=D.next();if(t)break e;const o=this._parseCoordinateValue(e[i]),l=this._parseCoordinateValue(e[n]);if(null!=l&&null!=o&&!isNaN(o)&&!isNaN(l)){e[i]=o,e[n]=l;for(const t in e)if(t!==i&&t!==n)if(h.has(t)){const i=new Date(e[t]);e[t]=this._isValidDate(i,e[t])?i.getTime():null}else if(I.has(t)){const i=V(e[t]);isNaN(i)?e[t]=null:e[t]=i}e[r]=j,j++,f.push(new C(l,o)),g.push(e)}}if(!l({wkid:4326},a.spatialReference))if(s(a.spatialReference))for(const e of f)[e.x,e.y]=u(e.x,e.y,S);else f=m(F,f,d.WGS84,a.spatialReference,null);const q=new N({geometryType:"esriGeometryPoint",hasM:!1,hasZ:!1}),v=new _({fields:t.layerDefinition.fields,geometryType:"esriGeometryPoint",hasM:!1,hasZ:!1,timeInfo:c,objectIdField:r,spatialReference:a.spatialReference||{wkid:4326},cacheSpatialQueries:!0,featureStore:q}),k=[];for(let e=0;e<f.length;e++){const{x:t,y:i}=f[e],n=g[e];n[r]=e+1,k.push(new p(new y([],[t,i]),n,null,n[r]))}return q.addMany(k),v}_parseCoordinateValue(e){if(null==e||""===e)return null;let t=V(e);return(isNaN(t)||Math.abs(t)>181)&&(t=parseFloat(e)),t}async _checkProjection(e){try{await h(a,e)}catch{throw new i("csv-layer","Projection not supported")}}}export{E as csvLatitudeFieldNames,D as csvLongitudeFieldNames};

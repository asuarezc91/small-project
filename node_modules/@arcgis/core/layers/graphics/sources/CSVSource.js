/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as t}from"../../../chunks/tslib.es6.js";import e from"../../../core/has.js";import{isSome as o}from"../../../core/maybe.js";import"../../../core/Logger.js";import"../../../core/accessorSupport/ensureType.js";import{property as r}from"../../../core/accessorSupport/decorators/property.js";import{subclass as i}from"../../../core/accessorSupport/decorators/subclass.js";import"../../../core/urlUtils.js";import"../../../core/uuid.js";import"../../../portal/support/resourceExtension.js";import{resolve as s}from"../../../core/promiseUtils.js";import n from"../../../geometry/Extent.js";import"../../../geometry.js";import l from"../../../core/Loadable.js";import{open as c}from"../../../core/workers/workers.js";import u from"../../../tasks/support/FeatureSet.js";let a=class extends l{constructor(t){super(t),this.type="csv"}load(t){const e=o(t)?t.signal:null;return this.addResolvingPromise(this._startWorker(e)),s(this)}destroy(){var t;null==(t=this._connection)||t.close(),this._connection=null}openPorts(){return this.load().then((()=>this._connection.openPorts()))}queryFeatures(t,e={}){return this.load(e).then((()=>this._connection.invoke("queryFeatures",t?t.toJSON():null,e))).then((t=>u.fromJSON(t)))}queryFeaturesJSON(t,e={}){return this.load(e).then((()=>this._connection.invoke("queryFeatures",t?t.toJSON():null,e)))}queryFeatureCount(t,e={}){return this.load(e).then((()=>this._connection.invoke("queryFeatureCount",t?t.toJSON():null,e)))}queryObjectIds(t,e={}){return this.load(e).then((()=>this._connection.invoke("queryObjectIds",t?t.toJSON():null,e)))}queryExtent(t,e={}){return this.load(e).then((()=>this._connection.invoke("queryExtent",t?t.toJSON():null,e))).then((t=>({count:t.count,extent:n.fromJSON(t.extent)})))}async _startWorker(t){this._connection=await c("CSVSourceWorker",{strategy:e("feature-layers-workers")?"dedicated":"local",signal:t});const o=await this._connection.invoke("load",{url:this.url,parsing:{columnDelimiter:this.delimiter,fields:this.fields&&this.fields.map((t=>t.toJSON())),latitudeField:this.latitudeField,longitudeField:this.longitudeField,spatialReference:this.spatialReference&&this.spatialReference.toJSON(),timeInfo:this.timeInfo&&this.timeInfo.toJSON()}},{signal:t});this.locationInfo=o.locationInfo,this.sourceJSON=o.layerDefinition,this.columnDelimiter=o.columnDelimiter}};t([r()],a.prototype,"type",void 0),t([r()],a.prototype,"url",void 0),t([r()],a.prototype,"delimiter",void 0),t([r()],a.prototype,"fields",void 0),t([r()],a.prototype,"latitudeField",void 0),t([r()],a.prototype,"longitudeField",void 0),t([r()],a.prototype,"spatialReference",void 0),t([r()],a.prototype,"timeInfo",void 0),t([r()],a.prototype,"locationInfo",void 0),t([r()],a.prototype,"sourceJSON",void 0),t([r()],a.prototype,"columnDelimiter",void 0),a=t([i("esri.layers.graphics.sources.CSVSource")],a);var p=a;export default p;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import"../../core/has.js";import{isSome as r}from"../../core/maybe.js";import"../../core/Logger.js";import"../../core/accessorSupport/ensureType.js";import{property as t}from"../../core/accessorSupport/decorators/property.js";import{subclass as o}from"../../core/accessorSupport/decorators/subclass.js";import s from"../../core/Error.js";import"../../core/urlUtils.js";import"../../core/uuid.js";import"../../portal/support/resourceExtension.js";import{reject as p,eachAlways as a}from"../../core/promiseUtils.js";import{calculateTolerance as i}from"../../renderers/support/clickToleranceUtils.js";const c=c=>{let l=class extends c{async fetchPopupFeatures(e,t){const{layer:o}=this;if(!e)return p(new s("tilelayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:o}));if("tile"!==o.type)return p(new s("tilelayerview:fetchPopupFeatures","Layer type should be 'tile'",{type:o.type}));const c=this.get("view.scale"),l=o.allSublayers.toArray().filter((e=>{const r=0===e.minScale||c<=e.minScale,t=0===e.maxScale||c>=e.maxScale;return e.popupTemplate&&e.popupEnabled&&e.visible&&r&&t}));return a(l.map((async o=>{const s=o.createQuery(),p=r(t)?t.event:null,a=i({renderer:o.renderer,event:p});s.geometry=this.createFetchPopupFeaturesQueryGeometry(e,a),s.outFields=await o.popupTemplate.getRequiredFields();return(await o.queryFeatures(s)).features}))).then((e=>[].concat(...e.map((e=>e.value)).filter(Boolean))))}};return e([t()],l.prototype,"layer",void 0),l=e([o("esri.layers.mixins.TileLayerView")],l),l};export{c as TileLayerView};

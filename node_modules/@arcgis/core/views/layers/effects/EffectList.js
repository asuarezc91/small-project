/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{clone as e}from"../../../core/lang.js";import t from"../../../core/Logger.js";import s from"../../../core/Error.js";import{getNamedColor as r}from"../../../colorUtils.js";import{BloomEffect as n,DropShadowEffect as f,BlurEffect as i,HueRotateEffect as c,OpacityEffect as l,ColorMatrixEffect as o}from"./effects.js";import{parse as a}from"./parser.js";function h(e){if(!e)return[];if("string"==typeof e){const t=a(e);return t.error?t.error:[{scale:-1,effects:t.effects}]}const t=[];for(const r of e){if(!isFinite(r.scale)||r.scale<=0)return new s("effect:invalid-scale","scale must be finite and greater than 0",{stop:r});const e=a(r.value);if(e.error)return e.error;t.push({scale:r.scale,effects:e.effects})}t.sort(((e,t)=>t.effects.length-e.effects.length));for(let e=0;e<t.length-1;e++){if(!_(t[e].effects,t[e+1].effects))return new s("effect:interpolation-impossible","Cannot interpolate by scale between 2 lists of mixed effects",{a:t[e].effects,b:t[e+1].effects});g(t[e].effects,t[e+1].effects)}return t.sort(((e,t)=>t.scale-e.scale)),t}function u(e){switch(e.type){case"grayscale":case"sepia":case"invert":return new o(e.type,0);case"saturate":case"brightness":case"contrast":return new o(e.type,1);case"opacity":return new l(1);case"hue-rotate":return new c(0);case"blur":return new i(0);case"drop-shadow":return new f(0,0,0,[...r("transparent")]);case"bloom":return new n(0,0,0)}}function _(e,t){const s=e.length>t.length?e:t;return(e.length>t.length?t:e).every(((e,t)=>e.type===s[t].type))}function g(e,t){const s=e.length>t.length?e:t,r=e.length>t.length?t:e;for(let e=r.length;e<s.length;e++)r.push(u(s[e]))}function p(e,t,s){var r,n,f,i;if(null==(r=e[0])||!r.effects||null==(n=t[0])||!n.effects)return!0;return!((-1===(null==(f=e[0])?void 0:f.scale)||-1===(null==(i=t[0])?void 0:i.scale))&&(e.length>1||t.length>1)&&s<=0)&&_(e[0].effects,t[0].effects)}function m(e,t,s){var r,n;const f=e.length>t.length?e:t,i=e.length>t.length?t:e,c=i[i.length-1],l=null!=(r=null==c?void 0:c.scale)?r:s,o=null!=(n=null==c?void 0:c.effects)?n:[];for(let e=i.length;e<f.length;e++)i.push({scale:l,effects:[...o]});for(let e=0;e<f.length;e++)i[e].scale=-1===i[e].scale?s:i[e].scale,f[e].scale=-1===f[e].scale?s:f[e].scale,g(i[e].effects,f[e].effects)}function d(e,t,s){return e+(t-e)*s}export default class{constructor(e=200){this.duration=e,this._from=null,this._to=null,this._final=null,this._current=[],this._time=0,this._effect="",this._effects=[],this._scale=0}get effect(){return this._effect}set effect(e){if(e=e||"",this._effect===e)return;this._effect=e;const s=h(e);Array.isArray(s)?this._transitionTo(s):(this._transitionTo([]),t.getLogger("esri.views.layers.effects.EffectList").warn("Invalid Effect",{effect:e,error:s}))}get hasEffects(){return this.transitioning||!!this._effects.length}get effects(){return this._effects}get scale(){return this._scale}get transitioning(){return null!==this._to}transitionStep(e,t){this._applyTimeTransition(e),this._updateForScale(t)}_transitionTo(t){this.scale>0&&p(this._current,t,this.scale)?(this._final=t,this._to=e(t),m(this._current,this._to,this.scale),this._from=e(this._current),this._time=0):(this._from=this._to=this._final=null,this._current=t),this._effects=this._current[0]?e(this._current[0].effects):[]}_applyTimeTransition(t){if(!this._to)return;this._time+=t;const s=Math.min(1,this._time/this.duration);for(let e=0;e<this._current.length;e++){const t=this._current[e],r=this._from[e],n=this._to[e];t.scale=d(r.scale,n.scale,s);for(let e=0;e<t.effects.length;e++){const f=t.effects[e],i=r.effects[e],c=n.effects[e];f.interpolate(i,c,s)}}1===s&&(this._current=this._final,this._effects=this._current[0]?e(this._current[0].effects):[],this._from=this._to=this._final=null)}_updateForScale(e){if(0===this._current.length)return;this._scale=e;const t=this._current,s=this._current.length-1;let r,n,f=1;if(1===t.length||e>=t[0].scale)n=r=t[0].effects;else if(e<=t[s].scale)n=r=t[s].effects;else for(let i=0;i<s;i++){const s=t[i],c=t[i+1];if(s.scale>=e&&c.scale<=e){f=(e-s.scale)/(c.scale-s.scale),r=s.effects,n=c.effects;break}}for(let e=0;e<this._effects.length;e++){this._effects[e].interpolate(r[e],n[e],f)}}}export{p as canInterpolateEffectStops,_ as canInterpolateEffects,h as convertEffectToStops,m as normalizeEffectStops,g as normalizeEffects};

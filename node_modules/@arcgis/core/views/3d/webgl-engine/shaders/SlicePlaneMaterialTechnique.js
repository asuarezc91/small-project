/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{ReloadableShaderModule as r}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as e}from"../core/shaderTechnique/ShaderTechnique.js";import{Default3D as i}from"../lib/DefaultVertexAttributeLocations.js";import o from"../../../webgl/Program.js";import{makePipelineState as t,separateBlendingParams as a,defaultColorWriteParams as n}from"../../../webgl/renderState.js";import{View as s}from"../core/shaderLibrary/util/View.glsl.js";import{S as l}from"../../../../chunks/SlicePlaneMaterial.glsl.js";class m extends e{initializeProgram(r){const e=m.shader.get().build();return new o(r.rctx,e.generateSource("vertex"),e.generateSource("fragment"),i)}bindPass(r,e,i){s.bindProjectionMatrix(this.program,i.camera.projectionMatrix),this.program.setUniform4fv("backgroundColor",e.backgroundColor),this.program.setUniform4fv("gridColor",e.gridColor),this.program.setUniform1f("gridWidth",e.gridWidth)}bindDraw(r){s.bindView(this.program,r)}initializePipeline(){return t({blending:a(1,1,771,771),depthTest:{func:513},colorWrite:n})}}m.shader=new r(l,(()=>import("./SlicePlaneMaterial.glsl.js")));export{m as SlicePlaneMaterialTechnique};

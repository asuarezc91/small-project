/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import{ReloadableShaderModule as r}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as o}from"../core/shaderTechnique/ShaderTechnique.js";import{ShaderTechniqueConfiguration as t,parameter as i}from"../core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as n}from"../lib/DefaultVertexAttributeLocations.js";import s from"../../../webgl/Program.js";import{makePipelineState as a,simpleBlendingParams as c,defaultColorWriteParams as u,separateBlendingParams as l}from"../../../webgl/renderState.js";import{C as h}from"../../../../chunks/Compositing.glsl.js";class p extends o{initializeProgram(e){const r=p.shader.get().build(this.configuration);return new s(e.rctx,r.generateSource("vertex"),r.generateSource("fragment"),n)}initializePipeline(){if(2===this.configuration.function)return a({colorWrite:{r:!1,g:!0,b:!1,a:!1}});switch(this.configuration.alphaMode){case 0:return a({colorWrite:u});case 1:return a({blending:l(770,1,771,771),colorWrite:u});default:return a({blending:c(1,771),colorWrite:u})}}}p.shader=new r(h,(()=>import("./Compositing.glsl.js")));class d extends t{constructor(){super(...arguments),this.function=0,this.alphaMode=0,this.hasOpacityFactor=!1}}e([i({count:4})],d.prototype,"function",void 0),e([i({count:3})],d.prototype,"alphaMode",void 0),e([i()],d.prototype,"hasOpacityFactor",void 0);export{p as CompositingTechnique,d as CompositingTechniqueConfiguration};

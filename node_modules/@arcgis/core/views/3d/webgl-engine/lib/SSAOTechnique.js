/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import{ReloadableShaderModule as r}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as t}from"../core/shaderTechnique/ShaderTechnique.js";import{ShaderTechniqueConfiguration as o,parameter as s}from"../core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as i}from"./DefaultVertexAttributeLocations.js";import a from"../../../webgl/Program.js";import{makePipelineState as u,defaultColorWriteParams as n}from"../../../webgl/renderState.js";import{S as p}from"../../../../chunks/SSAO.glsl.js";class m extends t{initializeProgram(e){const r=m.shader.get(),t=this.configuration,o=r.build({output:t.output,samples:t.samples,radius:t.radius});return new a(e.rctx,o.generateSource("vertex"),o.generateSource("fragment"),i)}initializePipeline(){return u({colorWrite:n})}}m.shader=new r(p,(()=>import("../shaders/SSAO.glsl.js")));class c extends o{constructor(){super(...arguments),this.output=0,this.samples=64,this.radius=4}}e([s({count:2})],c.prototype,"output",void 0),e([s()],c.prototype,"samples",void 0),e([s()],c.prototype,"radius",void 0);export{m as SSAOTechnique,c as SSAOTechniqueConfiguration};

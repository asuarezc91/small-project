/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{isNone as e}from"../../../../core/maybe.js";import{TextRenderParameters as t}from"./TextRenderParameters.js";class i{constructor(e,i,r=2048){this.text=e,this.maxSize=r,this._renderPixelRatio=null,this._displayWidth=null,this.parameters=i instanceof t?i:new t(i),this.key=`${this.parameters.key}--${e}`,this.textLines=e.split(/\r?\n/),this.lineHeight=this.computeLineHeight()}get displayWidth(){return e(this._displayWidth)&&(this._displayWidth=this.computeTextWidth()),this._displayWidth}get displayHeight(){return this.lineHeight*this.textLines.length}get renderedWidth(){return Math.round(this.displayWidth*this.renderPixelRatio)}get renderedHeight(){return Math.round(this.displayHeight*this.renderPixelRatio)}get renderedLineHeight(){return Math.round(this.lineHeight*this.renderPixelRatio)}get renderedFontSize(){return this.parameters.definition.size*this.renderPixelRatio}get renderedHaloSize(){return this.parameters.haloSize*this.renderPixelRatio}get renderPixelRatio(){if(e(this._renderPixelRatio)){const e=this.parameters.definition.pixelRatio;this.maxSize>0?this._renderPixelRatio=Math.min(e,Math.min(this.maxSize/(this.displayWidth*e),this.maxSize/(this.displayHeight*e))):this._renderPixelRatio=e}return this._renderPixelRatio}render(e,t=0,i=0){const s=this.renderedLineHeight,n=this.renderedHaloSize,a=(o=e.textAlign,h=this.renderedWidth,("center"===o?.5*h:"right"===o?h:0)+n);var o,h;const l=n+r;e.save();n>0&&this.renderHalo(e,a,l,t,i),this.setFontProperties(e,this.renderedFontSize),i+=l,t+=a;for(const r of this.textLines)e.globalCompositeOperation="destination-out",e.fillStyle="rgb(0, 0, 0)",e.fillText(r,t,i),e.globalCompositeOperation="source-over",e.fillStyle=this.parameters.fillStyle,e.fillText(r,t,i),i+=s;e.restore()}renderHalo(e,t,i,r,s){const h=this.renderedWidth,l=this.renderedHeight,d=n(a,Math.max(h,o),Math.max(l,o)),p=d.getContext("2d");p.clearRect(0,0,h,l),this.setFontProperties(p,this.renderedFontSize),p.fillStyle=this.parameters.haloStyle,p.strokeStyle=this.parameters.haloStyle;const c=this.renderedHaloSize<3;p.lineJoin=c?"miter":"round",c?this.renderHaloEmulated(p,t,i):this.renderHaloNative(p,t,i),e.globalAlpha=this.parameters.definition.halo.color[3],e.drawImage(d,0,0,h,l,r,s,h,l),e.globalAlpha=1}renderHaloEmulated(e,t,i){const r=this.renderedLineHeight,n=this.renderedHaloSize;for(const a of this.textLines){for(const[r,o]of s)e.fillText(a,t+n*r,i+n*o);i+=r}}renderHaloNative(e,t,i){const r=this.renderedLineHeight,s=this.renderedHaloSize;for(const n of this.textLines){const a=2*s,o=5,h=.1;for(let r=0;r<o;r++){const s=1-(o-1)*h+r*h;e.lineWidth=s*a,e.strokeText(n,t,i)}i+=r}}setFontProperties(e,t){const i=this.parameters.definition.font,r=`${i.style} ${i.weight} ${t}px ${i.family}, sans-serif`;e.font=r,e.textAlign="left",e.textBaseline="top"}computeTextWidth(){const e=n(a,o,o).getContext("2d");this.setFontProperties(e,this.parameters.definition.size);let t=0;for(const i of this.textLines)t=Math.max(t,e.measureText(i).width);const i=this.parameters.definition.font;return("italic"===i.style||"oblique"===i.style||"string"==typeof i.weight&&("bold"===i.weight||"bolder"===i.weight)||"number"==typeof i.weight&&i.weight>600)&&(t+=.3*e.measureText("A").width),t+=2*this.parameters.haloSize,Math.round(t)}computeLineHeight(){const e=1.275*this.parameters.definition.size;return Math.ceil(e+2*this.parameters.haloSize)+r}}const r=1,s=[];{const e=16;for(let t=0;t<360;t+=360/e)s.push([Math.cos(Math.PI*t/180),Math.sin(Math.PI*t/180)])}function n(e,t,i){return e.canvas||(e.canvas=document.createElement("canvas")),e.canvas.width=t,e.canvas.height=i,e.canvas}const a={canvas:null},o=512;export default i;export{i as TextRenderer,n as getTextHelperCanvas};

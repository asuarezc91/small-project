/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import{ReloadableShaderModule as r}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as t}from"../core/shaderTechnique/ShaderTechnique.js";import{ShaderTechniqueConfiguration as o,parameter as i}from"../core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as s}from"./DefaultVertexAttributeLocations.js";import a from"../../../webgl/Program.js";import{makePipelineState as n,separateBlendingParams as l,defaultColorWriteParams as h}from"../../../webgl/renderState.js";import{T as c}from"../../../../chunks/TextureOnly.glsl.js";class u extends t{initializeProgram(e){const r=u.shader.get().build();return new a(e.rctx,r.generateSource("vertex"),r.generateSource("fragment"),s)}initializePipeline(){return this.configuration.hasAlpha?n({blending:l(770,1,771,771),colorWrite:h}):n({colorWrite:h})}}u.shader=new r(c,(()=>import("../core/shaderLibrary/util/TextureOnly.glsl.js")));class m extends o{constructor(){super(...arguments),this.hasAlpha=!1}}e([i()],m.prototype,"hasAlpha",void 0);export{u as TextureTechnique,m as TextureTechniqueConfiguration};

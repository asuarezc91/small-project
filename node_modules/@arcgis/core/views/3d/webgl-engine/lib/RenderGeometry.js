/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{unwrapOr as t,isSome as r}from"../../../../core/maybe.js";import{c as i}from"../../../../chunks/vec3f64.js";import{i as s}from"../../../../chunks/vec3.js";import{maxScale as a}from"../../support/mathUtils.js";import{c as n}from"../../../../chunks/mat4.js";import{I as e,a as o}from"../../../../chunks/mat4f64.js";import{computeAttachmentOriginTriangles as h}from"./geometryDataUtils.js";import{VertexAttrConstants as m}from"./Util.js";import{generateObject3DStateId as u}from"./Object3DStateSet.js";import{addObject3DStateID as d,removeObject3DStateID as f}from"../materials/renderers/utils.js";export default class{constructor(t,r,s,a,n,e,o){this.uniqueName=null,this.shaderTransformationDirty=!0,this.data=t.toRenderData(),this.boundingInfo=r,this.material=s,this.origin=null,this.center=i(),this.bsRadius=0,this.transformation=null,this.calculateShaderTransformation=n,a&&this.updateTransformation(a,e),this.castShadow=o,this.instanceParameters={highlights:null,occludees:null,visible:!0}}updateTransformation(t,r){this.transformation=t,this.shaderTransformationDirty=!0,this.bsRadius=this.getBoundingSphere(t,r,this.center)}shaderTransformationChanged(){this.shaderTransformationDirty=!0}getBoundingSphere(t,r,i){return r=r||a(t),s(i,this.boundingInfo.getCenter(),t),this.boundingInfo.getBSRadius()*r}get hasShaderTransformation(){return!!this.calculateShaderTransformation}getShaderTransformation(){return this.calculateShaderTransformation?(this.shaderTransformationDirty&&(this.shaderTransformation||(this.shaderTransformation=o()),n(this.shaderTransformation,this.calculateShaderTransformation(t(this.transformation,e))),this.shaderTransformationDirty=!1),this.shaderTransformation):t(this.transformation,e)}computeAttachmentOrigin(t){if(this.material.computeAttachmentOrigin)return!!this.material.computeAttachmentOrigin(this,t)&&(r(this.transformation)&&s(t,t,this.transformation),!0);const i=this.getIndices(m.POSITION),a=this.getAttribute(m.POSITION);return!!h(a,i,t)&&(r(this.transformation)&&s(t,t,this.transformation),!0)}getIndices(t){return"indices"in this.data?this.data.indices[t]:null}getAttribute(t){return"vertexAttr"in this.data?this.data.vertexAttr[t]:null}addHighlight(){const t=u(0),r=this.instanceParameters;return r.highlights=d(r.highlights,t),t}removeHighlight(t){const r=this.instanceParameters;r.highlights=f(r.highlights,t)}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{maxScale as t}from"../../support/mathUtils.js";import{assert as e,logWithBase as i}from"../lib/Util.js";import{fromValues as o}from"../lib/localOrigin.js";import n from"../lib/RenderGeometry.js";import r from"../lib/ModelDirtySet.js";const s=e,a=i;class d{constructor(){this.dirtySet=new r(this),this._id2origin={},this._content=new Array(5);for(let t=0;t<5;++t)this._content[t]=new Map}getAll(t){const e=this._content[t];return s(void 0!==e),e}get(t,e){return this.getAll(t).get(e)}add(t,e){const i=this._content[t];s(void 0!==i);const o=e.id;s(!i.has(o),"Model/Stage already contains object to be added"),i.set(o,e),0===t&&this.notifyDirty(e,"layerAdded")}remove(t,e){const i=this._content[t];s(void 0!==i);const o=i.get(e);return s(void 0!==o,"Model/Stage doesn't contain object to be removed"),i.delete(e),4===t&&o.unload(),0===t&&this.notifyDirty(o,"layerRemoved"),o}getDirtySet(){return this.dirtySet}notifyDirty(t,e,i){this.dirtySet.handleUpdate(t,e,i)}getOrigin(t,e,i=10){let n=0;const r=e*i/1e4;r>1&&(n=Math.ceil(a(r,2)));const s=1e4*Math.pow(2,n),d=Math.round(t[0]/s),l=Math.round(t[1]/s),c=Math.round(t[2]/s),g=n+"_"+d+"_"+l+"_"+c;let h=this._id2origin[g];return null==h&&(h=o(d*s,l*s,c*s,g),this._id2origin[g]=h),h}getGeometryRenderGeometries(e,i,o){const r=i.geometry,s=e.getCombinedStaticTransformation(i),a=t(s),d=i.origin,l=new n(r.data,r.boundingInfo,i.material,s,i.shaderTransformation,a,e.castShadow);l.uniqueName=i.id,l.origin=d||this.getOrigin(l.center,l.bsRadius),l.instanceParameters=i.instanceParameters,o.push(l)}updateRenderGeometryTransformation(t,e,i){const o=t.getCombinedStaticTransformation(e,i.transformation);i.updateTransformation(o);const n=this.getOrigin(i.center,i.bsRadius);return i.origin!==n}getStats(){const t={};for(let e=0;e<5;++e)t[e]=this.getAll(e).size;return{contentTypes:t,dirtySet:this.dirtySet.formatDebugInfo()}}validateObject(t){const e=t.geometryRecords;for(let t=0;t<e.length;++t){const i=e[t];s(null!=this.get(2,i.geometry.id)),s(null!=this.get(3,i.material.id))}}validateLayer(t){const e=t.getObjects();for(let t=0;t<e.length;++t){const i=this.get(1,e[t].id);s(null!=i)}}}export{d as Model};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../../chunks/tslib.es6.js";import{isSome as t}from"../../../../../../core/maybe.js";import{z as s}from"../../../../../../chunks/vec3.js";import{b as o}from"../../../../../../chunks/vec4f64.js";import{v as r,g as i,c as a}from"../../../../../../chunks/vec4.js";import{f as l}from"../../../../../../chunks/vec3f32.js";import{defaultMaskAlphaCutoff as n}from"../../../core/shaderLibrary/util/AlphaDiscard.glsl.js";import{f as h}from"../../../../../../chunks/vec4f32.js";import{a as c}from"../../../../../../chunks/ComponentShader.glsl.js";import{ComponentTechniqueConfiguration as p,ComponentTechnique as u}from"./ComponentTechnique.js";import{MaterialBase as d,parameter as m,parameterBlock as v,MaterialParameterBlock as y}from"../../../core/material/MaterialBase.js";class b extends d{constructor(){super(),this.baseColor=h(1,1,1,1),this.usePBR=!1,this.mrrFactors=l(1,1,.5),this.emissiveFactor=l(0,0,0),this.baseColorTexture=null,this.metallicRoughnessTexture=null,this.emissionTexture=null,this.occlusionTexture=null,this.normalTexture=null,this.overlayTexOffset=o(-1,-1,-1,-1),this.overlayTexScale=o(0,0,0,0),this.overlayColorInner=null,this.overlayColorOuter=null,this.overlayHighlightInner=null,this.overlayHighlightOuter=null,this.overlayNormalInner=null,this.overlayNormalOuter=null,this.objectOpacity=1,this.commonMaterialParameters=new x,this.componentParameters=new g,this.alphaCutoff=n,this.alphaDiscardMode=1,this.isIntegratedMesh=!1,this.polygonOffsetEnabled=!1,this.ellipsoidMode=1,this.sceneHasOcludees=!1,this._techniqueConfig=new p}dispose(e){this._technique&&(e.release(this._technique),this._technique=void 0),this.baseColorTexture=null,this.metallicRoughnessTexture=null,this.emissionTexture=null,this.occlusionTexture=null,this.normalTexture=null}getTechnique(e,s,o){const r=this._techniqueConfig;if(r.hasVertexColors=o.colors,r.hasNormals=o.normals,r.vertexTextureCoordinates=o.textureCoordinates,r.usePBR=this.usePBR,r.hasMetalnessAndRoughnessTexture=t(this.metallicRoughnessTexture),r.hasEmissionTexture=t(this.emissionTexture),r.hasOcclusionTexture=t(this.occlusionTexture),r.hasNormalTexture=t(this.normalTexture),r.transparencyPassType=0===s.identifier&&null!=s.transparencyPassType?s.transparencyPassType:3,r.ellipsoidMode=this.ellipsoidMode,this.dirty){r.componentData=this.componentParameters.type,r.cullFace=this.commonMaterialParameters.cullFace,r.doubleSidedMode=this.commonMaterialParameters.doubleSided?1:0,r.baseColorTexture=t(this.baseColorTexture);const e=this._computeWhichMaterialPass();r.blendingEnabled=1===e||2===e,r.alphaDiscardMode=this.alphaDiscardMode,r.integratedMeshMode=this.isIntegratedMesh?this.overlayColorInner||this.overlayColorOuter?this.overlayNormalInner||this.overlayNormalOuter?3:2:1:0,r.polygonOffsetEnabled=this.polygonOffsetEnabled,this._setClean()}return r.slicePlaneEnabled=s.slicePlaneEnabled&&this.commonMaterialParameters.slicePlaneEnabled,1===s.identifier?(r.output=3,r.vertexDiscardMode=0):2===s.identifier?(r.output=4,r.vertexDiscardMode=0):(2===this._computeWhichMaterialPass()?r.vertexDiscardMode=s.transparent?2:1:r.vertexDiscardMode=0,r.output=function(e){switch(e){case 0:return 0;case 1:return 7;case 2:return 1;case 3:return 2;case 4:return 8}}(s.subPass),1===s.subPass&&(r.sceneHasOcludees=s.sceneHasOcludees),0===s.subPass?(r.receiveAmbientOcclusion=s.ambientOcclusionEnabled,r.sceneHasOcludees=s.sceneHasOcludees,r.receiveShadows=s.shadowsEnabled,r.ssrEnabled=s.ssrParams.ssrEnabled):(r.receiveAmbientOcclusion=!1,r.receiveShadows=!1)),this._technique=e.repository.acquireAndReleaseExisting(u,r,this._technique),this._technique}submit(e,s){const o=s.renderable.geometry,r=s.components,i=s.renderable.drawParameters,a=s.renderable.meta.cameraDepthSquared,l=r.geometryRanges,n=r.highlightRanges;switch(this._computeWhichMaterialPass()){case 0:e.materialOpaque.submitDraw(this,o,l,i,a);break;case 1:e.materialTransparent.submitDraw(this,o,l,i,a);break;case 2:e.materialOpaque.submitDraw(this,o,l,i,a),e.materialTransparent.submitDraw(this,o,l,i,a);break;case 3:e.materialIntegratedMesh.submitDraw(this,o,l,i,a),(this.overlayHighlightInner||this.overlayHighlightOuter)&&e.highlightIntegratedMesh.submitDraw(this,o,l,i,a)}t(e.shadowMap)&&2!==this.componentParameters.castShadows&&e.shadowMap.submitDraw(this,o,l,i,a),t(e.highlight)&&t(n)&&e.highlight.submitDraw(this,o,n,i,a)}get attributeLocations(){return c}_computeWhichMaterialPass(){return this.isIntegratedMesh?3:this.objectOpacity<1?1:0===this.componentParameters.opaqueOverride?0:this.baseColor[3]<1||0===this.alphaDiscardMode||3===this.alphaDiscardMode?1:2===this.componentParameters.transparent?0:0===this.componentParameters.transparent?1:2}}e([m({vectorOps:r})],b.prototype,"baseColor",void 0),e([m()],b.prototype,"usePBR",void 0),e([m({vectorOps:s})],b.prototype,"mrrFactors",void 0),e([m({vectorOps:s})],b.prototype,"emissiveFactor",void 0),e([m({dispose:!0})],b.prototype,"baseColorTexture",void 0),e([m({dispose:!0})],b.prototype,"metallicRoughnessTexture",void 0),e([m({dispose:!0})],b.prototype,"emissionTexture",void 0),e([m({dispose:!0})],b.prototype,"occlusionTexture",void 0),e([m({dispose:!0})],b.prototype,"normalTexture",void 0),e([m({vectorOps:{equals:i,copy:a}})],b.prototype,"overlayTexOffset",void 0),e([m({vectorOps:{equals:i,copy:a}})],b.prototype,"overlayTexScale",void 0),e([m()],b.prototype,"overlayColorInner",void 0),e([m()],b.prototype,"overlayColorOuter",void 0),e([m()],b.prototype,"overlayHighlightInner",void 0),e([m()],b.prototype,"overlayHighlightOuter",void 0),e([m()],b.prototype,"overlayNormalInner",void 0),e([m()],b.prototype,"overlayNormalOuter",void 0),e([m()],b.prototype,"objectOpacity",void 0),e([v()],b.prototype,"commonMaterialParameters",void 0),e([v()],b.prototype,"componentParameters",void 0),e([m()],b.prototype,"alphaCutoff",void 0),e([m()],b.prototype,"alphaDiscardMode",void 0),e([m()],b.prototype,"isIntegratedMesh",void 0),e([m()],b.prototype,"polygonOffsetEnabled",void 0),e([m()],b.prototype,"ellipsoidMode",void 0),e([m()],b.prototype,"sceneHasOcludees",void 0);class x extends y{constructor(){super(...arguments),this.doubleSided=!1,this.cullFace=2,this.slicePlaneEnabled=!0}}e([m()],x.prototype,"doubleSided",void 0),e([m()],x.prototype,"cullFace",void 0),e([m()],x.prototype,"slicePlaneEnabled",void 0);class g extends y{constructor(){super(...arguments),this.externalColor=h(1,1,1,1),this.externalColorMixMode=1,this.castShadows=0}get transparent(){return this.externalColor[3]<1?0:2}get opaqueOverride(){return 3===this.externalColorMixMode&&1===this.externalColor[3]?0:2}get visible(){return this.externalColor[3]>0?0:2}get type(){return 0}}e([m({vectorOps:r})],g.prototype,"externalColor",void 0),e([m()],g.prototype,"externalColorMixMode",void 0),e([m()],g.prototype,"castShadows",void 0);class M extends y{constructor(){super(...arguments),this.texture=null,this.transparent=2,this.opaqueOverride=2,this.castShadows=2}get type(){return 1}}e([m()],M.prototype,"texture",void 0),e([m()],M.prototype,"transparent",void 0),e([m()],M.prototype,"opaqueOverride",void 0),e([m()],M.prototype,"castShadows",void 0);export{x as CommonMaterialParameters,b as ComponentMaterial,g as ComponentParametersUniform,M as ComponentParametersVarying};

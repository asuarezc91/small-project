/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{glsl as o}from"../../shaderModules/interfaces.js";import{Transform as r}from"../Transform.glsl.js";import{Slice as e}from"../Slice.glsl.js";import{OutputHighlight as t}from"../output/OutputHighlight.glsl.js";import{VisualVariables as i}from"../shading/VisualVariables.glsl.js";import{DiscardOrAdjustAlpha as a}from"../util/AlphaDiscard.glsl.js";import{OutputDepth as l}from"../output/OutputDepth.glsl.js";import{TextureCoordinateAttribute as s}from"../attributes/TextureCoordinateAttribute.glsl.js";import{NormalAttribute as d}from"../attributes/NormalAttribute.glsl.js";import{VertexNormal as n}from"../attributes/VertexNormal.glsl.js";function u(u,p){const v=u.vertex.code,c=u.fragment.code;1!==p.output&&3!==p.output||(u.include(r,{linearDepth:!0}),u.include(s,p),u.include(i,p),u.include(l,p),u.include(e,p),u.vertex.uniforms.add("nearFar","vec2"),u.varyings.add("depth","float"),p.hasColorTexture&&u.fragment.uniforms.add("tex","sampler2D"),v.add(o`
      void main(void) {
        vpos = calculateVPos();
        vpos = subtractOrigin(vpos);
        vpos = addVerticalOffset(vpos, localOrigin);
        gl_Position = transformPositionWithDepth(proj, view, vpos, nearFar, depth);
        forwardTextureCoordinates();
      }
    `),u.include(a,p),c.add(o`
      void main(void) {
        discardBySlice(vpos);
        ${p.hasColorTexture?o`
        vec4 texColor = texture2D(tex, vuv0);
        discardOrAdjustAlpha(texColor);`:""}
        outputDepth(depth);
      }
    `)),2===p.output&&(u.include(r,{linearDepth:!1}),u.include(d,p),u.include(n,p),u.include(s,p),u.include(i,p),p.hasColorTexture&&u.fragment.uniforms.add("tex","sampler2D"),u.vertex.uniforms.add("viewNormal","mat4"),u.varyings.add("vPositionView","vec3"),v.add(o`
      void main(void) {
        vpos = calculateVPos();
        vpos = subtractOrigin(vpos);
        ${0===p.normalType?o`
        vNormalWorld = dpNormalView(vvLocalNormal(normalModel()));`:""}
        vpos = addVerticalOffset(vpos, localOrigin);
        gl_Position = transformPosition(proj, view, vpos);
        forwardTextureCoordinates();
      }
    `),u.include(e,p),u.include(a,p),c.add(o`
      void main() {
        discardBySlice(vpos);
        ${p.hasColorTexture?o`
        vec4 texColor = texture2D(tex, vuv0);
        discardOrAdjustAlpha(texColor);`:""}

        ${3===p.normalType?o`
            vec3 normal = screenDerivativeNormal(vPositionView);`:o`
            vec3 normal = normalize(vNormalWorld);
            if (gl_FrontFacing == false) normal = -normal;`}
        gl_FragColor = vec4(vec3(0.5) + 0.5 * normal, 1.0);
      }
    `)),4===p.output&&(u.include(r,{linearDepth:!1}),u.include(s,p),u.include(i,p),p.hasColorTexture&&u.fragment.uniforms.add("tex","sampler2D"),v.add(o`
      void main(void) {
        vpos = calculateVPos();
        vpos = subtractOrigin(vpos);
        vpos = addVerticalOffset(vpos, localOrigin);
        gl_Position = transformPosition(proj, view, vpos);
        forwardTextureCoordinates();
      }
    `),u.include(e,p),u.include(a,p),u.include(t),c.add(o`
      void main() {
        discardBySlice(vpos);
        ${p.hasColorTexture?o`
        vec4 texColor = texture2D(tex, vuv0);
        discardOrAdjustAlpha(texColor);`:""}
        outputHighlight();
      }
    `))}export{u as DefaultMaterialAuxiliaryPasses};

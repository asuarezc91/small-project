/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{isSome as s}from"../../../../../core/maybe.js";import{c as a}from"../../../../../chunks/vec3f64.js";import{b as e,s as t,g as i,f as r}from"../../../../../chunks/vec3.js";import{c as h}from"../../../../../chunks/mat4.js";import{a as m}from"../../../../../chunks/mat3f64.js";import{f as n,t as o,d as l}from"../../../../../chunks/mat3.js";import{s as P}from"../../../../../chunks/vec2.js";import{c as p}from"../../../../../chunks/vec4.js";import{boundedPlane as c}from"../../../support/geometryUtils.js";import{union as d}from"../../lib/depthRange.js";import{TwoVectorPosition as _}from"../util/TwoVectorPosition.js";import{MaterialPassesParameters as u,ShadowMapPassParameters as g,HighlightPassParameters as w}from"./AllRenderPasses.js";import{RenderPass as f}from"./RenderPass.js";class b{constructor(s,a){this.rctx=s,this.shaderTechniqueRepository=a,this.canRender=!0,this._materialPassParams=new u,this._shadowPassParams=new g,this._highlightPassParams=new w,this._systems=new Set,this._passes=new Array,this._shadowMapPass=this._registerPass(new f(s,this.shaderTechniqueRepository)),this.passes={materialOpaque:this._registerPass(new f(s,this.shaderTechniqueRepository)),materialTransparent:this._registerPass(new f(s,this.shaderTechniqueRepository,1)),materialIntegratedMesh:this._registerPass(new f(s,this.shaderTechniqueRepository)),shadowMap:this._shadowMapPass,highlight:this._registerPass(new f(s,this.shaderTechniqueRepository)),highlightIntegratedMesh:this._registerPass(new f(s,this.shaderTechniqueRepository))}}register(s){this._systems.add(s)}prepareRender(s){this._passes.forEach((s=>s.prepareSubmit())),this._systems.forEach((a=>{a.submit(this.passes,{camera:s})})),this._passes.forEach((s=>s.finishSubmit())),this.shaderTechniqueRepository.frameUpdate()}render(s){if(4===s.slot)switch(this._configure(s),s.pass){case 0:this._materialPassParams.subPass=0,this._configureMaterialColorPass(s),this.passes.materialOpaque.dispatch(this._materialPassParams);break;case 2:this._materialPassParams.subPass=2,this.passes.materialOpaque.dispatch(this._materialPassParams);break;case 3:this._materialPassParams.subPass=3,this.passes.materialOpaque.dispatch(this._materialPassParams);break;case 5:this.passes.highlight.dispatch(this._highlightPassParams);break;case 4:this._shadowMapPass.dispatch(this._shadowPassParams)}if(6===s.slot)switch(this._configure(s),s.pass){case 0:this._materialPassParams.subPass=0,this._configureMaterialColorPass(s),this.passes.materialTransparent.dispatch(this._materialPassParams);break;case 1:this._materialPassParams.subPass=1,this._configureMaterialColorPass(s),this.passes.materialTransparent.dispatch(this._materialPassParams);break;case 2:this._materialPassParams.subPass=2,this.passes.materialTransparent.dispatch(this._materialPassParams);break;case 3:this._materialPassParams.subPass=3,this.passes.materialTransparent.dispatch(this._materialPassParams)}if(1===s.slot)switch(this._configure(s),s.pass){case 0:this._materialPassParams.subPass=0,this._configureMaterialColorPass(s),this._materialPassParams.ssrParams=s.ssrParams,this.passes.materialIntegratedMesh.dispatch(this._materialPassParams);break;case 2:this._materialPassParams.subPass=2,this.passes.materialIntegratedMesh.dispatch(this._materialPassParams);break;case 3:this._materialPassParams.subPass=3,this.passes.materialIntegratedMesh.dispatch(this._materialPassParams);break;case 5:this.passes.highlightIntegratedMesh.dispatch(this._highlightPassParams)}return!0}notifyDirty(){this.initContext.requestRender()}slots(){return[4,6,1]}initializeRenderContext(s){this.initContext=s}uninitializeRenderContext(){}queryDepthRange(a){const e={near:1/0,far:-1/0};return this._systems.forEach((t=>{const i=t.queryShadowCasterDepthRange(a);s(i)&&d(e,i,e)})),e}get shadowCastingEnabled(){return s(this.passes.shadowMap)}set shadowCastingEnabled(s){s?(this._materialPassParams.shadowsEnabled=!0,this.passes.shadowMap=this._shadowMapPass):(this._materialPassParams.shadowsEnabled=!1,this.passes.shadowMap=null)}get screenSpaceReflectionsEnabled(){return s(this._materialPassParams.ssrParams.ssrEnabled)}set screenSpaceReflectionsEnabled(s){this._materialPassParams.ssrParams.ssrEnabled=!!s}_configureMaterialColorPass(s){this._materialPassParams.shadowMap={bind:(a,t)=>{s.shadowMap.bind(a,t);const i=this._materialPassParams.viewTransform;e(T,i.worldFromView_TL,i.worldFromView_TH),s.shadowMap.bindView(a,T)}},this._materialPassParams.ambientOcclusion={bind:(a,e)=>{s.ssaoHelper.setUniforms(a,e)}},this._materialPassParams.ambientOcclusionEnabled=s.ssaoHelper.enabled,this._materialPassParams.sceneHasOcludees=s.hasOccludees}_configure(s){const a=4===s.pass?this._shadowPassParams:5===s.pass?this._highlightPassParams:this._materialPassParams;this._updateParameters(s,a)}_updateParameters(s,a){const e=s.camera,m=e.viewInverseTransposeMatrix;t(T,m[3],m[7],m[11]),y.set(T),i(a.viewTransform.worldFromView_TH,y.high),i(a.viewTransform.worldFromView_TL,y.low),n(a.viewTransform.viewFromCameraRelative_RS,e.viewMatrix),h(a.viewTransform.projFromView,e.projectionMatrix),0===a.identifier?(this._materialPassParams.transparent=6===s.slot,this._materialPassParams.integratedMesh=1===s.slot,this._materialPassParams.lighting=s.scenelightingData,o(M,a.viewTransform.viewFromCameraRelative_RS),l(a.transformNormal_ViewFromGlobal,M),P(a.cameraNearFar,e.near,e.far)):1===a.identifier?P(a.cameraNearFar,e.near,e.far):2===a.identifier&&(a.highlightDepthTexture=s.highlightDepthTexture,p(a.viewport,e.fullViewport),a.inverseViewport[0]=1/e.fullViewport[2],a.inverseViewport[1]=1/e.fullViewport[3]),c.copy(s.sliceHelper.plane,a.slicePlane),r(a.slicePlane.origin,a.slicePlane.origin,T),a.slicePlaneEnabled=s.sliceHelper.isEnabled,this._materialPassParams.transparencyPassType=s.transparencyPassType}_registerPass(s){return this._passes.push(s),s}get needsHighlight(){return this.passes.highlight.count>0||this.passes.highlightIntegratedMesh.count>0}}const T=a(),M=m(),y=new _;export{b as RenderPassManager};

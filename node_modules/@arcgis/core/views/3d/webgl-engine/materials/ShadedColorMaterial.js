/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{c as e}from"../../../../chunks/vec3f64.js";import{n as t,s as r,a as i,b as s}from"../../../../chunks/vec3.js";import{BufferViewVec3f as a}from"../../support/buffer/BufferView.js";import{center as n,scale as o}from"../../../../geometry/support/aaBoundingBox.js";import{newLayout as c}from"../../support/buffer/InterleavedLayout.js";import{assert as u}from"../lib/Util.js";import h from"../lib/GLMaterial.js";import{intersectTriangleGeometry as l}from"./internal/MaterialUtil.js";import{Material as p,materialParametersDefaults as f}from"../lib/Material.js";import{writeDefaultAttributes as d,writePosition as m}from"./internal/bufferWriterUtils.js";import{ShadedColorMaterialTechniqueConfiguration as g,ShadedColorMaterialVertexAttrLocations as b,ShadedColorMaterialVertexAttrConstants as S,ShadedColorMaterialTechnique as E}from"../shaders/ShadedColorMaterialTechnique.js";export{ShadedColorMaterialVertexAttrConstants}from"../shaders/ShadedColorMaterialTechnique.js";class q extends p{constructor(e,t){super(t,e,F),this.supportsEdges=!0,this.techniqueConfig=new g,this._vertexAttributeLocations=b}getTechniqueConfig(e,t){return this.techniqueConfig.output=e,this.techniqueConfig.cullFace=this.params.cullFace,this.techniqueConfig.slicePlaneEnabled=this.params.slicePlaneEnabled,this.techniqueConfig.transparent=this.params.transparent,this.techniqueConfig.writeDepth=this.params.writeDepth,this.techniqueConfig.screenSizeEnabled=this.params.screenSizeEnabled,this.techniqueConfig.shadingEnabled=this.params.shadingEnabled,this.techniqueConfig.transparencyPassType=t?t.transparencyPassType:3,this.techniqueConfig}getPassParameters(){return this.params}intersect(e,t,a,c,u,h,p){if(this.params.screenSizeEnabled){const a=e.getAttribute(S.OFFSET),f={applyToVertex:(e,t,n,o)=>{const u=r(v,a.data[3*o+0],a.data[3*o+1],a.data[3*o+2]),h=r(C,e,t,n);return i(u,u,this.params.screenSize*c.camera.computeRenderPixelSizeAt(u)),s(h,h,u),[h[0],h[1],h[2]]},applyToAabb:e=>{const t=n(e,v);return o(e,this.params.screenSize*c.camera.computeRenderPixelSizeAt(t))}};l(e,t,c,u,h,f,p)}else l(e,t,c,u,h,void 0,p)}getGLMaterial(e){return 0===e.output||7===e.output||4===e.output?new T(e):void 0}createBufferWriter(){return new P(this.params.screenSizeEnabled)}}class T extends h{constructor(e){super(e),this.updateParameters()}updateParameters(e){this.technique=this.techniqueRep.acquireAndReleaseExisting(E,this.material.getTechniqueConfig(this.output,e),this.technique)}beginSlot(e){if(4===this.output)return 3===e;let t=3;return this.technique.configuration.transparent&&(t=this.technique.configuration.writeDepth?5:8),e===t}ensureParameters(e){this.updateParameters(e)}bind(e,t){e.bindProgram(this.technique.program),this.technique.bindPass(e,this.material.getPassParameters(),t)}}const F={color:[1,1,1,1],shadingTint:[0,0,0,.25],shadingDirection:t(e(),[.5,-.5,-.5]),transparent:!1,writeDepth:!0,slicePlaneEnabled:!1,cullFace:0,screenSizeEnabled:!1,screenSize:14,shadingEnabled:!0,...f};class P{constructor(e){this.screenSizeEnabled=e;const t=c().vec3f(S.POSITION).vec3f(S.NORMAL);this.screenSizeEnabled&&t.vec3f(S.OFFSET),this.vertexBufferLayout=t}allocate(e){return this.vertexBufferLayout.createBuffer(e)}elementCount(e){return e.indices[S.POSITION].length}write(e,t,r,i){if(d(t,this.vertexBufferLayout,e.transformation,e.invTranspTransformation,r,i),this.screenSizeEnabled){if(!(S.OFFSET in t.vertexAttr))throw new Error(`${S.OFFSET} vertex attribute required for screenSizeEnabled ShadedColorMaterial`);{const s=t.vertexAttr[S.OFFSET],n=t.indices[S.OFFSET];u(3===s.size);const o=r.getField(S.OFFSET,a);if(!o)throw new Error("unable to acquire view for "+S.OFFSET);m(n,s.data,e.invTranspTransformation,o,i)}}}}const v=e(),C=e();export{q as ShadedColorMaterial};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import t from"../../../core/Logger.js";import{throwIfAborted as r,reject as e,all as s}from"../../../core/promiseUtils.js";import{open as i}from"../../../core/workers/workers.js";const o=t.getLogger("esri.views.3d.support.WorkerHandle");class h{constructor(t,r,e,s={}){this._methodName=r,this._promise=i(t,{...s,scheduler:e}).then((t=>{void 0===this._thread?(this._thread=t,this._promise=null,s.hasInitialize&&this.broadcast({},"initialize")):t.close()})),this._promise.catch((r=>o.error(`Failed to initialize ${t} worker: ${r}`)))}destroy(){this._thread&&(this._thread.close(),this._thread=null),this._promise=null}invoke(t,s){if(this._thread){const r=this.getTransferList(t);return this._thread.invoke(this._methodName,t,{transferList:r,signal:s})}return this._promise?this._promise.then((()=>(r(s),this.invoke(t,s)))):e(null)}broadcast(t,r){return this._thread?s(this._thread.broadcast(r,t)).then((()=>{})):this._promise?this._promise.then((()=>this.broadcast(t,r))):e()}get promise(){return this._promise}}export{h as WorkerHandle};

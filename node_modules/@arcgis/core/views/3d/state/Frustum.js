/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{c as t}from"../../../chunks/vec3f64.js";import{g as s}from"../../../chunks/vec3.js";import{directionFromTo as i}from"../support/mathUtils.js";import{c as e,a as r,r as n,i as u,b as o,d as a,e as h,p}from"../../../chunks/frustum.js";class l{constructor(s){this.frustum=e(),this.lines=new Array(12),this.origin=t(),this.direction=t(),this._altitude=null,this.renderCoordsHelper=s?s.renderCoordsHelper:null;for(let s=0;s<12;s++)this.lines[s]={origin:null,direction:t(),endpoint:null}}get planes(){return this.frustum.planes}get points(){return this.frustum.points}get mutablePoints(){return this.frustum.points}update(t){r(t.viewMatrix,t.projectionMatrix,this.frustum),s(this.origin,t.eye),s(this.direction,t.viewForward),this._altitude=this.renderCoordsHelper.getAltitude(this.origin),this.updateLines()}updatePoints(t){for(let i=0;i<this.frustum.points.length;i++)s(this.frustum.points[i],t[i]);n(this.frustum),this.updateLines()}get altitude(){return this._altitude}intersectsSphere(t){return u(this.frustum.planes,t)}intersectsRay(t){return o(this.frustum.planes,t)}intersectsLineSegment(t,s){return a(this.frustum.planes,t,s)}intersectsPoint(t){return h(this.frustum.planes,t)}updateLines(){const{points:t}=this.frustum;for(let s=0;s<4;s++){const i=s,e=s+4;this.updateLine(this.lines[s],t[i],t[e]),this.updateLine(this.lines[s+4],t[i],3===s?t[0]:t[i+1]),this.updateLine(this.lines[s+8],t[e],3===s?t[4]:t[e+1])}}updateLine(t,s,e){t.origin=s,t.endpoint=e,i(t.direction,s,e)}}l.planePointIndices=p,l.nearFarLineIndices=[[0,4],[1,5],[2,6],[3,7]];export default l;export{l as Frustum};

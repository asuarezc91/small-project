/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as t}from"../../../chunks/tslib.es6.js";import"../../../core/has.js";import{destroyMaybe as a}from"../../../core/maybe.js";import"../../../core/Logger.js";import"../../../core/accessorSupport/ensureType.js";import{property as i}from"../../../core/accessorSupport/decorators/property.js";import{subclass as e}from"../../../core/accessorSupport/decorators/subclass.js";import"../../../core/urlUtils.js";import"../../../core/uuid.js";import"../../../portal/support/resourceExtension.js";import s from"../../../core/Accessor.js";import{deg2rad as r,rad2deg as n}from"../../../core/mathUtils.js";import o from"../../../core/Handles.js";import{init as c}from"../../../core/watchUtils.js";import{surfaceElevationBelowRenderLocation as l}from"../camera/intersectionUtils.js";import{applyAll as h}from"../camera/constraintUtils.js";import{createNearFarHeuristic as u}from"./NearFarHeuristic.js";import p from"./SurfaceCollisionConstraint.js";let d=class extends s{constructor(t){super(t),this._handles=new o,this.nearFarHeuristic=u(t.view.state.mode,t.view.basemapTerrain,t.view.renderCoordsHelper.spatialReference)}initialize(){this._handles.add([this.view.watch(["constraints.clipDistance.near","constraints.clipDistance.far"],(()=>this._clipDistanceNearFarChanged())),this.view.watch("constraints.clipDistance.mode",(()=>this._updateNearFar())),this.view.state.events.on("before-camera-change",(t=>this._updateCameraNearFar(t.camera))),this.view.watch("dataExtent",(()=>this._updateNearFar()),!0),this.view.watch(["constraints.altitude.min","constraints.altitude.max"],(()=>this._updateAltitude()),!0),this.view.watch("constraints.tilt.max",(()=>this._updateTiltMax()),!0),this.view.watch("constraints.tilt.mode",(()=>this._updateTilt()),!0),this.view.watch("state.camera",(()=>this._updateTiltAutoMax()),!0),this.view.watch(["map.ground.navigationConstraint.type","constraints.collision.enabled"],(()=>this._updateCollision()),!0)]),this.view.state.isLocal&&this._handles.add(c(this.view,"dataExtent",(t=>this._updateLocalSurfaceDistance(t)))),this._updateNearFar(),2!==this.view.state.mode&&this._updateAltitude(),this._updateTilt(),this._updateCollision(),this._set("surfaceCollisionConstraint",new p({view:this.view}))}destroy(){this._handles=a(this._handles),this.surfaceCollisionConstraint&&(this.surfaceCollisionConstraint.destroy(),this._set("surfaceCollisionConstraint",null))}_clipDistanceNearFarChanged(){const t=this.view.constraints&&this.view.constraints.clipDistance;t&&"auto"!==t.mode&&this.view.state.updateCamera((a=>(this._updateCameraNearFarManual(a,t),!0)))}_updateNearFar(){this.view.state.updateCamera((t=>(this._updateCameraNearFar(t),!0)))}_updateCameraNearFar(t){const a=this.view.constraints&&this.view.constraints.clipDistance;"manual"===(a?a.mode:"auto")?this._updateCameraNearFarManual(t,a):this._updateCameraNearFarAuto(t,a)}_updateCameraNearFarAuto(t,a){this.nearFarHeuristic.compute(t.eye,t.center,this.view.dataExtent,l(this.view,t.eye),t),a&&a.autoUpdate(t.near,t.far)}_updateCameraNearFarManual(t,a){a&&(t.near=a.near,t.far=a.far)}_updateCollision(){const t=this.view.map&&this.view.map.ground&&this.view.map.ground.navigationConstraint,a=this.view.constraints&&this.view.constraints.collision.enabled,i=t?"stay-above"===t.type:a,e=this.view.state.constraints.collision;if(i!==e.enabled){e.enabled=i,i&&this._reapplyConstraints(8);const t=this.view.constraints&&this.view.constraints.tilt;t&&"auto"!==t.mode||this._updateTiltAuto()}}_updateAltitude(){const t=this.view.constraints&&this.view.constraints.altitude;t&&2!==this.view.state.mode?this.view.state.constraints.altitude={min:t.min,max:t.max}:this.view.state.constraints.altitude=null,this._reapplyConstraints()}_updateTiltMax(){const t=this.view.constraints&&this.view.constraints.tilt;t&&"auto"!==t.mode&&(this._updateTiltManual(t),this._reapplyConstraints())}_updateTilt(){const t=this.view.constraints&&this.view.constraints.tilt;"manual"===(t?t.mode:"auto")?this._updateTiltManual(t):this._updateTiltAuto(),this._reapplyConstraints()}_updateTiltManual(t){const a=this.view.state.constraints;a.tilt=a.createConstantMaxTilt(r(t.max))}_updateTiltAuto(){const t=this.view.state.constraints;t.tilt=t.createDefaultTilt(),this._updateTiltAutoMax()}_updateTiltAutoMax(){const t=this.view.constraints&&this.view.constraints.tilt;if(!t||"auto"!==t.mode)return;const a=this.view.state.constraints;if(a.tilt){const i=a.tilt(this.view.state.camera.distance).max;t.autoUpdate(n(i))}}_updateLocalSurfaceDistance(t){let a=Math.max(t.width,t.height);if(a<=0)return;t.hasZ&&(a=Math.max(a,t.zmax-t.zmin));const i=this.view.state,e=3*a/Math.atan(i.camera.fov/2);e!==i.constraints.distance&&(i.constraints.distance=e)}_reapplyConstraints(t=15){this.view.state.updateCamera((a=>h(this.view,a,{selection:t,interactionType:0,interactionFactor:null,interactionStartCamera:null,interactionDirection:null,tiltMode:0})))}};t([i({constructOnly:!0})],d.prototype,"view",void 0),t([i({readOnly:!0})],d.prototype,"surfaceCollisionConstraint",void 0),d=t([e("esri.views.3d.state.ConstraintsManager")],d);var m=d;export default m;export{d as ConstraintsManager};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{isNone as e,isSome as t,unwrapOr as r}from"../../../../core/maybe.js";import i from"../../../../core/PooledArray.js";import{castRenderScreenPointArray3 as n,createRenderScreenPointArray as s}from"../../../../core/screenUtils.js";import{c as o}from"../../../../chunks/vec3f64.js";import{b as a,n as c,a as l,l as d,k as h}from"../../../../chunks/vec3.js";import{sv3d as u}from"../../support/stack.js";import{c as m,f as p,a as y}from"../../../../chunks/ray.js";import{sliceFilterPredicate as g}from"../../webgl-engine/lib/intersectorUtils.js";import{Intersector as f}from"../../webgl-engine/lib/Intersector.js";class v{constructor(e,t,r){this.viewingMode=e,this.layerProvider=t,this.view=r,this.externalIntersectionHandlers=new i,this.tolerance=f.DEFAULT_TOLERANCE,this.tmpRay=m(),this.validateHUDIntersector=new f(this.viewingMode),this.validateHUDIntersector.options.hud=!1}intersectScreen(e,t){return this.intersectRay(this.getPickRay(e,this.tmpRay),I(this.viewingMode),t)}intersectScreenFreePointFallback(e,t){return this.intersectRayFreePointFallback(this.getPickRay(e,this.tmpRay),t)}intersectRayFreePointFallback(e,t){return this.intersectRay(e,I(this.viewingMode),t)||this.intersectRayFreePointLocal(e,t)}intersectRay(e,t,r,i){return t.options.selectionMode=!1,t.options.store=0,this.computeIntersection(e,t,i),!!t.results.min&&t.results.min.getIntersectionPoint(r)}getCenterRayWithSubpixelOffset(e,t,r=.5,i=.5){return e.getRenderCenter(b,r,i),b[0]+=.0466,b[1]-=.0123,p(e,b,t)}intersectIntersectorScreen(e,t,r){this.computeIntersection(this.getPickRay(e,this.tmpRay),t,r)}intersectToolIntersectorScreen(e,t,r){const i=this.getPickRay(e,this.tmpRay);this.intersectToolIntersectorRay(i,t,r)}intersectToolIntersectorRay(e,t,r){t.options.selectionMode=!0,this.computeIntersection(e,t,r);const i=t.results.min;!!this.view.basemapTerrain&&this.view.basemapTerrain.isOpaque()||i.hasIntersectionPoint&&"TerrainRenderer"!==i.intersector||(t.options.selectionMode=!1,this.computeIntersection(e,t,r))}setTolerance(e=f.DEFAULT_TOLERANCE){this.tolerance=e}addIntersectionHandler(e){this.externalIntersectionHandlers.push(e),this.externalIntersectionHandlers.sort(((e,t)=>"Terrain"===e.type?1:"Terrain"===t.type?-1:0))}removeIntersectionHandler(e){this.externalIntersectionHandlers.removeUnordered(e),this.externalIntersectionHandlers.sort(((e,t)=>"Terrain"===e.type?1:"Terrain"===t.type?-1:0))}getPickRay(e,t=m()){const r=this.view.state.camera;return y(r,e,t)}intersectRayFreePointLocal(t,r){if(2!==this.viewingMode||e(t))return!1;const i=this.view.dataExtent,n={x:i.xmax-i.xmin,y:i.ymax-i.ymin,z:8*Math.max(i.xmax-i.xmin,i.ymax-i.ymin)},s=Math.max(n.x,n.y,n.z);if(0===s)return a(r,t.origin,c(u.get(),t.direction)),!0;const o=this.view.state.camera,h=Math.max(0,i.xmin-o.eye[0],o.eye[0]-i.xmax),m=Math.max(0,i.ymin-o.eye[1],o.eye[1]-i.ymax),p=Math.sqrt(h*h+m*m),y=Math.abs(o.relativeElevation)+Number.MIN_VALUE,g=Math.pow(Math.max(0,Math.log(s/y)),2);let f=s/Math.max(1,g);f=Math.max(f,Math.min(p,s));const v=l(u.get(),t.direction,f/d(t.direction));return a(r,t.origin,v),!0}intersectElevationFromScreen(e,t,r=0){return this.intersectElevation(this.getPickRay(e,this.tmpRay),t,r)}intersectElevation(i,s,o=0){if(e(i))return null;const c=t(s)?s.mode:"absolute-height",l=t(s)?r(s.offset,0):0,d="on-the-ground"!==c?l+o:0,h=d/this.view.renderCoordsHelper.unitInMeters;if("absolute-height"===c){if(this.view.renderCoordsHelper.intersectManifold(i,d,P)){const e=this.view.computeMapPointFromVec3d(P);return e.z-=l,e}return null}const m=this.view.state.camera,p=n(u.get());m.projectToRenderScreen(i.origin,p);const y=this.prepareFilters(null,w),v=this.view.slicePlane,R=t(v)?g(v):null,x=new f(this.viewingMode);x.options.store=0,x.options.verticalOffset=h;const I=i.origin,b=a(u.get(),I,i.direction);switch(x.reset(I,b),x.point=p,x.camera=m,x.filterPredicate=null,c){case"relative-to-scene":{const e=e=>e.metadata&&e.metadata.isElevationSource;x.intersect(y.layers,p,m,this.tolerance,null,e),this.externalIntersectionHandlers.forAll((e=>{if("I3S"===e.type||"Terrain"===e.type){const t=e.slicePlane?R:null;e.intersect(x,t,x.rayBeginPoint,x.rayEndPoint,p)}}))}break;case"on-the-ground":case"relative-to-ground":this.externalIntersectionHandlers.forAll((e=>{if(e.isGround){const t=e.slicePlane?R:null;e.intersect(x,t,x.rayBeginPoint,x.rayEndPoint,p)}}))}if(x.results.min.getIntersectionPoint(P)){const e=this.view.computeMapPointFromVec3d(P);return e.z=o,e}return null}computeIntersection(r,i,s){if(e(r))return;const o=this.view.state.camera,c=n(u.get());o.projectToRenderScreen(r.origin,c);const l=this.prepareFilters(s,w);i.options.selectOpaqueTerrainOnly=!s||!("include"in s||"exclude"in s);const d=r.origin,m=a(u.get(),r.origin,r.direction);i.reset(d,m),i.intersect(l.layers,c,o,this.tolerance);const p=this.view.slicePlane,y=t(p)?g(p):null;i.intersect(l.sliceableLayers,c,o,this.tolerance,y);const f=s&&(s.requiresGroundFeedback||s.enableDraped);this.externalIntersectionHandlers.forAll((e=>{if(i.options.isFiltered=!l.filterLayerUid(e.intersectionHandlerId),e.isGround&&f||!i.options.isFiltered){const t=e.slicePlane?y:null;e.intersect(i,t,d,m,c)}}));const v=u.get();if(s&&s.enableDraped&&i.results.ground.getIntersectionPoint(v)){const e=this.view.basemapTerrain.overlayManager.renderer,t=this.view.renderCoordsHelper.spatialReference,r=u.get();this.view.renderCoordsHelper.fromRenderCoords(v,r,this.view.spatialReference),r[2]=this.view.elevationProvider.getElevation(v[0],v[1],v[2],t,"ground")||0,e.intersect(i,r,l.filterRenderGeometry)}i.sortResults();const R=i.results.hud;if(R.hasIntersectionPoint){const e=n(u.get()),t=u.get(),r=u.get();this.unprojectHUDResultRay(R.center,e,t,r);const s=h(R.center,t)/h(t,r)*.99;this.validateHUDIntersector.reset(t,r),this.validateHUDIntersector.intersect(l.layers,e,o,this.tolerance),this.validateHUDIntersector.intersect(l.sliceableLayers,e,o,this.tolerance,y),this.externalIntersectionHandlers.forAll((i=>{if(!l.filterLayerUid(i.intersectionHandlerId))return;const n=i.slicePlane?y:null;i.intersect(this.validateHUDIntersector,n,t,r,e)}));const a=this.validateHUDIntersector.results.min;(null==a.dist||s<=a.dist)&&(i.results.min.copyFrom(R),i.results.all.splice(0,0,R))}}prepareFilters(e,t){const r=[],i=[];return this.layerProvider.forEachLayer((e=>{e.isPickable&&(e.isSliceable?i:r).push(e)})),t.include=e&&e.include,t.exclude=e&&e.exclude,t.layers.length=0,t.sliceableLayers.length=0,R(r,t.filterLayer,t.layers),R(i,t.filterLayer,t.sliceableLayers),t}unprojectHUDResultRay(e,t,r,i){const s=this.view.state.camera;s.projectToRenderScreen(e,t);const o=n(u.get());o[0]=t[0],o[1]=t[1],o[2]=0,s.unprojectFromRenderScreen(o,r),o[2]=1,s.unprojectFromRenderScreen(o,i)}}function R(e,t,r){for(const i of e)t&&!t(i)||r.push(i);return r}let x;function I(e){return x||(x=new f(e)),x.viewingMode=e,x}const w={include:null,exclude:null,layers:[],sliceableLayers:[],filterLayer:e=>w.filterLayerUid(e.apiLayerUid),filterLayerUid(t){const{include:r,exclude:i}=w;return e(t)?null==r&&null==i:(null==r||r.has(t))&&(null==i||!i.has(t))},filterRenderGeometry:e=>w.filterLayerUid(e.data.layerUid)},P=o(),b=s();export{v as SceneIntersectionHelper};

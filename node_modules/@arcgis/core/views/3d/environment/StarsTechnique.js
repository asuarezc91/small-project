/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{m as e,c as r}from"../../../chunks/mat4.js";import{a as t}from"../../../chunks/mat4f64.js";import{ReloadableShaderModule as i}from"../webgl-engine/core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as o}from"../webgl-engine/core/shaderTechnique/ShaderTechnique.js";import{Default3D as a}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import n from"../../webgl/Program.js";import{makePipelineState as s,separateBlendingParams as m,defaultColorWriteParams as l}from"../../webgl/renderState.js";import{S as c}from"../../../chunks/Stars.glsl.js";class f extends o{initializeProgram(e){const r=f.shader.get().build();return new n(e.rctx,r.generateSource("vertex"),r.generateSource("fragment"),a)}initializePipeline(){return s({blending:m(770,1,771,771),depthTest:{func:515},colorWrite:l})}bindPass(r,{camera:t,modelMatrix:i}){const o=this.makeInfiniteProjectionMatrix(t.projectionMatrix,t.near,g);e(o,o,t.viewMatrix),e(o,o,i),this.program.setUniformMatrix4fv("transform",o),this.program.setUniform4fv("viewport",t.fullViewport),this.program.setUniform1f("pixelRatio",t.pixelRatio)}makeInfiniteProjectionMatrix(e,t,i){const o=24e-8;return r(i,e),i[10]=o-1,i[11]=-1,i[14]=(o-2)*t,i}}f.shader=new i(c,(()=>import("./Stars.glsl.js")));const g=t();export{f as StarsTechnique};

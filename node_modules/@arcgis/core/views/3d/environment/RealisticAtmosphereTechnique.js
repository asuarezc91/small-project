/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import{ReloadableShaderModule as r}from"../webgl-engine/core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as i}from"../webgl-engine/core/shaderTechnique/ShaderTechnique.js";import{ShaderTechniqueConfiguration as t,parameter as o}from"../webgl-engine/core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as n}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import s from"../../webgl/Program.js";import{makePipelineState as a,separateBlendingParams as l,defaultColorWriteParams as c}from"../../webgl/renderState.js";import{R as h}from"../../../chunks/RealisticAtmosphere.glsl.js";class g extends i{initializeProgram(e){const r=g.shader.get(),i=this.configuration,t=r.build({haze:i.haze});return new s(e.rctx,t.generateSource("vertex"),t.generateSource("fragment"),n)}initializePipeline(){return this.configuration.haze?a({blending:l(1,0,769,1),colorWrite:c}):a({blending:l(770,1,771,771),depthTest:{func:515},colorWrite:c})}}g.shader=new r(h,(()=>import("./RealisticAtmosphere.glsl.js")));class m extends t{constructor(){super(...arguments),this.haze=!1}}e([o()],m.prototype,"haze",void 0);export{g as RealisticAtmosphereTechnique,m as RealisticAtmosphereTechniqueConfiguration};

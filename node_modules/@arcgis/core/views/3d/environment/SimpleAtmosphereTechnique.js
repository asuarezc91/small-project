/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import{S as r}from"../../../chunks/SimpleAtmosphere.glsl.js";import{ReloadableShaderModule as t}from"../webgl-engine/core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as o}from"../webgl-engine/core/shaderTechnique/ShaderTechnique.js";import{ShaderTechniqueConfiguration as i,parameter as n}from"../webgl-engine/core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as s}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import l from"../../webgl/Program.js";import{makePipelineState as g,separateBlendingParams as m,backFaceCullingParams as a,defaultColorWriteParams as c}from"../../webgl/renderState.js";class u extends o{initializeProgram(e){const r=u.shader.get(),t=this.configuration,o=r.build({geometry:t.geometry});return new l(e.rctx,o.generateSource("vertex"),o.generateSource("fragment"),s)}initializePipeline(){return 1===this.configuration.geometry?g({blending:m(770,1,771,771),culling:a,depthTest:{func:515},colorWrite:c}):g({blending:m(770,1,771,771),depthTest:{func:515},colorWrite:c})}}u.shader=new t(r,(()=>import("./SimpleAtmosphere.glsl.js")));class h extends i{constructor(){super(...arguments),this.geometry=0}}e([n({count:3})],h.prototype,"geometry",void 0);export{u as SimpleAtmosphereTechnique,h as SimpleAtmosphereTechniqueConfiguration};

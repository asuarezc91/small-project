/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import e from"../../../core/Logger.js";import{createResolver as t,createAbortController as r,isAbortError as i}from"../../../core/promiseUtils.js";import{c as o}from"../../../chunks/mat4.js";import{a as s}from"../../../chunks/mat4f64.js";import{requestImage as n}from"../../../support/requestImageUtils.js";import{Default3D as a}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{SimpleAtmosphereTechniqueConfiguration as l,SimpleAtmosphereTechnique as m}from"./SimpleAtmosphereTechnique.js";import h from"./resources/SimpleAtmosphereTexture.js";import{glLayout as c}from"../support/buffer/glUtil.js";import{newLayout as p}from"../support/buffer/InterleavedLayout.js";import{View as u}from"../webgl-engine/core/shaderLibrary/util/View.glsl.js";import{VertexAttrConstants as f}from"../webgl-engine/lib/Util.js";import g from"../webgl-engine/lib/GeometryUtil.js";import d from"../../webgl/BufferObject.js";import _ from"../../webgl/Texture.js";import{vertexCount as b}from"../../webgl/Util.js";import x from"../../webgl/VertexArrayObject.js";const y=e.getLogger("esri.views.3d.environment.PanoramicAtmosphere");const j=s(),v=p().vec3f("position");export default class{constructor(e,i){this.slot=14,this._readyResolver=t(),this._readyController=r(),this.view=e,this._techniqueRepository=i,this._atmosphereTechniqueConfig=new l}get canRender(){return null!=this._texture}destroy(){this._readyResolver.reject(),this._texture&&(this._texture.dispose(),this._texture=null),this._readyController&&(this._readyController.abort(),this._readyController=null)}when(){return this._readyResolver.promise}initializeRenderContext(e){const t=e.rctx;this._atmosphereTechniqueConfig.geometry=1,this._atmosphereTechnique=this._techniqueRepository.acquireAndReleaseExisting(m,this._atmosphereTechniqueConfig,this._atmosphereTechnique),this._vao=this._createVertexArrayObject(t),this._vaoCount=b(this._vao,"geometry"),n(h,{signal:this._readyController.signal}).then((t=>{this._texture=new _(e.rctx,{pixelFormat:6408,dataType:5121,wrapMode:33071,samplingMode:9729,flipped:!0},t),e.requestRender(),this._readyController=null,this._readyResolver.resolve()})).catch((e=>{i(e)||y.error("Unable to initialize atmosphere: image request failed",e),this._readyResolver.reject()}))}uninitializeRenderContext(){this.destroy()}render(e){if(e.slot!==this.slot||0!==e.pass)return!1;const t=e.rctx,r=this._atmosphereTechnique.program;var i,s;return t.bindProgram(r),this._atmosphereTechnique.bindPipelineState(t),t.bindTexture(this._texture,0),r.setUniform1i("tex",0),u.bindProjectionMatrix(r,e.camera.projectionMatrix),i=j,s=e.camera.viewMatrix,o(i,s),i[12]=0,i[13]=0,i[14]=0,i[15]=1,r.setUniformMatrix4fv("view",j),r.setUniform4f("color",1,1,1,1),e.scenelightingData.setLightDirectionUniform(r),t.bindVAO(this._vao),r.assertCompatibleVertexAttributeLocations(this._vao),t.drawArrays(4,0,this._vaoCount),!0}_createVertexArrayObject(e){const t=g.createPolySphereGeometry(1,2,!1),r=t.indices[f.POSITION];for(let e=0;e<r.length;e+=3){const t=r[e];r[e]=r[e+2],r[e+2]=t}const i=t.vertexAttributes[f.POSITION].data,o=v.createBuffer(r.length),s=o.position;for(let e=0;e<r.length;++e){const t=3*r[e];s.set(e,0,i[t]),s.set(e,1,i[t+1]),s.set(e,2,i[t+2])}return new x(e,a,{geometry:c(v)},{geometry:d.createVertex(e,35044,o.buffer)})}}

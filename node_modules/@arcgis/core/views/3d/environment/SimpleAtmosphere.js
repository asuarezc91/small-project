/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import e from"../../../core/Logger.js";import{createResolver as t,createAbortController as r,isAbortError as i}from"../../../core/promiseUtils.js";import{isMars as s}from"../../../geometry/support/spatialReferenceUtils.js";import{lerp as o,clamp as a}from"../../../core/mathUtils.js";import{c as n}from"../../../chunks/vec3f64.js";import{l as h,a as l,b as m,k as c,c as d,o as u}from"../../../chunks/vec3.js";import{makePiecewiseLinearFunction as p}from"../support/mathUtils.js";import{init as f}from"../../../core/watchUtils.js";import{getReferenceEllipsoid as _}from"../../../geometry/projectionEllipsoid.js";import{l as g}from"../../../chunks/mat4.js";import{a as x}from"../../../chunks/mat4f64.js";import{a as C}from"../../../chunks/vec2f64.js";import{s as R}from"../../../chunks/vec2.js";import{requestImage as V}from"../../../support/requestImageUtils.js";import{Default3D as j}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{SimpleAtmosphereTechniqueConfiguration as v,SimpleAtmosphereTechnique as y}from"./SimpleAtmosphereTechnique.js";import b from"./resources/SimpleAtmosphereTexture.js";import{glLayout as U}from"../support/buffer/glUtil.js";import{newLayout as q}from"../support/buffer/InterleavedLayout.js";import{project as D}from"../webgl-engine/lib/Util.js";import w from"../../webgl/BufferObject.js";import A from"../../webgl/Texture.js";import{vertexCount as F}from"../../webgl/Util.js";import T from"../../webgl/VertexArrayObject.js";import{computeInnerAltitudeFade as M,INNER_ATMOSPHERE_DEPTH as S}from"./atmosphereUtils.js";import k from"./resources/MarsAtmosphereTexture.js";import{createQuadVAO as W}from"../webgl-engine/lib/glUtil3D.js";const L=e.getLogger("esri.views.3d.environment.SimpleAtmosphere"),O=-S,H=p([[50,.1015625],[500,.21875],[5e3,1-250/512],[5e4,.4140625]]);function P(e,t,r,i,s){const o=h(e),a=i*Math.sqrt(o*o-i*i)/o,n=Math.sqrt(i*i-a*a),m=s.silCircleV1,c=s.silCircleV2;return l(s.silCircleCenter,e,n/o),d(m,e,t),u(m)<1&&d(m,e,r),l(m,m,a/h(m)),d(c,m,e),l(c,c,a/h(c)),a}const z=x(),E=n(),B=n();const I=q().vec3f("position");export default class{constructor(e,i){this.slot=14,this._renderData={texV:C(),silCircleCenter:n(),silCircleV1:n(),silCircleV2:n(),altitudeFade:0,innerScale:0,undergroundFadeAlpha:0},this._fadeVaoCount=0,this._readyResolver=t(),this._readyController=r(),this.texV1=1,this.isOnMars=s(e.spatialReference);const o=_(e.spatialReference);this.planetRadius=o.radius,this.outerRimWidth=o.outerAtmosphereRimWidth,this.innerRimFactor=(this.planetRadius+O)/this.planetRadius,this.middleRimFactor=(this.planetRadius+0)/this.planetRadius,this.outerRimFactor=(this.planetRadius+this.outerRimWidth)/this.planetRadius,this.texV0=0/this.outerRimWidth,this.texVScale=this.texV1-this.texV0,this._techniqueRepository=i,this._atmosphereTechniqueConfig=new v,this.view=e}get canRender(){return null!=this._texture}when(){return this._readyResolver.promise}initializeRenderContext(e){const t=e.rctx;this._cameraChangeHandle=f(this.view,"state.camera",(()=>e.requestRender()),!0),this._atmosphereTechniqueConfig.geometry=0,this._atmosphereConeTechnique=this._techniqueRepository.acquireAndReleaseExisting(y,this._atmosphereTechniqueConfig,this._atmosphereConeTechnique),this._atmosphereTechniqueConfig.geometry=2,this._atmosphereUndergroundTechnique=this._techniqueRepository.acquireAndReleaseExisting(y,this._atmosphereTechniqueConfig,this._atmosphereUndergroundTechnique),this._vao=this._createRibbon(t),this._vaoCount=F(this._vao,"geometry"),this._fadeVao=W(t),this._fadeVaoCount=F(this._fadeVao,"geometry"),V(this.isOnMars?k:b,{signal:this._readyController.signal}).then((r=>{this._texture=new A(t,{pixelFormat:6408,dataType:5121,wrapMode:33071,samplingMode:9729,flipped:!0},r),e.requestRender(),this._readyController=null,this._readyResolver.resolve()})).catch((e=>{i(e)||L.error("Unable to initialize simple atmosphere: image request failed",e),this._readyResolver.reject()}))}uninitializeRenderContext(){this.destroy()}destroy(){this._readyResolver.reject(),this._cameraChangeHandle&&(this._cameraChangeHandle.remove(),this._cameraChangeHandle=null),this._texture&&(this._texture.dispose(),this._texture=null),this._fadeVao&&(this._fadeVao.dispose(),this._fadeVao=null),this._vao&&(this._vao.dispose(),this._vao=null),this._readyController&&(this._readyController.abort(),this._readyController=null)}render(e){if(e.slot!==this.slot||0!==e.pass)return!1;this._update(e.camera);const t=e.rctx;if(this._atmosphereConeTechnique.bindPipelineState(t),this._renderData.undergroundFadeAlpha<1){const r=this._atmosphereConeTechnique.program;t.bindProgram(r),r.setUniformMatrix4fv("proj",e.camera.projectionMatrix),r.setUniformMatrix4fv("view",e.camera.viewMatrix),r.setUniform3fv("silCircleCenter",this._renderData.silCircleCenter),r.setUniform3fv("silCircleV1",this._renderData.silCircleV1),r.setUniform3fv("silCircleV2",this._renderData.silCircleV2),r.setUniform2fv("texV",this._renderData.texV),t.bindTexture(this._texture,0),r.setUniform1i("tex",0),e.scenelightingData.setLightDirectionUniform(r),r.setUniform1f("altitudeFade",this._renderData.altitudeFade),r.setUniform1f("innerScale",this._renderData.innerScale),t.bindVAO(this._vao),t.drawArrays(4,0,this._vaoCount)}if(this._renderData.undergroundFadeAlpha>0){const r=this._atmosphereUndergroundTechnique.program;t.bindProgram(r),r.setUniform1f("undergroundFadeAlpha",this._renderData.undergroundFadeAlpha),e.scenelightingData.setLightDirectionUniform(r),r.setUniform3fv("cameraPosition",e.camera.eye),t.bindVAO(this._fadeVao),t.drawArrays(5,0,this._fadeVaoCount)}return!0}_update(e){const t=n(),r=this.planetRadius,i=h(e.eye),s=i-r;if(s<0){const e=Math.min(-s/5e3,1);this._renderData.undergroundFadeAlpha=e}else this._renderData.undergroundFadeAlpha=0;const m=Math.max(50,s),c=r+O;this._renderData.innerScale=function(e,t,r){const i=Math.sqrt(e*e-t*t),s=Math.sqrt(e*e-r*r);return e*e/(i*s+t*r)}(r+m,r,c)-1,this._renderData.altitudeFade=M(s),l(t,e.eye,(r+50)/i),P(t,e.center,e.up,r,this._renderData);const d=this._computeScreenRimWidth(e,t,e.up,this._renderData),u=1-511/512,p=H(s);let f=this.texV0+u*this.texVScale,_=this.texV0+d*p*this.texVScale;if(s>50){P(e.eye,e.center,e.up,r,this._renderData);const t=this._computeScreenRimWidth(e,e.eye,e.up,this._renderData),i=a((t-1.5)/(d-1.5),0,1);f=this.texV0+i*u*this.texVScale,_=this.texV0+o(this.texV1,d*p,i)*this.texVScale}R(this._renderData.texV,f,_)}_createRibbon(e){const t=new Float32Array(1155),r=new Uint32Array(1920);t[0]=0,t[1]=0,t[2]=-1;for(let e=0;e<128;e++){const i=9*e+3;t[i+0]=e,t[i+1]=this.innerRimFactor,t[i+2]=-1,t[i+3]=e,t[i+4]=this.middleRimFactor,t[i+5]=0,t[i+6]=e,t[i+7]=this.outerRimFactor,t[i+8]=1;const s=3*e+1,o=127===e?1:s+3,a=15*e;r[a+0]=s,r[a+1]=s+1,r[a+2]=o+1,r[a+3]=o+1,r[a+4]=o,r[a+5]=s,r[a+6]=s+1,r[a+7]=s+2,r[a+8]=o+2,r[a+9]=o+2,r[a+10]=o+1,r[a+11]=s+1,r[a+12]=s,r[a+13]=o,r[a+14]=0}const i=I.createBuffer(r.length),s=i.position;for(let e=0;e<r.length;++e){const i=3*r[e];s.set(e,0,t[i]),s.set(e,1,t[i+1]),s.set(e,2,t[i+2])}return new T(e,j,{geometry:U(I)},{geometry:w.createVertex(e,35044,i.buffer)})}_computeScreenRimWidth(e,t,r,i){return m(E,i.silCircleCenter,i.silCircleV2),l(B,E,this.outerRimFactor),g(z,t,E,r),D(E,z,e.projectionMatrix,e.viewport),D(B,z,e.projectionMatrix,e.viewport),c(E,B)/e.height}}

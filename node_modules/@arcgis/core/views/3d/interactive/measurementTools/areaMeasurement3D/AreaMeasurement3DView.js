/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{isSome as e}from"../../../../../core/maybe.js";import{screenPointObjectToArray as t}from"../../../../../core/screenUtils.js";import{c as i}from"../../../../../chunks/vec3f64.js";import{f as s}from"../../../../../chunks/vec3.js";import r from"../../../../../core/Handles.js";import{getSphericalPCPF as a}from"../../../../../geometry/projectionEllipsoid.js";import{i as n,t as o}from"../../../../../chunks/mat4.js";import{canProjectWithoutEngine as h}from"../../../../../geometry/projection.js";import{a as l}from"../../../../../chunks/mat4f64.js";import{sv3d as d}from"../../../support/stack.js";import{GeometryData as m}from"../../../webgl-engine/lib/GeometryData.js";import _ from"../../../webgl-engine/lib/GeometryUtil.js";import c from"../../../webgl-engine/lib/Object3D.js";import{Intersector as p}from"../../../webgl-engine/lib/Intersector.js";import g from"../../../webgl-engine/lib/Geometry.js";import u from"../../../webgl-engine/lib/Layer.js";import{RibbonLineMaterial as L}from"../../../webgl-engine/materials/RibbonLineMaterial.js";import{createStipplePatternSimple as b}from"../../../webgl-engine/materials/lineStippleUtils.js";import{LaserLineRenderer as w}from"../../../support/LaserLineRenderer.js";import{ManipulatorCollection as v}from"../../../../interactive/ManipulatorCollection.js";import{screenToMap3D as f}from"../../editingTools/dragEventPipeline3D.js";import{createSphereManipulator as j}from"../../manipulatorUtils.js";import S from"../support/Label.js";import{copyParameter as P,pointToPointScreenDistance as M,midpoint as V,resizeArray as C}from"../support/viewUtils.js";import O from"../support/LabelSegment.js";import{positionLabelOnPoint as y,positionLabelOnCorner as D,positionLabelOnSegment as R}from"../support/labelUtils.js";import A from"../support/PathSegmentInterpolator.js";import{CheckerBoardMaterial as G}from"../../../webgl-engine/materials/CheckerBoardMaterial.js";const H={laserLineGlowColor:[1,.5,0],laserLineGlowWidth:8,laserLineGlowFalloff:8,laserLineInnerColor:[1,1,1],laserLineInnerWidth:1,laserLineGlobalAlpha:.75,laserLineEnabled:!0,handleColor:[1,.5,0],handleOpacity:.5,handleRadius:5,handleRadiusHovered:10,handleRadiusMouse:10,handleRadiusTouch:25,pathLineColor:[1,.5,0,1],pathLineWidth:3,intersectingLineColor:[1,.2,0,1],perimeterLineColor:[1,.5,0,1],perimeterLineWidth:2,projectionLineColor:[1,.5,0,1],projectionLineWidth:2,projectionLineStippleSize:5,areaColor1:[1,.5,0,.5],areaColor2:[1,1,1,.5],fillColor:[1,.5,0,.5],lineSubdivisions:64,labelDistance:25};class I{constructor(e,t=new v,s={}){this._model=e,this._manipulators=t,this.vertexManipulators=[],this._visible=!1,this._laserLineRenderer=null,this._cursorManipulator=null,this._pathSegmentObjects=[],this._perimeterSegmentObjects=[],this._projectionLineObjects=[],this._areaLabel=new S(16),this._pathLengthLabel=new S(12),this._cursorSegmentLengthLabel=new S(12),this._perimeterLengthLabel=new S(12),this._pathLabelSegments=[],this._perimeterLabelSegments=[],this._cursorSegmentLengthLabelSegment=new O,this._listenerHandles=null,this._origin=i(),this._originTransform=l(),this._tempStartPosition=i(),this._tempEndPosition=i(),this._tempHandlePosition=i(),this._sceneView=this._model.sceneView,this._params=P(H,s),this._layer=new u("path-measurement-tool",{isPickable:!1}),this._createMaterials(),this._createObjects(),this._intersector=new p(this._sceneView.state.mode),this._intersector.options.store=0;const r=j(this._sceneView,this._params.handleColor,this._params.handleOpacity);r.available=!1,r.radius=this._params.handleRadius,r.interactive=!1,this._manipulators.add(r),this._cursorManipulator=r}destroy(){this.hide()}get requiresCursorPoint(){return("initial"===this._model.state||"drawing"===this._model.state)&&this._model.active}get visible(){return this._visible}set visible(e){e?this.show():this.hide()}get testData(){return{labels:{area:this._areaLabel,pathLength:this._pathLengthLabel,cursorSegmentLength:this._cursorSegmentLengthLabel,perimeterLength:this._perimeterLengthLabel},laserLineRenderer:this._laserLineRenderer}}show(){if(this._visible)return;this._visible=!0;const e=this._sceneView._stage,t={glowColor:this._params.laserLineGlowColor,glowWidth:this._params.laserLineGlowWidth,glowFalloff:this._params.laserLineGlowFalloff,innerColor:this._params.laserLineInnerColor,innerWidth:this._params.laserLineInnerWidth,globalAlpha:this._params.laserLineGlobalAlpha};this._laserLineRenderer=new w(this._sceneView.renderCoordsHelper,t),e.addRenderPlugin(this._laserLineRenderer.renderSlots,this._laserLineRenderer),this._addToStage(e),this._areaLabel.addToView(this._sceneView),this._pathLengthLabel.addToView(this._sceneView),this._cursorSegmentLengthLabel.addToView(this._sceneView),this._perimeterLengthLabel.addToView(this._sceneView),this._initializeListeners(),this._updateAll(this._model.viewData)}hide(){if(!this._visible)return;this._visible=!1;const e=this._sceneView._stage;e.removeRenderPlugin(this._laserLineRenderer),this._laserLineRenderer=null,this._destroyListeners(),this._updatePathLength(0),this._removeFromStage(e),this._areaLabel.removeFromView(this._sceneView),this._pathLengthLabel.removeFromView(this._sceneView),this._cursorSegmentLengthLabel.removeFromView(this._sceneView),this._perimeterLengthLabel.removeFromView(this._sceneView),this._sceneView.cursor=null}vertexHandleAt(t,i){const s=this._manipulators.intersect(t,i);return e(s)?this.manipulatorIdToVertexId(s):null}manipulatorIdToVertexId(e){for(let t=0;t<this.vertexManipulators.length;t++){const{id:i}=this.vertexManipulators[t];if(e===i)return t}return null}pick(e){const s=this._sceneView.spatialReference,r=t(e.screenPoint);this._sceneView.sceneIntersectionHelper.intersectToolIntersectorScreen(r,this._intersector);const a=this._intersector.results.min,n=i();if(!a.getIntersectionPoint(n))return new I.PickResult;const o=this._sceneView.renderCoordsHelper.fromRenderCoords(n,s),h="TerrainRenderer"===a.intersector?"surface":"feature";return new I.PickResult(h,n,o)}overlappingHandles(e,t){return M(e,t,this._sceneView)<=this._params.handleRadius}screenToMap3D(){return f(this._sceneView)}_createMaterials(){this._pathLineMaterial=new L({width:this._params.pathLineWidth,color:this._params.pathLineColor,polygonOffset:!0,renderOccluded:4},"path-line"),this._intersectingPathLineMaterial=new L({width:this._params.pathLineWidth,color:this._params.intersectingLineColor,polygonOffset:!0,renderOccluded:4},"intersecting-path-line"),this._perimeterLineMaterial=new L({width:this._params.perimeterLineWidth,color:this._params.perimeterLineColor,polygonOffset:!0,renderOccluded:4},"perimeter-line"),this._intersectingPerimeterLineMaterial=new L({width:this._params.perimeterLineWidth,color:this._params.intersectingLineColor,polygonOffset:!0,renderOccluded:4},"intersecting-perimeter-line"),this._projectionLineMaterial=new L({width:this._params.projectionLineWidth,color:this._params.projectionLineColor,polygonOffset:!0,stipplePattern:b(this._params.projectionLineStippleSize),stippleIntegerRepeats:!1,renderOccluded:4},"projection-line"),this._checkerBoardMaterial=new G({color1:this._params.areaColor1,color2:this._params.areaColor2,transparent:!0,writeDepth:!1,polygonOffset:!0,renderOccluded:4},"checker-board")}_createObjects(){this._cursorSegmentObject=new c,this._areaObject=new c}_addToStage(e){e.add(0,this._layer),e.add(3,this._pathLineMaterial),e.add(3,this._intersectingPathLineMaterial),e.add(3,this._perimeterLineMaterial),e.add(3,this._intersectingPerimeterLineMaterial),e.add(3,this._projectionLineMaterial),e.add(3,this._checkerBoardMaterial),e.addToViewContent([this._layer.id])}_removeFromStage(e){e.removeFromViewContent([this._layer.id]),e.remove(0,this._layer.id),e.remove(3,this._pathLineMaterial.id),e.remove(3,this._intersectingPathLineMaterial.id),e.remove(3,this._perimeterLineMaterial.id),e.remove(3,this._intersectingPerimeterLineMaterial.id),e.remove(3,this._projectionLineMaterial.id),e.remove(3,this._checkerBoardMaterial.id)}_syncViewData(e){if(!this._visible)return"none";const t=e.pathChanges;"full"===t.change?this._updateAll(e):"incremental"===t.change&&(t.updatedVertices.forEach((t=>{const i=(t-1+this._model.path.length)%this._model.path.length;this._updatePathSegment(e,t),this._updatePathSegment(e,i),this._updateVertexHandle(e,t),this._updateArea(e),this._updatePerimeterSegments(e),this._updateProjectionLines(e),this._updateLaserLine(),this._updateLabels(e)})),t.updatedVertices.has(this._model.path.length-1)&&this._updateCursorSegment());const i=t.change;return t.clear(),i}_updateAfterSyncViewData(e){const t=this._model.viewData;!("full"===this._syncViewData(t))&&e&&e(t)}_updateOrigin(e){V(e.positionsRenderCoords,this._origin),n(this._originTransform),o(this._originTransform,this._originTransform,this._origin)}_updateAll(e){this._updateOrigin(e),this._updatePathLength(e.path.length),this._updatePathSegments(e),this._updatePerimeterSegments(e),this._updateHandles(e),this._updateArea(e),this._updateProjectionLines(e),this._updateLabels(e),this._updateLaserLine()}_updateCameraDependent(e){this._updateHandles(e),this._updateProjectionLines(e),this._updateLabels(e)}_updatePathLength(e){this._resizeObject3DArray(this._pathSegmentObjects,e),this._resizeObject3DArray(this._perimeterSegmentObjects,e),this._resizeManipulatorArray(this.vertexManipulators,e),C(this._pathLabelSegments,e,(()=>new O)),C(this._perimeterLabelSegments,e,(()=>new O))}_updatePathSegments(e){for(let t=0;t<this._pathSegmentObjects.length;++t)this._updatePathSegment(e,t);this._updateCursorSegment()}_updatePathSegment(e,t){const i=e.path,s=this._pathSegmentObjects[t];e.validMeasurement||t<i.length-1?(this._createInterpolatedLineGeometry(s,e.intersectingSegments.has(t)?this._intersectingPathLineMaterial:this._pathLineMaterial,"path-segment",e.positionsRenderCoords[t],e.positionsRenderCoords[(t+1)%i.length],this._origin,this._originTransform,this._model.measurementMode,this._pathLabelSegments[t],e.validMeasurement?"center":"end"),this._addObject3D(s)):(s.removeAllGeometries(),this._removeObject3D(s))}_updateCursorSegment(){const e=this._sceneView.renderCoordsHelper,t=this._model.path,i=this._cursorSegmentObject;t.length>0&&"drawing"===this._model.state&&this._model.cursorPoint?(e.toRenderCoords(t.back,this._tempStartPosition),e.toRenderCoords(this._model.cursorPoint,this._tempEndPosition),this._createInterpolatedLineGeometry(i,this._pathLineMaterial,"path-segment",this._tempStartPosition,this._tempEndPosition,this._origin,this._originTransform,this._model.measurementMode,this._cursorSegmentLengthLabelSegment,"end"),this._addObject3D(i)):(i.removeAllGeometries(),this._removeObject3D(i))}_updatePerimeterSegments(e){for(let t=0;t<this._perimeterSegmentObjects.length;++t)this._updatePerimeterSegment(e,t)}_updatePerimeterSegment(e,t){const i=e.path,s=this._perimeterSegmentObjects[t];e.validMeasurement&&"geodesic"!==this._model.measurementMode?(this._updatePerimeterSegmentObject(s,e.positionsFittedRenderCoords[t],e.positionsFittedRenderCoords[(t+1)%i.length],this._origin,this._originTransform,e.intersectingSegments.has(t),this._perimeterLabelSegments[t]),this._addObject3D(s)):(s.removeAllGeometries(),this._removeObject3D(s))}_updatePerimeterSegmentObject(e,t,i,s,r,a,n){this._createInterpolatedLineGeometry(e,a?this._intersectingPerimeterLineMaterial:this._perimeterLineMaterial,"perimeter-segment",t,i,s,r,this._model.measurementMode,n)}_updateHandles(e){for(let t=0;t<this.vertexManipulators.length;++t)this._updateVertexHandle(e,t);this._updateCursorHandle()}_updateVertexHandle(e,t){const{manipulator:i}=this.vertexManipulators[t];i.renderLocation=e.positionsRenderCoords[t]}_updateCursorHandle(){const e=this._cursorManipulator;"drawing"===this._model.state&&this._model.cursorPoint?(e.available=!0,e.location=this._model.cursorPoint):e.available=!1}_updateArea(e){switch(this._model.measurementMode){case"euclidean":this._updateAreaEuclidean(e);break;case"geodesic":this._updateAreaGeodesic()}}_updateAreaEuclidean(e){const t=this._areaObject;if(e.validMeasurement&&0===e.intersectingSegments.size&&e.triangleIndices){const r=[],a=i();e.positionsFittedRenderCoords.forEach((e=>{s(a,e,this._origin),r.push(a[0],a[1],a[2])}));const n=[];e.positionsProjected.forEach((e=>{n.push(e[0],e[1])}));const o=new m({position:{size:3,data:r},uv0:{size:2,data:n}},{position:e.triangleIndices,uv0:e.triangleIndices}),h=new g(o,"area");t.removeAllGeometries(),t.addGeometry(h,this._checkerBoardMaterial,this._originTransform),this._addObject3D(t),this._checkerBoardMaterial.setParameterValues({size:[e.checkerSize,e.checkerSize]})}else t.removeAllGeometries(),this._removeObject3D(t)}_updateAreaGeodesic(){const e=this._areaObject;e.removeAllGeometries(),this._removeObject3D(e)}_updateProjectionLines(e){const t=e.path;this._resizeObject3DArray(this._projectionLineObjects,t.length);for(let i=0;i<t.length;++i)this._updateProjectionLine(e,i)}_updateProjectionLine(e,t){const r=this._projectionLineObjects[t];if(r.removeAllGeometries(),e.validMeasurement&&"euclidean"===this._model.measurementMode){const e=i();s(e,this._model.viewData.positionsRenderCoords[t],this._origin);const a=i();s(a,this._model.viewData.positionsFittedRenderCoords[t],this._origin);const n=new g(_.createPolylineGeometry([e,a]),"projected-line");r.addGeometry(n,this._projectionLineMaterial,this._originTransform),this._addObject3D(r)}else this._removeObject3D(r)}_updateLabels(e){const t=this._sceneView.state.camera,i=this._params.labelDistance,s=this._model,r="geodesic"===s.measurementMode,a="drawing"===s.state,n=(e,t)=>e.visible&&t.visible&&this._sceneView.overlay.overlaps(e.textItem,t.textItem);{const i=this._areaLabel,r=y(i,e.areaCentroid,t);i.text=s.areaLabel,i.visible=r&&e.validMeasurement&&0===e.intersectingSegments.size&&null!=s.areaLabel}{const r=this._pathLengthLabel,n=this._pathLabelSegments[e.pathLengthLabelSegmentIndex],o=this._cursorSegmentLengthLabelSegment,h=D(r,n,o,i,t);r.text=s.pathLengthLabel,r.visible=h&&a&&s.path.length>0}{const e=this._cursorSegmentLengthLabel,r=this._cursorSegmentLengthLabelSegment,n=R(e,r,i,"bottom",t);e.text=s.cursorSegmentLengthLabel,e.visible=n&&a&&s.cursorSegmentLength&&0!==s.cursorSegmentLength.value}n(this._cursorSegmentLengthLabel,this._pathLengthLabel)&&(this._cursorSegmentLengthLabel.visible=!1),n(this._pathLengthLabel,this._areaLabel)&&(this._pathLengthLabel.visible=!1);{const a=this._perimeterLengthLabel;if(s.validMeasurement&&0===e.intersectingSegments.size)for(let o=0;o<e.path.length;++o){const h=(e.perimeterLengthLabelSegmentIndex+o)%e.path.length,l=r?this._pathLabelSegments[h]:this._perimeterLabelSegments[h],d=R(a,l,i,"top",t);if(a.text=s.perimeterLengthLabel,a.visible=d,!n(a,this._areaLabel))break;a.visible=!1}else a.visible=!1}}_getFocusPoint(){const t=this._model,i=this._model.lastDraggedVertex;switch(t.state){case"drawing":return t.cursorPoint?t.cursorPoint:t.path.vertex(e(i)?i:t.path.length-1);case"editing":return e(i)?t.path.vertex(i):null;default:return t.cursorPoint}}_updateLaserLine(){const e=this._model,t=this._params.laserLineEnabled&&"measured"!==e.state&&e.active;this._laserLineRenderer.pointDistanceEnabled=!1,this._laserLineRenderer.lineVerticalPlaneEnabled=!1;const i=this._getFocusPoint();if(t&&i){const e=this._tempHandlePosition;this._sceneView.renderCoordsHelper.toRenderCoords(i,e),this._laserLineRenderer.heightManifoldTarget=e,this._laserLineRenderer.heightManifoldEnabled=!0}else this._laserLineRenderer.heightManifoldEnabled=!1}_addObject3D(e){e.parentLayer||(this._layer.addObject(e),this._sceneView._stage.add(1,e))}_removeObject3D(e){e.parentLayer&&(this._layer.removeObject(e),this._sceneView._stage.remove(1,e.id))}_resizeObject3DArray(e,t){C(e,t,(()=>new c),(e=>{this._removeObject3D(e)}))}_resizeManipulatorArray(e,t){C(e,t,(()=>{const e=j(this._sceneView,this._params.handleColor,this._params.handleOpacity);e.radius=this._params.handleRadius;return{id:this._manipulators.add(e),manipulator:e}}),(({manipulator:e})=>{this._manipulators.remove(e)}))}_createInterpolatedLineGeometry(e,t,i,r,a,n,o,h,l,m){const c=this._sceneView.renderCoordsHelper,p=[],u=[],L=(e,t)=>{const i=d.get();s(i,e,n),p.push(i),u.push(t)};if("euclidean"===h){const e=d.get();V([r,a],e);const t=d.get();c.worldUpAtPosition(e,t),L(r,t),L(a,t),l&&l.update(r,a,m)}else{const e=this._getSegmentInterpolator(r,a),t=this._params.lineSubdivisions+1&-2;let i=null,s=null,n=t/2-1,o=t/2;"start"===m?(n=0,o=1):"end"===m&&(n=t-2,o=t-1);for(let r=0;r<t;++r){const a=r/(t-1),h=d.get(),l=d.get();e.eval(a,h),c.worldUpAtPosition(h,l),r===n&&(i=h),r===o&&(s=h),L(h,l)}l&&l.update(i,s,m)}const b=new g(_.createPolylineGeometry(p,u),i);e.removeAllGeometries(),e.addGeometry(b,t,o)}_getSegmentInterpolator(e,t){const i=this._sceneView.spatialReference;if(h(i,a(i))){const i=this._sceneView.renderCoordsHelper.spatialReference;return new A.Spherical(e,t,i,i)}return new A.Linear(e,t)}_initializeListeners(){this._listenerHandles=new r,this._listenerHandles.add([this._model.watch(["state","lastDraggedVertex"],(()=>this._updateLaserLine())),this._model.watch("cursorPoint",(()=>this._updateAfterSyncViewData((e=>{this._updateCursorSegment(),this._updateCursorHandle(),"drawing"===this._model.state&&this._updateLabels(e),this._updateLaserLine()})))),this._sceneView.state.watch("camera",(()=>this._updateAfterSyncViewData((()=>this._updateCameraDependent(this._model.viewData))))),this._model.watch(["unit","measurementMode"],(()=>this._updateAll(this._model.viewData))),this._model.watch(["areaLabel","cursorSegmentLengthLabel","pathLengthLabel","perimeterLengthLabel"],(()=>{this._updateLabels(this._model.viewData)})),this._model.watch(["active"],(()=>{this._updateLaserLine(),this._syncViewData(this._model.viewData)})),this._model.watch("viewData",(e=>this._syncViewData(e)))])}_destroyListeners(){this._listenerHandles.destroy(),this._listenerHandles=null}}I._handleGeometry=new g(_.createSphereGeometry(1,32,32),"handle"),function(e){e.PickRequest=class{};e.PickResult=class{constructor(e=null,t=null,i=null){this.type=e,this.scenePoint=t,this.mapPoint=i}}}(I||(I={}));var x=I;export default x;

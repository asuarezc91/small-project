/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import"../../../../../core/has.js";import"../../../../../core/Logger.js";import"../../../../../core/accessorSupport/ensureType.js";import{property as t}from"../../../../../core/accessorSupport/decorators/property.js";import{subclass as r}from"../../../../../core/accessorSupport/decorators/subclass.js";import"../../../../../core/urlUtils.js";import"../../../../../core/uuid.js";import"../../../../../portal/support/resourceExtension.js";import s from"../../../../../core/Accessor.js";import{onLocaleChange as a}from"../../../../../intl/locale.js";import{nextHighestPowerOfTen as n}from"../../../../../core/mathUtils.js";import{fetchMessageBundle as i}from"../../../../../intl/messages.js";import"../../../../../intl.js";import o from"../../../../../core/Handles.js";import{whenTrue as h}from"../../../../../core/watchUtils.js";import{getSphericalPCPF as m,SphericalECEFSpatialReference as d,WGS84ECEFSpatialReference as l}from"../../../../../geometry/projectionEllipsoid.js";import{convertUnit as u,preferredImperialAreaUnit as p,preferredMetricAreaUnit as g,preferredImperialLengthUnit as c,preferredMetricLengthUnit as L}from"../../../../../core/unitUtils.js";import{canProjectWithoutEngine as y}from"../../../../../geometry/projection.js";import v from"../../../../../core/Quantity.js";import{formatDecimal as D}from"../../../../../core/quantityFormatUtils.js";import{AreaMeasurement3D as f}from"../../graphics/AreaMeasurement3D.js";import _ from"../support/measurementUtils.js";import C from"./MeasurementData.js";import{clone as O}from"../support/setUtils.js";import M from"./PathChanges.js";import j from"../support/Path.js";import w from"../support/UnitNormalizer.js";let P=class extends s{constructor(){super(...arguments),this._unitNormalizer=new w,this._measurementData=new C,this._measurementDataChanges=new M,this._viewDataChanges=new M,this._handles=new o,this.dataObject=new f,this.path=new j,this.pathVersion=0,this.cursorPoint=null,this.state="initial",this.lastDraggedVertex=null,this.mode="auto",this.unit="metric",this.active=!1,this.maxRelativeErrorCoplanar=.005,this.maxRelativeErrorAlmostCoplanar=.01,this.verticalAngleThreshold=80,this.geodesicMeasurementDistanceThreshold=1e5}initialize(){i("esri/core/t9n/Units").then((e=>{this.messages=e})),this._handles.add(a((async()=>{this.messages=await i("esri/core/t9n/Units")}))),this._handles.add(h(this.sceneView,"ready",(()=>{const{spatialReference:e}=this.sceneView,t=m(e),r=t===d?l:t,s=!e||y(e,r)?r:e;this._worldSpatialReference=s,this._unitNormalizer.spatialReference=s})),"scene-view"),this.reset();const e=()=>{this._set("pathVersion",this.pathVersion+1)};this._handles.add(this.path.on("cleared",(()=>{this._measurementDataChanges.fullChange(),this._set("pathVersion",0),this.dataObject.geometry=null}))),this._handles.add(this.path.on("vertex-added",(()=>{this._measurementDataChanges.fullChange(),e(),this.dataObject.geometry=this.path.toPolygon()}))),this._handles.add(this.path.on("vertex-removed",(()=>{this._measurementDataChanges.fullChange(),e(),this.dataObject.geometry=this.path.toPolygon()}))),this._handles.add(this.path.on("vertex-updated",(t=>{this._measurementDataChanges.incrementalChange(t.index),e(),this.dataObject.geometry=this.path.toPolygon()}))),this._handles.add(this.dataObject.watch("geometry",(()=>{const e=this.measurementData;this.dataObject.result={area:e.area,geodesicArea:e.geodesicArea,pathLength:e.pathLength,geodesicPathLength:e.geodesicPathLength,perimeterLength:e.perimeterLength}})))}destroy(){this._handles.destroy(),this._handles=null}get validMeasurement(){return this.path.length>=3&&"measured"===this.state||"editing"===this.state}get isMeasuring(){return this.path.length>=1}get measurementData(){this._viewDataChanges.merge(this._measurementDataChanges),this._measurementDataChanges.clear();const e=O(this._measurementData.intersectingSegments),t=O(this._measurementData.geodesicIntersectingSegments);return this._measurementData.update(this.path,this.sceneView,this._unitNormalizer,this.validMeasurement,this.sceneView.renderSpatialReference,this._worldSpatialReference,{maxRelativeErrorCoplanar:this.maxRelativeErrorCoplanar,maxRelativeErrorAlmostCoplanar:this.maxRelativeErrorAlmostCoplanar,verticalAngleThreshold:this.verticalAngleThreshold}),_.compareSets(this._measurementData.intersectingSegments,e)||this._viewDataChanges.fullChange(),_.compareSets(this._measurementData.geodesicIntersectingSegments,t)||this._viewDataChanges.fullChange(),this._measurementData}get area(){return this.measurementData.area}get geodesicArea(){return this.measurementData.geodesicArea}get areaLabel(){return this._formatAreaLabel(this.messages,"geodesic"===this.measurementMode?this.measurementData.geodesicArea:this.measurementData.area,this.unit)}get pathLength(){return this.measurementData.pathLength}get geodesicPathLength(){return this.measurementData.geodesicPathLength}get pathLengthLabel(){return this._formatLengthLabel(this.messages,"geodesic"===this.measurementMode?this.measurementData.geodesicPathLength:this.measurementData.pathLength,this.unit)}get perimeterLength(){return this.measurementData.perimeterLength}get geodesicPerimeterLength(){return this.measurementData.geodesicPathLength}get perimeterLengthLabel(){return this.measurementData.perimeterLength&&this._formatLengthLabel(this.messages,"geodesic"===this.measurementMode?this.measurementData.geodesicPathLength:this.measurementData.perimeterLength,this.unit)}get cursorSegmentLength(){return this.path.back&&this.cursorPoint&&new v(this._unitNormalizer.normalizeDistance(_.segmentLengthEuclidean(this.path.back,this.cursorPoint,this._worldSpatialReference)),"meters")}get geodesicCursorSegmentLength(){return this.path.back&&this.cursorPoint&&new v(_.segmentLengthGeodesic(this.path.back,this.cursorPoint),"meters")}get cursorSegmentLengthLabel(){return this._formatLengthLabel(this.messages,"geodesic"===this.measurementMode?this.geodesicCursorSegmentLength:this.cursorSegmentLength,this.unit)}get viewData(){const e=this.measurementData,t="geodesic"===this.measurementMode,r=t?this.geodesicArea:this.area;let s=1;if(r){const e=this._toPreferredAreaUnit(r,this.unit);s=n(Math.sqrt(e.value)/Math.sqrt(300)),s*=Math.sqrt(u(1,e.unit,"square-meters")),s/=this._unitNormalizer.normalizeDistance(1)}return{validMeasurement:this.validMeasurement,path:this.path,pathChanges:this._viewDataChanges,positionsGeographic:e.positionsGeographic,positionsRenderCoords:e.positionsRenderCoords,positionsProjected:e.positionsProjectedWorldCoords,positionsFittedRenderCoords:e.positionsFittedRenderCoords,intersectingSegments:t?e.geodesicIntersectingSegments:e.intersectingSegments,triangleIndices:t?e.geodesicTriangleIndices:e.triangleIndices,fittingMode:e.fittingMode,areaCentroid:t?e.geodesicAreaCentroidRenderCoords:e.areaCentroidRenderCoords,pathLengthLabelSegmentIndex:this.validMeasurement?0:this.path.length-2,perimeterLengthLabelSegmentIndex:0,checkerSize:s}}get measurementMode(){let e=this.mode;if("auto"===e){e="euclidean";(this.geodesicPathLength?this.geodesicPathLength.value:0)+(!this.validMeasurement&&this.geodesicCursorSegmentLength?this.geodesicCursorSegmentLength.value:0)>this.geodesicMeasurementDistanceThreshold&&(e="geodesic")}return null==this.geodesicPathLength&&(e="euclidean"),e}reset(){this.clearMeasurement()}clearMeasurement(){this.path.clear(),this.state="initial",this.cursorPoint=null}finishMeasurement(){this.path.length<3?this.clearMeasurement():(this._measurementDataChanges.fullChange(),this.state="measured")}_preferredAreaUnit(e,t){switch(t){case"metric":return g(e.value,e.unit);case"imperial":return p(e.value,e.unit);default:return t}}_preferredLengthUnit(e,t){const r=this._deriveLengthUnitFromAreaUnit(t);switch(r){case"metric":return L(e.value,e.unit);case"imperial":return c(e.value,e.unit);default:return r}}_toPreferredAreaUnit(e,t){return e.toUnit(this._preferredAreaUnit(e,t))}_toPreferredLengthUnit(e,t){return e.toUnit(this._preferredLengthUnit(e,t))}_formatAreaLabel(e,t,r){return e&&t&&D(e,t,this._preferredAreaUnit(t,r))}_formatLengthLabel(e,t,r){return e&&t&&D(e,t,this._preferredLengthUnit(t,r))}_deriveLengthUnitFromAreaUnit(e){switch(e){case"metric":return"metric";case"imperial":return"imperial";case"square-inches":return"inches";case"square-feet":return"feet";case"square-yards":return"yards";case"square-miles":return"miles";case"square-us-feet":return"us-feet";case"square-millimeters":return"millimeters";case"square-centimeters":return"centimeters";case"square-decimeters":return"decimeters";case"square-meters":return"meters";case"square-kilometers":return"kilometers";case"acres":return"imperial";case"ares":case"hectares":return"metric"}throw new Error("unhandled area unit")}};e([t()],P.prototype,"messages",void 0),e([t()],P.prototype,"dataObject",void 0),e([t({constructOnly:!0})],P.prototype,"sceneView",void 0),e([t({readOnly:!0})],P.prototype,"path",void 0),e([t({readOnly:!0})],P.prototype,"pathVersion",void 0),e([t()],P.prototype,"cursorPoint",void 0),e([t()],P.prototype,"state",void 0),e([t()],P.prototype,"lastDraggedVertex",void 0),e([t()],P.prototype,"mode",void 0),e([t()],P.prototype,"unit",void 0),e([t()],P.prototype,"active",void 0),e([t({readOnly:!0,dependsOn:["path.length","state"]})],P.prototype,"validMeasurement",null),e([t({readOnly:!0,dependsOn:["path.length"]})],P.prototype,"isMeasuring",null),e([t({readOnly:!0,dependsOn:["pathVersion","validMeasurement","maxRelativeErrorCoplanar","maxRelativeErrorAlmostCoplanar","verticalAngleThreshold"],autoTracked:!1})],P.prototype,"measurementData",null),e([t({readOnly:!0,dependsOn:["measurementData"]})],P.prototype,"area",null),e([t({readOnly:!0,dependsOn:["measurementData"]})],P.prototype,"geodesicArea",null),e([t({readOnly:!0,dependsOn:["messages","measurementData","unit","measurementMode"]})],P.prototype,"areaLabel",null),e([t({readOnly:!0,dependsOn:["measurementData"]})],P.prototype,"pathLength",null),e([t({readOnly:!0,dependsOn:["measurementData"]})],P.prototype,"geodesicPathLength",null),e([t({readOnly:!0,dependsOn:["messages","measurementData","unit","measurementMode"]})],P.prototype,"pathLengthLabel",null),e([t({readOnly:!0,dependsOn:["measurementData"]})],P.prototype,"perimeterLength",null),e([t({readOnly:!0,dependsOn:["measurementData"]})],P.prototype,"geodesicPerimeterLength",null),e([t({readOnly:!0,dependsOn:["messages","measurementData","unit","measurementMode"]})],P.prototype,"perimeterLengthLabel",null),e([t({readOnly:!0,dependsOn:["path.back","cursorPoint"]})],P.prototype,"cursorSegmentLength",null),e([t({readOnly:!0,dependsOn:["path.back","cursorPoint"]})],P.prototype,"geodesicCursorSegmentLength",null),e([t({readOnly:!0,dependsOn:["messages","unit","measurementMode","cursorSegmentLength","geodesicCursorSegmentLength"]})],P.prototype,"cursorSegmentLengthLabel",null),e([t({readOnly:!0,dependsOn:["unit","measurementMode","measurementData"]})],P.prototype,"viewData",null),e([t()],P.prototype,"maxRelativeErrorCoplanar",void 0),e([t()],P.prototype,"maxRelativeErrorAlmostCoplanar",void 0),e([t()],P.prototype,"verticalAngleThreshold",void 0),e([t()],P.prototype,"geodesicMeasurementDistanceThreshold",void 0),e([t({readOnly:!0,dependsOn:["mode","validMeasurement","geodesicPathLength","geodesicCursorSegmentLength","geodesicMeasurementDistanceThreshold"]})],P.prototype,"measurementMode",null),P=e([r("esri.views.3d.interactive.measurementTools.areaMeasurement3D.AreaMeasurement3DModel")],P);var b=P;export default b;

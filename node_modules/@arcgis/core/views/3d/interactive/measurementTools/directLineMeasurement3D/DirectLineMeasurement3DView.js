/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{isNone as e,isSome as t,unwrap as i}from"../../../../../core/maybe.js";import{sign as s,nextHighestPowerOfTen as n,deg2rad as r}from"../../../../../core/mathUtils.js";import{screenPointObjectToArray as o,castRenderScreenPointArray3 as a,castRenderScreenPointArray as l}from"../../../../../core/screenUtils.js";import{c as h}from"../../../../../chunks/vec3f64.js";import{a as d,b as c,g as _}from"../../../../../chunks/vec3.js";import m from"../../../../../core/Handles.js";import{getReferenceEllipsoid as g}from"../../../../../geometry/projectionEllipsoid.js";import{preferredImperialLengthUnit as u,convertUnit as v}from"../../../../../core/unitUtils.js";import{i as p,t as b}from"../../../../../chunks/mat4.js";import{a as L}from"../../../../../chunks/mat4f64.js";import{formatDecimal as w,formatDMS as S,formatImperialLength as P,formatImperialVerticalLength as f,formatMetricLength as D,formatMetricVerticalLength as z}from"../../../../../core/quantityFormatUtils.js";import{g as y}from"../../../../../chunks/vec2.js";import{getElevationAtPoint as C}from"../../../support/ElevationProvider.js";import{sv3d as M,sv2d as j}from"../../../support/stack.js";import{lineSegment as A}from"../../../support/geometryUtils.js";import{Intersector as H}from"../../../webgl-engine/lib/Intersector.js";import{createStipplePatternSimple as E}from"../../../webgl-engine/materials/lineStippleUtils.js";import{f as T}from"../../../../../chunks/vec4f32.js";import{LaserlineVisualElement as G}from"../../visualElements/LaserlineVisualElement.js";import{RightAngleQuadVisualElement as R}from"../../visualElements/RightAngleQuadVisualElement.js";import{createSphereManipulator as x}from"../../manipulatorUtils.js";import{copyParameter as k,pointToPointScreenDistance as V,screenSpaceTangent as F,midpoint as O}from"../support/viewUtils.js";import{mirrorPosition as W}from"../support/labelUtils.js";import{LabelVisualElement as U}from"../../visualElements/LabelVisualElement.js";import{LineVisualElement as I}from"../../visualElements/LineVisualElement.js";import{MeasurementArrowVisualElement as Q}from"../../visualElements/MeasurementArrowVisualElement.js";import{GeodesicSegment as q,EuclideanSegment as N}from"../../visualElements/support/Segment.js";const B=T(1,.5,0,.75),J={laserLineGlowColor:[1,.5,0],laserLineGlowWidth:8,laserLineGlowFalloff:8,laserLineInnerColor:[1,1,1],laserLineInnerWidth:.75,laserLineGlobalAlpha:.75,laserLineEnabled:!0,handleColor:[1,.5,0],handleOpacity:.5,handleRadius:5,triangleColor:B,triangleLineWidth:3,triangleCornerSize:32,triangleSubdivisions:128,arrowWidth:16,arrowOutlineColor:[1,.5,0,1],arrowOutlineWidth:.2,arrowStripeEvenColor:[1,1,1,1],arrowStripeOddColor:[1,.5,0,1],arrowStripeLength:16,arrowSubdivisions:128,geodesicProjectionLineWidth:2,geodesicProjectionLineColor:B,guideLineWidth:2,guideLineColor:B,guideStippleLengthPixels:6,labelDistance:25,direcLabelFontSize:16,horizontalLabelFontSize:12,verticalLabelFontSize:12};class K{constructor(e,t={}){this._visible=!1,this._measurementArrow=null,this._horizontalAndVerticalSegmentLines=null,this._rightAngleQuad=null,this._directSegmentLabel=null,this._verticalSegmentLabel=null,this._horizontalSegmentLabel=null,this._projectedGeodesicLine=null,this._geodesicStartHint=null,this._geodesicEndHint=null,this._laserLine=null,this._directSegmentLabelMeasurement="directDistance",this._horizontalSegmentLabelMeasurement="horizontalDistance",this._verticalSegmentLabelMeasurement="verticalDistance",this._handles=new m,this._listenerHandles=null,this._cursorPosition=h(),this._startPosition=h(),this._endPosition=h(),this._cornerPosition=h(),this._origin=h(),this._originTransform=L(),this._lastDraggedHandle=null,this._viewMode=X.None,this._viewModeDirty=!0,this._triangleCollapseRatioThreshold=.03,this._model=e,this._view=e.sceneView,this._params=k(J,t),this._measurementArrow=new Q({attached:!0,view:this._view,geometry:null,renderOccluded:4}),this._horizontalAndVerticalSegmentLines=new I({attached:!0,view:this._view,width:this._params.triangleLineWidth,color:this._params.triangleColor,renderOccluded:4}),this._rightAngleQuad=new R({attached:!0,view:this._view,color:B,renderOccluded:4}),this._directSegmentLabel=new U({attached:!0,view:this._view,fontSize:this._params.direcLabelFontSize}),this._verticalSegmentLabel=new U({attached:!0,view:this._view,fontSize:this._params.verticalLabelFontSize}),this._horizontalSegmentLabel=new U({attached:!0,view:this._view,fontSize:this._params.horizontalLabelFontSize}),this._projectedGeodesicLine=new I({attached:!0,view:this._view,width:this._params.geodesicProjectionLineWidth,color:this._params.geodesicProjectionLineColor,polygonOffset:!0,stipplePattern:E(this._params.guideStippleLengthPixels),stippleIntegerRepeats:!1,renderOccluded:4}),this._geodesicStartHint=new I({attached:!0,view:this._view,width:this._params.guideLineWidth,color:this._params.geodesicProjectionLineColor,polygonOffset:!0,stipplePattern:E(this._params.guideStippleLengthPixels),stippleIntegerRepeats:!1,renderOccluded:4}),this._geodesicEndHint=new I({attached:!0,view:this._view,width:this._params.guideLineWidth,color:this._params.geodesicProjectionLineColor,polygonOffset:!0,stipplePattern:E(this._params.guideStippleLengthPixels),stippleIntegerRepeats:!1,renderOccluded:4}),this._laserLine=new G({view:this._view,attached:!0}),this._intersector=new H(this._view.state.mode),this._intersector.options.store=0,this._initializeListeners()}destroy(){this.hide(),this._destroyListeners(),this._handles.destroy(),this._handles=null,this._measurementArrow.destroy(),this._measurementArrow=null,this._horizontalAndVerticalSegmentLines.destroy(),this._horizontalAndVerticalSegmentLines=null,this._rightAngleQuad.destroy(),this._rightAngleQuad=null,this._directSegmentLabel.destroy(),this._directSegmentLabel=null,this._verticalSegmentLabel.destroy(),this._verticalSegmentLabel=null,this._horizontalSegmentLabel.destroy(),this._horizontalSegmentLabel=null,this._projectedGeodesicLine.destroy(),this._projectedGeodesicLine=null,this._geodesicStartHint.destroy(),this._geodesicStartHint=null,this._geodesicEndHint.destroy(),this._geodesicEndHint=null}get requiresCursorPoint(){return"initial"===this._model.state&&this._model.active}get cameraAboveGround(){return this._view.state.camera.aboveGround}get visible(){return this._visible}set visible(e){e?this.show():this.hide()}get viewMode(){return this._viewModeDirty&&(this._viewMode=this._computeViewMode()),this._viewMode}_computeViewMode(){this._viewModeDirty=!1;const t=this._model,i=t.model,s=i.measurement,n="geodesic"===t.measurementMode;if(e(i.startPoint)||e(i.endPoint)||i.startPoint.equals(i.endPoint))return X.None;if(n){if(!this._model.geodesicDistanceExceeded)return X.Direct;if(this._requiresGeodesicGuideAt(this._startPosition)||this._requiresGeodesicGuideAt(this._endPosition))return X.ProjectedGeodesic}if(e(s))return X.Direct;return Math.min(s.verticalDistance.value/s.horizontalDistance.value,s.horizontalDistance.value/s.verticalDistance.value)<this.triangleCollapseRatioThreshold?X.Direct:X.Triangle}get triangleCollapseRatioThreshold(){return this._triangleCollapseRatioThreshold}set triangleCollapseRatioThreshold(e){this._triangleCollapseRatioThreshold=e,this._viewModeDirty=!0,this._geometryChanged()}get testData(){const e=this._laserLine.testData,i="geodesic"===this._model.measurementMode;return{labels:{direct:i?this._horizontalSegmentLabel:this._directSegmentLabel,horizontal:i?this._directSegmentLabel:this._horizontalSegmentLabel,vertical:this._verticalSegmentLabel},laserLineRenderer:{heightManifoldEnabled:!!t(e)&&e.heightManifoldEnabled,heightManifoldTarget:t(e)?e.heightManifoldTarget:null,pointDistanceEnabled:!!t(e)&&e.pointDistanceEnabled,pointDistanceOrigin:t(e)?e.pointDistanceOrigin:null,pointDistanceTarget:t(e)?e.pointDistanceTarget:null,lineVerticalPlaneEnabled:!!t(e)&&e.lineVerticalPlaneEnabled},stripeLength:this._computeMeasurementArrowStripeLength(this._model.model)}}get directLabelText(){return this._directSegmentLabel.text}get horizontalLabelText(){return this._horizontalSegmentLabel.text}get verticalLabelText(){return this._verticalSegmentLabel.text}createManipulators(){const e=()=>{const e=x(this._view,this._params.handleColor,this._params.handleOpacity);return e.available=!1,e.radius=this._params.handleRadius,e},t=e(),s=e();this._model.startPoint&&(t.location=i(this._model.startPoint),t.available=!0),this._model.endPoint&&(s.location=i(this._model.endPoint),s.available=!0);const n=()=>{let e=this._lastDraggedHandle;t.grabbing&&!s.grabbing&&(e="start"),s.grabbing&&!t.grabbing&&(e="end"),t.grabbing||s.grabbing||(e=null);const i=e!==this._lastDraggedHandle;this._lastDraggedHandle=e,i&&this.visible&&this._updateLaserLine()};return this._handles.add([t.events.on("grab-changed",(()=>{n()})),s.events.on("grab-changed",(()=>{n()}))]),{start:t,end:s}}show(){this._visible||(this._visible=!0,this._laserLine.style={innerColor:this._params.laserLineInnerColor,innerWidth:this._params.laserLineInnerWidth,glowColor:this._params.laserLineGlowColor,glowWidth:this._params.laserLineGlowWidth,glowFalloff:this._params.laserLineGlowFalloff,globalAlpha:this._params.laserLineGlobalAlpha},this._laserLine.visible=!0,this._viewModeDirty=!0,this._updateCursorPosition(),this._updateStartPosition(),this._updateEndPosition(),this._updateLaserLine(),this._geometryChanged())}hide(){this._visible&&(this._visible=!1,this._measurementArrow.visible=!1,this._horizontalAndVerticalSegmentLines.visible=!1,this._rightAngleQuad.visible=!1,this._directSegmentLabel.visible=!1,this._verticalSegmentLabel.visible=!1,this._horizontalSegmentLabel.visible=!1,this._projectedGeodesicLine.visible=!1,this._geodesicStartHint.visible=!1,this._geodesicEndHint.visible=!1,this._laserLine.visible=!1,this._view.cursor=null)}pick(e){const t=this._view.spatialReference,i=o(e.screenPoint);this._view.sceneIntersectionHelper.intersectToolIntersectorScreen(i,this._intersector);const s=this._intersector.results.min,n=h();if(!s.getIntersectionPoint(n))return new K.PickResult;const r=this._view.renderCoordsHelper.fromRenderCoords(n,t),a="TerrainRenderer"===s.intersector?"ground":"feature";return new K.PickResult(a,n,r)}getElevation(e){return this._view.basemapTerrain.ready&&C(this._view.elevationProvider,e)||0}overlappingHandles(e,t){return V(e,t,this._view)<=this._params.handleRadius}_getLabelPositions(e,t,i,n,r){const o=this._viewMode!==X.Triangle,h=a(M.get()),d=a(M.get());r.projectToRenderScreen(i,h),r.projectToRenderScreen(t,d);const c={direct:o?"top":"bottom",horizontal:"top",vertical:h[0]<d[0]?"left":"right"};if(!o){const n=j.get(),o=j.get();if(F(e,i,n,r),F(e,t,o,r),y(n,o)>=Y)c.direct=s(n[1])===s(o[1])?W(c.vertical):c.vertical;else{const e=l(j.get());F(i,t,e,r),y(e,o)>=Y&&(c.direct=s(e[0])===s(o[0])?W(c.horizontal):c.horizontal)}}if("below-the-surface"===n){const e=e=>"top"===e?"bottom":"top";c.direct=e(c.direct),c.horizontal=e(c.horizontal),c.vertical=e(c.vertical)}return c}_updateLabelText(){const t=this._model.model.measurement;if(e(t)||!this._model.messages)return;const i={verticalDistance:"",horizontalDistance:"",directDistance:"",geodesicDistance:""},s=this._model.messages,n=t.directDistance,r=t.horizontalDistance,o=t.verticalDistance,a=t.geodesicDistance,l=t.geodesicAngle;switch(this._model.unit){case"metric":i.directDistance=n&&D(s,n),i.horizontalDistance=r&&D(s,r),i.verticalDistance=o&&z(s,o),i.geodesicDistance=a&&D(s,a);break;case"imperial":i.directDistance=n&&P(s,n),i.horizontalDistance=r&&P(s,r),i.verticalDistance=o&&f(s,o),i.geodesicDistance=a&&P(s,a);break;case"degrees":{const e=l&&w(s,l,"degrees");i.directDistance=e,i.horizontalDistance=e,i.geodesicDistance=e;break}case"degrees-minutes-seconds":i.horizontalDistanceText=l&&S(l);break;default:i.directDistance=n&&w(s,n,this._model.unit),i.horizontalDistance=r&&w(s,r,this._model.unit),i.verticalDistance=o&&w(s,o,this._model.unit),i.geodesicDistance=a&&w(s,a,this._model.unit)}this._directSegmentLabel.text=i[this._directSegmentLabelMeasurement],this._horizontalSegmentLabel.text=i[this._horizontalSegmentLabelMeasurement],this._verticalSegmentLabel.text=i[this._verticalSegmentLabelMeasurement]}_geometryChanged(){const e=this._view,t=e.state.camera,i=this._model,s=i.measurementMode,n=e.renderCoordsHelper,r=this.viewMode;if(r===X.None)return this._rightAngleQuad.visible=!1,this._horizontalAndVerticalSegmentLines.visible=!1,this._directSegmentLabel.visible=!1,this._horizontalSegmentLabel.visible=!1,this._verticalSegmentLabel.visible=!1,this._measurementArrow.visible=!1,this._projectedGeodesicLine.visible=!1,this._geodesicStartHint.visible=!1,void(this._geodesicEndHint.visible=!1);let o=this._startPosition,a=this._endPosition;const l="camera-dependent"===i.measurementSurfaceLocation?this._view.state.camera.aboveGround?"above-the-surface":"below-the-surface":i.measurementSurfaceLocation,h="above-the-surface"===l?1:-1,m=h*(e.renderCoordsHelper.getAltitude(a)-e.renderCoordsHelper.getAltitude(o));m<0&&(o=this._endPosition,a=this._startPosition);const g=this._cornerPosition;e.renderCoordsHelper.worldUpAtPosition(o,g),d(g,g,h*Math.abs(m)),c(g,g,o);const u="geodesic"===s,v=u?new q(this._startPosition,this._endPosition,this._view.renderCoordsHelper.spatialReference):new N(this._startPosition,this._endPosition),L=this._getLabelPositions(o,a,g,l,t);switch(O([o,a,g],this._origin),p(this._originTransform),b(this._originTransform,this._originTransform,this._origin),this._measurementArrow.geometry=v,this._measurementArrow.stripeLength=this._computeMeasurementArrowStripeLength(this._model.model),this._measurementArrow.visible=!0,this._directSegmentLabel.anchor=L.direct,this._directSegmentLabel.geometry=v,this._directSegmentLabel.visible=!0,this._directSegmentLabelMeasurement="geodesic"===s?"geodesicDistance":"directDistance",r){case X.Direct:this._horizontalSegmentLabelMeasurement=u?"geodesicDistance":"horizontalDistance",this._rightAngleQuad.visible=!1,this._horizontalAndVerticalSegmentLines.visible=!1,this._horizontalSegmentLabel.visible=!1,this._verticalSegmentLabel.visible=!1,this._projectedGeodesicLine.visible=!1,this._geodesicStartHint.visible=!1,this._geodesicEndHint.visible=!1;break;case X.ProjectedGeodesic:{const e=_(M.get(),this._startPosition),t=_(M.get(),this._endPosition);n.setAltitude(0,e),n.setAltitude(0,t);const i=new q(e,t,this._view.renderCoordsHelper.spatialReference);this._projectedGeodesicLine.setGeometryFromSegment(i),this._projectedGeodesicLine.visible=!0,this._geodesicStartHint.setGeometryFromSegment(new N(e,this._startPosition)),this._geodesicStartHint.visible=!0,this._geodesicEndHint.setGeometryFromSegment(new N(t,this._endPosition)),this._geodesicEndHint.visible=!0,this._directSegmentLabel.geometry=i,this._directSegmentLabelMeasurement="geodesicDistance",this._rightAngleQuad.visible=!1,this._horizontalAndVerticalSegmentLines.visible=!1,this._horizontalSegmentLabel.visible=!1,this._verticalSegmentLabel.visible=!1;break}case X.Triangle:{this._horizontalAndVerticalSegmentLines.geometry=[[[o[0],o[1],o[2]],[g[0],g[1],g[2]],[a[0],a[1],a[2]]]],this._horizontalAndVerticalSegmentLines.visible=!0;const e=new N(o,g);this._verticalSegmentLabel.visible=!0,this._verticalSegmentLabel.geometry=e,this._verticalSegmentLabel.anchor=L.vertical,this._verticalSegmentLabelMeasurement="verticalDistance";const t=new N(g,a);this._horizontalSegmentLabel.visible=!0,this._horizontalSegmentLabel.geometry=t,this._horizontalSegmentLabel.anchor=L.horizontal,this._horizontalSegmentLabelMeasurement="horizontalDistance",this._rightAngleQuad.geometry={previous:o,center:g,next:a},this._rightAngleQuad.visible=!0,this._projectedGeodesicLine.visible=!1,this._geodesicStartHint.visible=!1,this._geodesicEndHint.visible=!1;break}}this._updateLabelText()}_computeMeasurementArrowStripeLength(e){let i=null;if(t(e.measurement)){const t=e.measurement.directDistance;switch(this._model.model.settings.unit){case"metric":i=t&&t.toUnit("meters");break;case"imperial":i=t&&t.toUnit(u(t.value,t.unit));break;case"degrees":case"degrees-minutes-seconds":{const t=e.measurement.geodesicAngle;i=t&&t.toUnit("degrees");break}default:i=t&&t.toUnit(this._model.model.settings.unit)}}let s=1;return i&&(s=n(i.value/30),s*="degrees"===i.unit?g(this._view.spatialReference).metersPerDegree:v(1,i.unit,"meters")),s}_requiresGeodesicGuideAt(e){if(!this._view.state)return!1;const t=this._view.state.camera,i=this._view.renderCoordsHelper,s=t.computeScreenPixelSizeAt(e);return i.getAltitude(e)/s>=10}_updateCursorPosition(){this._model.cursorPoint&&this._view.renderCoordsHelper.toRenderCoords(this._model.cursorPoint,this._cursorPosition)}_updateStartPosition(){t(this._model.startPoint)&&this._view.renderCoordsHelper.toRenderCoords(this._model.startPoint,this._startPosition)}_updateEndPosition(){t(this._model.endPoint)&&this._view.renderCoordsHelper.toRenderCoords(this._model.endPoint,this._endPosition)}_getFocusPosition(){const e=this._model,t=this.viewMode===X.Direct&&"euclidean"===e.measurementMode;switch(e.state){case"drawing":return t?this._startPosition:e.endPoint?this._endPosition:this._startPosition;case"editing":return t?"start"===this._lastDraggedHandle?this._endPosition:this._startPosition:"start"===this._lastDraggedHandle?this._startPosition:this._endPosition;default:return e.cursorPoint?this._cursorPosition:null}}_getFocusSpherePosition(){return"drawing"===this._model.state||"end"===this._lastDraggedHandle?this._startPosition:this._endPosition}_updateLaserLine(){const e=this._model,t=this._getFocusPosition(),i=this.viewMode,s=this._params.laserLineEnabled&&!!t&&"measured"!==e.state&&e.active;if(s){const n=s&&"euclidean"===e.measurementMode;this._laserLine.heightManifoldTarget=n?t:null;const r=s&&!!e.startPoint&&"geodesic"===e.measurementMode;this._laserLine.pointDistanceLine=r?{origin:this._getFocusSpherePosition(),target:t}:null;const o=s&&i===X.Triangle;this._laserLine.lineVerticalPlaneSegment=o?A.fromPoints(this._startPosition,this._endPosition,Z):null}else this._laserLine.heightManifoldTarget=null,this._laserLine.pointDistanceLine=null,this._laserLine.lineVerticalPlaneSegment=null}_initializeListeners(){this._listenerHandles=new m,this._listenerHandles.add([this._model.watch("state",(()=>{this._visible&&this._updateLaserLine()}),!0),this._model.watch("measurementMode",(()=>{this._viewModeDirty=!0,this._visible&&this._updateLaserLine()}),!0),this._model.watch("hoveredHandle",(()=>{this._visible&&this._geometryChanged()}),!0),this._model.watch("cursorPoint",(()=>{this._updateCursorPosition(),this._visible&&this._updateLaserLine()}),!0),this._model.model.watch("startPoint",(()=>{this._updateStartPosition(),this._viewModeDirty=!0,this._visible&&(this._updateLaserLine(),this._geometryChanged())}),!0),this._model.model.watch("endPoint",(()=>{this._updateEndPosition(),this._viewModeDirty=!0,this._visible&&(this._updateLaserLine(),this._geometryChanged())}),!0),this._model.watch("messages",(()=>{this._viewModeDirty=!0,this._visible&&this._geometryChanged(),this._updateLabelText()}),!0),this._model.watch("unit",(()=>{this._viewModeDirty=!0,this._visible&&this._geometryChanged()}),!0),this._model.watch("active",(()=>{this._visible&&(this._updateLaserLine(),this._geometryChanged())}),!0),this._view.state.watch("camera",(()=>{this._visible&&this._geometryChanged()}),!0),this._model.model.watch("measurement",(()=>{this._viewModeDirty=!0,this._visible?this._geometryChanged():this._updateLabelText()}),!0)])}_destroyListeners(){this._listenerHandles.destroy(),this._listenerHandles=null}}var X;!function(e){e.PickRequest=class{};e.PickResult=class{constructor(e=null,t=null,i=null){this.type=e,this.scenePoint=t,this.mapPoint=i}}}(K||(K={})),function(e){e[e.Triangle=0]="Triangle",e[e.ProjectedGeodesic=1]="ProjectedGeodesic",e[e.Direct=2]="Direct",e[e.None=3]="None"}(X||(X={}));const Y=Math.cos(r(12)),Z=A.create();var $=K;export default $;export{K as DirectLineMeasurement3DView,X as ViewMode};

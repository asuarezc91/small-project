/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../../chunks/tslib.es6.js";import"../../../../../core/has.js";import{isSome as a,isNone as i}from"../../../../../core/maybe.js";import"../../../../../core/Logger.js";import"../../../../../core/accessorSupport/ensureType.js";import{makeHandle as e}from"../../../../../core/handleUtils.js";import{property as o}from"../../../../../core/accessorSupport/decorators/property.js";import{subclass as s}from"../../../../../core/accessorSupport/decorators/subclass.js";import"../../../../../core/urlUtils.js";import"../../../../../core/uuid.js";import"../../../../../portal/support/resourceExtension.js";import n from"../../../../../core/Evented.js";import{t as r}from"../../../../../chunks/common.js";import l from"../../../../../core/Handles.js";import{getGraphicEffectiveElevationInfo as h}from"../../../../../support/elevationInfoUtils.js";import{InteractiveToolBase as c}from"../../../../interactive/InteractiveToolBase.js";import{placeAtGraphic as p}from"../../manipulatorUtils.js";import{canMoveZ as m}from"../manipulatorUtils.js";import{GraphicState as u}from"../../../layers/graphics/GraphicState.js";import{createVisualElements as d}from"../visualElementUtils.js";import{ALIGN_ARROWS_SCALE_THRESHOLD as g}from"../manipulations/config.js";import{MoveManipulation as v}from"../manipulations/MoveManipulation.js";import{GraphicScaleRotateTransform as y}from"./GraphicScaleRotateTransform.js";let M=class extends(n.EventedMixin(c)){constructor(t){super(t),this.enableZ=!0,this.enableRotation=!0,this.enableScaling=!0,this.type="transform-3d",this.handles=new l,this.scaleRotate=null}initialize(){if(this.graphicState=new u({graphic:this.graphic}),this.moveManipulation=new v({tool:this,view:this.view,snapToScene:this.snapToScene,xyAvailable:!0,xyAxisAvailable:!0,zAvailable:this.enableZ&&m(this.graphic),radius:v.radiusForSymbol(this.graphic.symbol)}),this.moveManipulation.forEachManipulator((t=>this.handles.add(t.events.on("immediate-click",(t=>t.stopPropagation()))))),this.moveManipulation.elevationInfo=h(this.graphic),this.moveManipulation.createGraphicDragPipeline(this.graphicState,(t=>{const{action:a,graphic:i,dxScreen:e,dyScreen:o}=t,s={graphic:i,dxScreen:e,dyScreen:o};switch(a){case"start":this.emit("graphic-translate-start",s);break;case"update":this.emit("graphic-translate",s);break;case"end":this.emit("graphic-translate-stop",s)}})),this.moveManipulation.angle=this.symbolRotationAngle,this.enableScaling||this.enableRotation){const t=this.enableScaling&&this.enableRotation?null:this.enableScaling?"scale":"rotate";this.scaleRotate=new y({tool:this,mode:t}),this.handles.add(this.scaleRotate.events.on("scale-changed",(()=>this.onScaleChanged())))}this.handles.add([d({view:this.view,graphic:this.graphic,forEachManipulator:t=>this.forEachManipulator(t),onManipulatorsChanged:()=>e()}),this.graphic.watch("symbol",(()=>this.updateMoveAngle())),this.graphicState.on("changed",(()=>this.onGeometryChanged())),this.hideManipulatorsForGraphicState(),this.view.watch("scale",(()=>this.updateMoveAngle()))]),this.handles.add(this.view.trackGraphicState(this.graphicState)),this.onGeometryChanged()}forEachManipulator(t){this.moveManipulation.forEachManipulator(t),a(this.scaleRotate)&&this.scaleRotate.forEachManipulator(t)}hideManipulatorsForGraphicState(){return this.graphicState.watch("displaying",(t=>{this.forEachManipulator((a=>a.available=t)),this.moveManipulation.zManipulation.available=t&&this.enableZ&&m(this.graphic)}))}destroy(){this.handles.destroy(),this.moveManipulation.destroy(),a(this.scaleRotate)&&(this.scaleRotate.destroy(),this.scaleRotate=null),this._set("view",null),this._set("graphic",null)}set snapToScene(t){this.moveManipulation&&(this.moveManipulation.snapToScene=t),this._set("snapToScene",t)}get symbolRotationAngle(){const t=this.graphic.symbol;if(t){const a=t.symbolLayers.find((t=>"object"===t.type)),i=a&&a.heading||0;return r(-i)}return 0}reset(){}onDetach(){a(this.scaleRotate)&&this.scaleRotate.cancelActiveAnimation()}onHide(){a(this.scaleRotate)&&this.scaleRotate.cancelActiveAnimation()}onScaleChanged(){if(i(this.scaleRotate))return;const t=this.scaleRotate.getScale();this.moveManipulation.displayScale=t}updateMoveAngle(){"local"===this.view.viewingMode||this.view.scale<g?this.moveManipulation.angle=this.symbolRotationAngle:this.moveManipulation.angle=0}onGeometryChanged(){p(this.view,this.moveManipulation,this.graphic)}get test(){return{discManipulator:this.moveManipulation.xyManipulation.test.discManipulator,ringManipulator:a(this.scaleRotate)?this.scaleRotate.test.ringManipulator:null,arrowManipulators:this.moveManipulation.xyAxisManipulation.test.arrowManipulators}}};t([o({constructOnly:!0,nonNullable:!0})],M.prototype,"view",void 0),t([o({constructOnly:!0,nonNullable:!0})],M.prototype,"graphic",void 0),t([o({constructOnly:!0,nonNullable:!0})],M.prototype,"enableZ",void 0),t([o()],M.prototype,"enableRotation",void 0),t([o()],M.prototype,"enableScaling",void 0),t([o({value:!1})],M.prototype,"snapToScene",null),t([o({readOnly:!0})],M.prototype,"type",void 0),M=t([s("esri.views.3d.interactive.editingTools.graphicTransform3D.GraphicTransformTool")],M);export{M as GraphicTransformTool};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{isSome as e}from"../../../../../core/maybe.js";import{createScreenPointArray as t}from"../../../../../core/screenUtils.js";import{getConvertedElevation as i,getZForElevationMode as s}from"../../../../../support/elevationInfoUtils.js";import{makeDehydratedPoint as o}from"../../../../../layers/graphics/dehydratedFeatures.js";class n{constructor(e,t,i){this.elevationInfo=e,this.defaultZ=t,this.view=i}screenToMap(i){if(e(this.defaultZ))return this.view.sceneIntersectionHelper.intersectElevationFromScreen(t(i.x,i.y),this.elevationInfo,this.defaultZ);const s=this.view.sceneIntersectionHelper.intersectElevationFromScreen(t(i.x,i.y),this.elevationInfo,0);return e(s)&&(s.z=void 0),s}mapToScreen(e){const t=o(e.x,e.y,i(this.view,e,this.elevationInfo),e.spatialReference);return this.view.toScreen(t)}}class r{constructor(e,t,i=[]){this.view=e,this.elevationInfo=t,this.exclude=i}screenToMap(t){const i=this.view.toMap(t,{exclude:this.exclude});return e(i)&&(i.z=s(i,this.view,this.elevationInfo)),i}mapToScreen(t){let s=t;return e(this.elevationInfo)&&(s=o(t.x,t.y,i(this.view,t,this.elevationInfo),t.spatialReference)),this.view.toScreen(s)}}export{n as ElevationDrawSurface,r as SceneDrawSurface};

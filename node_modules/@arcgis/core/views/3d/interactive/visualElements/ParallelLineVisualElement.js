/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{unwrap as e,isSome as t,isNone as r}from"../../../../core/maybe.js";import{createScreenPointArray as s}from"../../../../core/screenUtils.js";import{c as i,f as o}from"../../../../chunks/vec3f64.js";import{m as a,g as n,n as c,f as h,b as l}from"../../../../chunks/vec3.js";import d from"../../../../core/Handles.js";import{I as m}from"../../../../chunks/mat4f64.js";import{e as u,d as p,a as _,s as f,h as g}from"../../../../chunks/vec2.js";import{g as y,c as j}from"../../../../chunks/vec4.js";import w from"../../webgl-engine/lib/GeometryUtil.js";import b from"../../webgl-engine/lib/Geometry.js";import{RibbonVertexAttributeConstants as x}from"../../webgl-engine/shaders/RibbonLineTechnique.js";import{RibbonLineMaterial as G}from"../../webgl-engine/materials/RibbonLineMaterial.js";import{f as R}from"../../../../chunks/vec4f32.js";import{Object3DVisualElement as V}from"./Object3DVisualElement.js";class O extends V{constructor(e){super(e),this._handles=new d,this._location=i(),this._direction=o(1,0,0),this._width=1,this._offset=1,this._length=18,this._color=R(1,0,1,1),this._renderOccluded=4,this.applyProps(e)}get location(){return this._location}set location(e){a(this._location,e)||(n(this._location,e),this.updateGeometry())}get direction(){return this._direction}set direction(e){a(this._direction,e)||(n(this._direction,e),this.updateGeometry())}setDirectionFromPoints(e,t){c(this._direction,h(this._direction,t,e)),this.updateGeometry()}get width(){return this._width}set width(e){e!==this._width&&(this._width=e,this.updateMaterial())}get offset(){return this._offset}set offset(e){e!==this._offset&&(this._offset=e,this.updateGeometry())}get length(){return this._length}set length(e){e!==this._length&&(this._length=e,this.updateGeometry())}get color(){return this._color}set color(e){y(e,this._color)||(j(this._color,e),this.updateMaterial())}get renderOccluded(){return this._renderOccluded}set renderOccluded(e){e!==this._renderOccluded&&(this._renderOccluded=e,this.updateMaterial())}createExternalResources(){const e=new G(this.materialParameters,"parallelLineVisualElement");this._handles.add(this.view.state.watch("camera",(()=>{this.updateGeometry()}))),this._externalResources={material:e}}destroyExternalResources(){this._handles.removeAll(),this._externalResources=null}createGeometries(t){const r=new b(w.createPolylineGeometry([i(),i()]),"parallelLineVisualElement"),s=new b(w.createPolylineGeometry([i(),i()]),"parallelLineVisualElement"),o=e(this._externalResources).material;t.addGeometry(r,o,m),t.addGeometry(s,o,m),this.updateVertices(t)}forEachExternalResource(e){t(this._externalResources)&&e(this._externalResources.material)}updateMaterial(){if(r(this._externalResources))return;this._externalResources.material.setParameterValues(this.materialParameters)}get materialParameters(){return{width:this._width,color:this._color,renderOccluded:this._renderOccluded}}updateGeometry(){const e=this.object;r(e)||this.updateVertices(e)}updateVertices(e){const t=this.view.state.camera;t.projectToScreen(this.location,v),l(P,this.location,this.direction),t.projectToScreen(P,E),u(E,p(E,E,v)),this.updateVertexAttributes(t,e,0,v,E,1),this.updateVertexAttributes(t,e,1,v,E,-1)}updateVertexAttributes(e,t,r,s,i,o){const a=t.geometryRecords[r].geometry.data.getVertexAttr()[x.POSITION].data,n=_(k,f(k,i[1]*o,i[0]*-o),this.offset+this.width/2),c=g(A,g(A,g(A,s,_(A,i,this.length/2)),n),n),h=g(L,c,_(L,i,-this.length));e.unprojectFromScreen(c,P),a[0]=P[0],a[1]=P[1],a[2]=P[2],e.unprojectFromScreen(h,P),a[3]=P[0],a[4]=P[1],a[5]=P[2],t.geometryVertexAttrsUpdated(r)}}const P=i(),v=s(),E=s(),k=s(),A=s(),L=s();export{O as ParallelLineVisualElement};

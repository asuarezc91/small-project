/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../core/has.js";import{isSome as t,isNone as r,unwrap as s}from"../../../core/maybe.js";import i from"../../../core/Logger.js";import"../../../core/accessorSupport/ensureType.js";import{property as n}from"../../../core/accessorSupport/decorators/property.js";import{subclass as o}from"../../../core/accessorSupport/decorators/subclass.js";import"../../../core/urlUtils.js";import"../../../core/uuid.js";import"../../../portal/support/resourceExtension.js";import a from"../../../core/PooledArray.js";import l from"../../../core/Accessor.js";import{f as h,c as d}from"../../../chunks/vec3f64.js";import u from"../../../core/Handles.js";import{init as p}from"../../../core/watchUtils.js";import{o as c,i as g,t as m}from"../../../chunks/mat4.js";import{someMap as y}from"../../../core/MapUtils.js";import{a as _}from"../../../chunks/vec2f64.js";import f from"../../webgl/Texture.js";import{vertexCount as R}from"../../webgl/Util.js";import{createEmptyDepthTexture as w,createQuadVAO as x}from"../webgl-engine/lib/glUtil3D.js";import{AmbientLight as b}from"../webgl-engine/lighting/Lightsources.js";import{IntersectorResult as T}from"../webgl-engine/lib/intersectorUtils.js";import v from"../webgl-engine/lib/Camera.js";import O from"../support/debugFlags.js";import{AutoDisposableMixin as C,autoDispose as j}from"../webgl-engine/lib/AutoDisposable.js";import{OverlayRenderTarget as L}from"./OverlayRenderTarget.js";import{Overlay as U}from"./Overlay.js";import{CommonUniformStore as V}from"../webgl-engine/core/shaderTechnique/CommonUniformStore.js";import{ShaderTechniqueRepository as M}from"../webgl-engine/core/shaderTechnique/ShaderTechniqueRepository.js";import q from"../webgl-engine/lib/GLMaterialRep.js";import D from"../webgl-engine/lib/GridLocalOriginFactory.js";import E from"../webgl-engine/lib/RenderContext.js";import{SortedRenderGeometryRenderer as G}from"../webgl-engine/lib/SortedRenderGeometryRenderer.js";import{TextureTechniqueConfiguration as S,TextureTechnique as P}from"../webgl-engine/lib/TextureTechnique.js";import{SceneLighting as A}from"../webgl-engine/lighting/SceneLighting.js";import{StippleTextureRepository as H}from"../webgl-engine/materials/lineStippleUtils.js";const W=i.getLogger("esri.views.3d.webgl-engine.lib.OverlayRenderer");let F=class extends(C(l)){constructor(e){super(e),this._overlays=null,this._hasHighlights=!1,this._rendersOccluded=!1,this._hasWater=!1,this._lighting=new A,this._localOrigins=new D,this._handles=new u,this._layerRenderers=new Map,this._sortedLayerRenderersDirty=!1,this._sortedLayerRenderers=new a,this._geometries=new Map,this._uniqueIdx=0,this.globalUnitScale=1,this.longitudeCyclical=null}initialize(){this._rctx=this.renderView.renderingContext,this._renderContext=new E(this._rctx,null,null,null,null,null),this._stippleTextureRepository=new H,this.waterTextureRepository=this.renderView.waterTextureRepository,this._shaderTechniqueRepository=new M({rctx:this._rctx,viewingMode:2,commonUniformStore:new V,stippleTextureRepository:this._stippleTextureRepository,waterTextureRepository:this.waterTextureRepository}),p(this.waterTextureRepository,"loadingState",(()=>this.emitContentChanged())),this._materialRepository=new q(this.renderView.textureRepository,this._shaderTechniqueRepository),this._materialRepository.onMaterialChanged=e=>{(e.renderOccluded&Y)>0!==this._rendersOccluded&&this.updateRendersOccluded(),this.emitContentChanged(),this.notifyChange("updating")},this._compositingHelper=this.renderView.compositingHelper,this._lighting.set({lights:[new b(h(1,1,1))],groundLightingFactor:1,globalFactor:0}),this._bindParameters={slot:null,highlightDepthTexture:w(this._rctx),camera:I,inverseViewport:_(),origin:null,screenToWorldRatio:null,screenToWorldRatioGlobalWM:null,shadowMappingEnabled:!1,slicePlane:null,ssaoEnabled:!1,hasOccludees:!1,linearDepthTexture:null,linearDepthTextureID:0,lastFrameColorTexture:null,lastFrameColorTextureID:0,reprojectionMat:null,ssrEnabled:!1,lighting:this._lighting,transparencyPassType:3}}dispose(){this._handles.destroy(),this._layerRenderers.forEach((e=>e.dispose())),this._layerRenderers.clear(),this._bindParameters.highlightDepthTexture.dispose(),this._bindParameters.highlightDepthTexture=null,this._shaderTechniqueRepository.dispose(),this._shaderTechniqueRepository=null}get updating(){return this._sortedLayerRenderersDirty||y(this._layerRenderers,(e=>e.updating))||this.waterTextureRepository.updating}get hasOverlays(){return t(this._overlays)}get gpuMemoryUsage(){return t(this._overlays)?this._overlays[0].getGpuMemoryUsage()+this._overlays[1].getGpuMemoryUsage():0}get overlays(){return this._overlays}forEachOverlay(e){t(this._overlays)&&(e(this._overlays[0],0),e(this._overlays[1],1))}ensureOverlays(){if(r(this._overlays)){const e=this.renderView.renderingContext;this._overlays=[new U(e,0),new U(e,1)]}}disposeOverlays(){t(this._overlays)&&(this._overlays.forEach((e=>e.dispose())),this._overlays=null)}commitChanges(){let e=!1;this._layerRenderers.forEach(((t,r)=>{t.commitChanges()&&(e=!0),t.isEmpty&&(this._layerRenderers.delete(r),this._sortedLayerRenderersDirty=!0,this._handles.remove(r))})),this._sortedLayerRenderersDirty&&(this.updateSortedLayerRenderers(),e=!0),e&&(this.notifyChange("updating"),this.emitContentChanged(),this.updateHasHighlights(),this.updateRendersOccluded(),this.updateHasWater())}addGeometries(e,t,r){for(const t of e)null==t.origin&&(t.origin=this._localOrigins.getOrigin(t.center)),t.uniqueName||(t.uniqueName="ov:"+this._uniqueIdx++),this._geometries.set(t.uniqueName,t);this.ensureLayerRenderer(t).add(e),2===r&&this.notifyGraphicUpdate(e,t,2)}removeGeometries(e,t,r){for(const t of e)this._geometries.delete(t.uniqueName);const s=this._layerRenderers.get(t);s&&(s.remove(e),2===r&&this.notifyGraphicUpdate(e,t,2))}updateGeometries(e,t,r){const s=this._layerRenderers.get(t);s?(s.modify(e,r),this.notifyUpdateGeometries(e,t,r)):W.warn("Attempted to update geometry for nonexistent layer")}notifyUpdateGeometries(e,t,r){const s=4===r||2===r?2:1===r?1:0;this.notifyGraphicUpdate(e,t,s)}notifyGraphicUpdate(e,t,s){if(0===s||r(t.notifyGraphicUpdate))return;let i=-1;for(const r of e){const e=r.data.graphicUid;e!==i&&(t.notifyGraphicUpdate(e,s),i=e)}}updateHighlights(e,t){const r=this._layerRenderers.get(t);r?r.modify(e,8):W.warn("Attempted to update highlights for nonexistent layer")}isEmpty(){return 0===this._geometries.size&&!O.OVERLAY_DRAW_DEBUG_TEXTURE}get hasHighlights(){return this._hasHighlights}get hasWater(){return this._hasWater}get rendersOccluded(){return this._rendersOccluded}updateLogic(e){let t=!1;return this._layerRenderers.forEach((r=>{r.updateLogic(e)&&(t=!0)})),t}updateLayerOrder(){this._sortedLayerRenderersDirty=!0}drawPass(e,r,i,n=0){if(0===i.numViews)return!1;if(this._screenToWorldRatio=i.pixelRatio*Math.abs(i.views[0].extent[2]-i.views[0].extent[0])/Math.abs(i.views[0].viewport[2]-i.views[0].viewport[0]),this.isEmpty()||5===e&&!this.hasHighlights||3===e&&!this.hasWater)return!1;if(!this.hasNonZeroSizedView(i))return!1;const o=i.width,a=i.height;if(!r.isValid())return!1;r.resize(o,a);const l=this._rctx;if(I.pixelRatio=i.pixelRatio||1,this._renderContext.pass=e,this._bindParameters.screenToWorldRatio=this._screenToWorldRatio,this._bindParameters.screenToWorldRatioGlobalWM=this._screenToWorldRatio*this.globalUnitScale,r.bind(l),l.setClearColor(0,0,0,0),l.clearSafe(16384),1===n&&(this._renderContext.renderOccludedMask=Y),O.OVERLAY_DRAW_DEBUG_TEXTURE&&1!==n)for(let e=0;e<i.numViews;e++)this.setViewParameters(i.views[e],I),this.drawDebugTexture(o,a,k[i.index%k.length]);return this._layerRenderers.size>0&&this._sortedLayerRenderers.forAll((({layerView:h,renderer:d})=>{if(2===n&&t(h)&&0===h.drapeSourceType)return;const u=t(h)&&t(h.fullOpacity)&&h.fullOpacity<1&&0===e;u&&(this.bindTemporaryFramebuffer(this._rctx,o,a),l.clearSafe(16384));for(let e=0;e<i.numViews;e++)this.setViewParameters(i.views[e],I),d.draw(this._renderContext,this._bindParameters);u&&t(this._temporaryRenderTarget)&&(r.bind(l),this._compositingHelper.composite(this._temporaryRenderTarget.getTexture(),2,s(s(h).fullOpacity)))})),l.bindFramebuffer(null),r.generateMipMap(),this._renderContext.resetRenderOccludedMask(),!0}bindTemporaryFramebuffer(e,t,s){r(this._temporaryRenderTarget)&&(this._temporaryRenderTarget=new L(e,"temp",0,!1)),this._temporaryRenderTarget.resize(t,s),this._temporaryRenderTarget.bind(e)}async reloadShaders(){await this._shaderTechniqueRepository.hotReload()}intersect(e,t,r){let s=0;this._geometries.forEach((i=>{if(r&&!r(i))return;this.intersectRenderGeometry(i,t,0,e,s);const n=this.longitudeCyclical;n&&(i.center[0]-i.bsRadius<n.min&&this.intersectRenderGeometry(i,t,n.range,e,s),i.center[0]+i.bsRadius>n.max&&this.intersectRenderGeometry(i,t,-n.range,e,s)),s++}))}intersectRenderGeometry(e,r,s,i,n){let o=0;t(e.transformation)&&(s+=e.transformation[12],o=e.transformation[13]),N[0]=r[0]-s,N[1]=r[1]-o,N[2]=1,B[0]=r[0]-s,B[1]=r[1]-o,B[2]=0,e.screenToWorldRatio=this._screenToWorldRatio,e.material.intersect(e,null,e.getShaderTransformation(),i,N,B,((t,r,s)=>{this.addIntersectionResult(s,e.material.renderPriority,n,i,e.data.layerUid,e.data.graphicUid)}),e.calculateShaderTransformation,!0)}addIntersectionResult(e,t,r,s,i,n){const o={type:"external",metadata:{layerUid:i,graphicUid:n}},a=i=>{i.set(o,null,s.results.ground.dist,s.results.ground.normal,s.results.ground.transformation,t,null,null,e,r),i.intersector="OverlayRenderer"};if((null==s.results.min.drapedLayerOrder||t>=s.results.min.drapedLayerOrder)&&(null==s.results.min.dist||s.results.ground.dist<=s.results.min.dist)&&a(s.results.min),0!==s.options.store&&(null==s.results.max.drapedLayerOrder||t<s.results.max.drapedLayerOrder)&&(null==s.results.max.dist||s.results.ground.dist>s.results.max.dist)&&a(s.results.max),2===s.options.store){const e=new T(s.ray);a(e),s.results.all.push(e)}}stopAnimationsAtTime(e){this._sortedLayerRenderers.forAll((t=>t.renderer.stopAnimationsAtTime(e)))}ensureLayerRenderer(e){let t=this._layerRenderers.get(e);return t||(t=new G({rctx:this._rctx,materialRepository:this._materialRepository}),this._layerRenderers.set(e,t),this._sortedLayerRenderersDirty=!0,"fullOpacity"in e&&this._handles.add(e.watch("fullOpacity",(()=>this.emitContentChanged())),e),this._handles.add(p(t,"updating",(()=>this.notifyChange("updating"))),e)),t}updateSortedLayerRenderers(){if(!this._sortedLayerRenderersDirty)return;if(this._sortedLayerRenderersDirty=!1,this._sortedLayerRenderers.clear(),0===this._layerRenderers.size)return;const[{view:{allLayerViews:e}}]=this._layerRenderers.keys(),t=new Set(this._layerRenderers.values());e.forEach((e=>{const r=e,s=this._layerRenderers.get(r);s&&(this._sortedLayerRenderers.push(new z(r,s)),t.delete(s))})),t.forEach((e=>{this._sortedLayerRenderers.push(new z(null,e))}))}setViewParameters(e,t){t.viewport=e.viewport;const r=e.extent;c(t.projectionMatrix,0,r[2]-r[0],0,r[3]-r[1],t.near,t.far),g(t.viewMatrix),m(t.viewMatrix,t.viewMatrix,[-e.extent[0],-e.extent[1],0]),t.setGLViewport(this._rctx),this._renderContext.camera=t,this._bindParameters.camera=t,this._bindParameters.inverseViewport[0]=1/t.fullViewport[2],this._bindParameters.inverseViewport[1]=1/t.fullViewport[3]}hasNonZeroSizedView(e){for(let t=0;t<e.numViews;t++){const r=e.views[t];if(r.extent[0]!==r.extent[2]&&r.extent[1]!==r.extent[3])return!0}return!1}emitContentChanged(){this.onContentChanged&&this.onContentChanged()}updateHasWater(){const e=y(this._layerRenderers,(e=>e.hasWater));e!==this._hasWater&&(this._hasWater=e)}updateHasHighlights(){const e=y(this._layerRenderers,(e=>e.hasHighlights));e!==this._hasHighlights&&(this._hasHighlights=e,this.onHasHighlightsChanged&&this.onHasHighlightsChanged(this._hasHighlights))}updateRendersOccluded(){const e=y(this._layerRenderers,(e=>e.rendersOccluded));e!==this._rendersOccluded&&(this._rendersOccluded=e,this.onRendersOccludedChanged&&this.onRendersOccludedChanged(this.rendersOccluded))}drawDebugTexture(e,t,r){const s=this._rctx;this.ensureDebugPatternResources(e,t);const i=this._debugTextureTechnique.program;s.bindProgram(i),s.setPipelineState(this._debugTextureTechnique.pipeline),i.setUniform4f("color",r[0],r[1],r[2],1),i.setUniform1i("tex",0),s.bindTexture(this._debugPatternTexture,0),s.bindVAO(this._quadVAO),s.drawArrays(5,0,R(this._quadVAO,"geometry"))}ensureDebugPatternResources(e,t){if(this._debugPatternTexture)return;const r=new Uint8Array(e*t*4);let s=0;for(let i=0;i<t;i++)for(let n=0;n<e;n++){const o=Math.floor(n/10),a=Math.floor(i/10);o<2||a<2||10*o>e-20||10*a>t-20?(r[s++]=255,r[s++]=255,r[s++]=255,r[s++]=255):(r[s++]=255,r[s++]=255,r[s++]=255,r[s++]=1&o&&1&a?1&n^1&i?0:255:1&o^1&a?0:128)}this._debugPatternTexture=new f(this._rctx,{target:3553,pixelFormat:6408,dataType:5121,samplingMode:9728,width:e,height:t},r);const i=new S;i.hasAlpha=!0,this._debugTextureTechnique=this._shaderTechniqueRepository.acquireAndReleaseExisting(P,i,this._debugTextureTechnique),this._quadVAO=x(this._rctx)}get test(){return{layerRenderers:this._layerRenderers}}};e([j()],F.prototype,"_shaderTechniqueRepository",void 0),e([j()],F.prototype,"_stippleTextureRepository",void 0),e([n(),j()],F.prototype,"waterTextureRepository",void 0),e([n({constructOnly:!0})],F.prototype,"renderView",void 0),e([n()],F.prototype,"globalUnitScale",void 0),e([n({type:Boolean,readOnly:!0,dependsOn:["waterTextureRepository.updating"]})],F.prototype,"updating",null),F=e([o("esri.views.3d.terrain.OverlayRenderer")],F);class z{constructor(e,t){this.layerView=e,this.renderer=t}}const k=[[1,.5,.5],[.5,.5,1],[.5,1,.5]],I=new v;I.near=1,I.far=1e4,I.relativeElevation=null;const N=d(),B=d(),X=-2,Y=4;export{X as DRAPED_Z,F as OverlayRenderer,Y as overlayRenderOccludedFlag};

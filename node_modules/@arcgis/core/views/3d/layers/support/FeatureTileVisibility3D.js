/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import e from"../../../../core/ObjectPool.js";import{acosClamped as t}from"../../../../core/mathUtils.js";import{c as i}from"../../../../chunks/vec3f64.js";import{f as s,a as r,b as n,p as o,d as a}from"../../../../chunks/vec3.js";import{getReferenceEllipsoid as l}from"../../../../geometry/projectionEllipsoid.js";import{plane as u,ray as d}from"../../support/geometryUtils.js";import{FeatureTileDescriptor3D as c}from"./FeatureTileDescriptor3D.js";import{Frustum as h}from"../../state/Frustum.js";import{FrustumExtentIntersection as m}from"../../support/FrustumExtentIntersection.js";const p=2,f=6,F=12,b=.95,g=1,v=i(),x=u.create(),P=u.create(),j=new e(Array,(e=>{4!==e.length&&(e[0]=new c,e[1]=new c,e[2]=new c,e[3]=new c)}),(e=>{e[0].release(),e[1].release(),e[2].release(),e[3].release()}));export default class{constructor(e){this.surfaceElevation=0,this.cache=new Map;const{renderCoordsHelper:t}=e;this.frustum=new h({renderCoordsHelper:t}),this.extendedFrustum=new h({renderCoordsHelper:t}),this.intersector=new m({renderCoordsHelper:t}),this.renderCoordsHelper=t}begin(e,t){this.surfaceElevation=t,this.aboveGround=this.renderCoordsHelper.getAltitude(e.eye)>t,this.frustum.update(e),this.shortenFrustumFarPlane(this.frustum),this.updateExtendedFrustum(e)}end(){this.cache.clear()}calculate(e){if(this.allTilesInvisible)return 0;const t=1===this.renderCoordsHelper.viewingMode&&e.lij[0]>=p&&e.lij[0]<f,i=this.getOrCalculateSingleTileVisibility(e,!t);return 0!==i&&t?this.calculateAggregatedChildrenVisibility(e):i}shortenFrustumFarPlane(e){const t=h.nearFarLineIndices,i=e.mutablePoints;for(const e of t){const[t,o]=e,a=i[t],l=i[o];s(v,l,a),r(v,v,b),n(i[o],a,v)}e.updatePoints(i)}calculateAggregatedChildrenVisibility(e){let t=0;const i=this.cache.get(e.id);if(null!=i)return i;const s=j.acquire();e.getChildren(s);for(const e of s){const i=this.calculate(e);if(0!==i&&(t=i,2===i))break}return j.release(s),this.cache.set(e.id,t),t}getOrCalculateSingleTileVisibility(e,t){const i=this.cache.get(e.id);if(null!=i)return i;const s=this.calculateSingleTileVisibility(e);return t&&this.cache.set(e.id,s),s}calculateSingleTileVisibility(e){if(!this.aboveGround&&1===this.renderCoordsHelper.viewingMode&&e.lij[0]<F){return 0===this.calculateSingleTileVisibilitySided(e,!1)?this.calculateSingleTileVisibilitySided(e,!0):void 0}return this.calculateSingleTileVisibilitySided(e,this.aboveGround)}calculateSingleTileVisibilitySided(e,t){this.intersector.update(e.extent,e.tilingScheme.spatialReference,this.surfaceElevation,t);const i=l(e.tilingScheme.spatialReference).radius;return this.intersector.isVisibleInFrustum(this.extendedFrustum,i)?this.intersector.isVisibleInFrustum(this.frustum,i,!0)?2:1:0}updateExtendedFrustum(e){this.extendedFrustum.update(e),this.shortenFrustumFarPlane(this.extendedFrustum);const i=this.renderCoordsHelper.worldUpAtPosition(e.eye,v);this.aboveGround||o(i,i);const s=t(-a(i,e.viewForward));if(this.allTilesInvisible=s>(Math.PI+e.fovY)/2,this.allTilesInvisible)return;if(this.hasExtendedFrustum=s>e.fovY/2,!this.hasExtendedFrustum)return;const n=this.extendedFrustumParameters(),l=this.extendedFrustum.mutablePoints;for(let e=0;e<4;e++){const t=n.pointIndices[e],i=l[t],s=this.renderCoordsHelper.getAltitude(i);if(n.needsAltitudeAdjustment(s)){switch(this.renderCoordsHelper.worldUpAtPosition(i,v),t){case 4:case 7:case 0:case 3:u.projectVector(this.extendedFrustum.planes[0],v,v);break;case 5:case 6:case 1:case 2:u.projectVector(this.extendedFrustum.planes[1],v,v)}r(v,v,n.direction),this.renderCoordsHelper.intersectInfiniteManifold(d.wrap(i,v),n.zWithMargin,i)}}if(this.extendedFrustum.updatePoints(l),u.fromPoints(l[0],l[1],l[2],x),u.fromPoints(l[1],l[2],l[3],P),a(u.normal(x),u.normal(P))<0){const e=this.extendedFrustum.mutablePoints;this.aboveGround?[e[0],e[1]]=[e[1],e[0]]:[e[3],e[2]]=[e[2],e[3]],this.extendedFrustum.updatePoints(e)}}extendedFrustumParameters(){return this.aboveGround?this.extendedFrustumParametersAboveSurface():this.extendedFrustumParametersBelowSurface()}extendedFrustumParametersAboveSurface(){const e=this.surfaceElevation-g;return{zWithMargin:e,pointIndices:h.planePointIndices.bottom,direction:-1,needsAltitudeAdjustment:t=>t>e}}extendedFrustumParametersBelowSurface(){const e=this.surfaceElevation+g;return{zWithMargin:e,pointIndices:h.planePointIndices.top,direction:1,needsAltitudeAdjustment:t=>t<e}}}

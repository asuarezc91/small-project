/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import e from"../../../../geometry/Polygon.js";import t from"../../../../symbols/FillSymbol3DLayer.js";import i from"../../../../symbols/TextSymbol3DLayer.js";import s from"../../../../symbols/PointSymbol3D.js";import a from"../../../../symbols/PolygonSymbol3D.js";import o from"../../../../Graphic.js";import r from"../../terrain/TilingScheme.js";const h=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];class l{constructor(e,i,s){this.loadingGraphics=new Map,this.loadedGraphics=new Map,this.pendingGraphics=new Map,this._enabled=!0,this.tileFetcher=e,this.view=s,this.tilingScheme=new r(i),this.loadedSymbols=h.map((e=>new a(new t({material:{color:[e[0],e[1],e[2],.6]},outline:{color:"black",size:1}})))),this.loadingSymbols=[new a(new t({material:{color:[200,200,200,.4]},outline:{color:[30,30,30],size:1}}))],this.pendingSymbols=[new a(new t({material:{color:[100,100,100,.4]},outline:{color:[30,30,30],size:1}}))],this.dataExtentSymbol=new a(new t({material:{color:[0,0,0,0]},outline:{color:"green",size:4}}))}destroy(){this.enabled=!1}get enabled(){return this._enabled}set enabled(e){this._enabled=e,this.update()}update(){this._enabled?(this.synchronizeMaps(this.loadingGraphics,{filter:e=>e.isFetching,symbols:this.loadingSymbols}),this.synchronizeMaps(this.loadedGraphics,{filter:e=>!e.isFetching,symbols:this.loadedSymbols}),this.synchronizeMaps(this.pendingGraphics,{filter:e=>!e.isFetching,symbols:this.pendingSymbols}),this.showDataExtent(this.tileFetcher.filterExtent)):(this.loadingGraphics.forEach((e=>{this.view.graphics.removeMany(e)})),this.loadingGraphics.clear(),this.loadedGraphics.forEach((e=>{this.view.graphics.removeMany(e)})),this.loadedGraphics.clear(),this.pendingGraphics.forEach((e=>{this.view.graphics.removeMany(e)})),this.pendingGraphics.clear(),this.dataExtentGraphic&&(this.view.graphics.remove(this.dataExtentGraphic),this.dataExtentGraphic=null))}showDataExtent(t){if(this.dataExtentGraphic&&(this.view.graphics.remove(this.dataExtentGraphic),this.dataExtentGraphic=null),!t)return;const i=e.fromExtent(t);this.dataExtentGraphic=new o({geometry:i,symbol:this.dataExtentSymbol}),this.view.graphics.add(this.dataExtentGraphic)}synchronizeMaps(e,t){const a=[];e.forEach(((e,i)=>{const s=this.tileFetcher.test.getFeatureTileById(i);s&&t.filter(s)||(this.view.graphics.removeMany(e),a.push(i))})),a.forEach((t=>e.delete(t))),this.tileFetcher.test.forEachFeatureTile((a=>{if(t.filter(a)&&!e.has(a.id)){const[r,h,l]=a.descriptor.lij;this.tilingScheme.ensureMaxLod(r);const n=this.tilingScheme.getExtentGeometry(r,h,l),c=[new o({geometry:n,symbol:t.symbols[r%t.symbols.length]}),new o({geometry:n.center,symbol:new s({verticalOffset:{screenLength:40/.75},callout:{type:"line",color:"white",border:{color:"black"}},symbolLayers:[new i({text:`${r}/${h}/${l}`,halo:{color:"white",size:1/.75},material:{color:"black"},size:16})]})})];e.set(a.id,c),this.view.graphics.addMany(c)}}))}}export default l;export{l as FeatureTileFetcher3DDebugger};

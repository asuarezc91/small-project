/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{isArrayBuffer as t}from"../../../core/typedArrayUtil.js";import{isSome as r}from"../../../core/maybe.js";import{resolve as e}from"../../../core/promiseUtils.js";import a from"../../../geometry/SpatialReference.js";import{q as o}from"../../../chunks/vec3.js";import{projectBuffer as f}from"../../../geometry/projection.js";import{c as i}from"../../../chunks/quat.js";import{f as s,c as n}from"../../../chunks/vec3f32.js";import{b as u}from"../../../chunks/quatf32.js";import{readGeometry as l,getAttributeValues as m,evaluateRenderer as b,filterInPlace as p}from"./i3s/PointCloudWorkerUtil.js";class c{transform(a){const o=this._transform(a),f=[o.points.buffer,o.rgb.buffer];r(o.pointIdFilterMap)&&f.push(o.pointIdFilterMap.buffer);for(const r of o.attributes)"buffer"in r.values&&t(r.values.buffer)&&r.values.buffer!==o.rgb.buffer&&f.push(r.values.buffer);return e({result:o,transferList:f})}_transform(t){const e=l(t.schema,t.geometryBuffer);let o=e.length/3,f=null;const i=[],s=m(t.primaryAttributeData,e,o);r(t.primaryAttributeData)&&s&&i.push({attributeInfo:t.primaryAttributeData.attributeInfo,values:s});const n=m(t.modulationAttributeData,e,o);r(t.modulationAttributeData)&&n&&i.push({attributeInfo:t.modulationAttributeData.attributeInfo,values:n});let u=b(t.rendererInfo,s,n,o);if(t.filterInfo&&t.filterInfo.length>0&&r(t.filterAttributesData)){const r=t.filterAttributesData.map((t=>{const r=m(t,e,o),a={attributeInfo:t.attributeInfo,values:r};return i.push(a),a}));f=new Uint32Array(o),o=p(e,u,f,t.filterInfo,r)}for(const r of t.userAttributesData){const t=m(r,e,o);i.push({attributeInfo:r.attributeInfo,values:t})}3*o<u.length&&(u=new Uint8Array(u.buffer.slice(0,3*o))),this._applyElevationOffsetInPlace(e,o,t.elevationOffset);const c=this._transformCoordinates(e,o,t.obb,a.fromJSON(t.inSR),a.fromJSON(t.outSR));return{obb:t.obb,points:c,rgb:u,attributes:i,pointIdFilterMap:f}}_transformCoordinates(t,r,e,a,u){if(!f(t,a,0,t,u,0,r))throw Error("Can't reproject");const l=s(e.center[0],e.center[1],e.center[2]),m=n(),b=n();i(h,e.quaternion);const p=new Float32Array(3*r);for(let a=0;a<r;a++)m[0]=t[3*a]-l[0],m[1]=t[3*a+1]-l[1],m[2]=t[3*a+2]-l[2],o(b,m,h),e.halfSize[0]=Math.max(e.halfSize[0],Math.abs(b[0])),e.halfSize[1]=Math.max(e.halfSize[1],Math.abs(b[1])),e.halfSize[2]=Math.max(e.halfSize[2],Math.abs(b[2])),p[3*a]=m[0],p[3*a+1]=m[1],p[3*a+2]=m[2];return p}_applyElevationOffsetInPlace(t,r,e){if(0!==e)for(let a=0;a<r;a++)t[3*a+2]+=e}}const h=u();function I(){return new c}export default I;

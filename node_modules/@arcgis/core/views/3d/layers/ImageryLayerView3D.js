/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../core/has.js";import"../../../core/Logger.js";import"../../../core/accessorSupport/ensureType.js";import"../../../core/accessorSupport/decorators/property.js";import{subclass as t}from"../../../core/accessorSupport/decorators/subclass.js";import"../../../core/urlUtils.js";import"../../../core/uuid.js";import"../../../portal/support/resourceExtension.js";import{debounce as a,reject as i}from"../../../core/promiseUtils.js";import{whenOnce as r}from"../../../core/watchUtils.js";import{ImageryLayerView as s}from"../../layers/ImageryLayerView.js";import o from"./DynamicLayerView3D.js";let n=class extends(s(o)){constructor(){super(...arguments),this.updateWhenStationary=!0,this.redrawDebounced=a((async e=>{this.redraw(((e,t)=>this.redrawImage(e,{signal:t})),e)}),2e3)}initialize(){this.handles.add([r(this.view.basemapTerrain,"ready",(()=>this.initializeMaximumDataResolution())),this.layer.on("redraw",(()=>this.redrawDebounced()))]),this.updatingHandles.add(this.layer,"exportImageServiceParameters.version",(()=>{this.updatingHandles.addPromise(this.refreshDebounced())})),this.updatingHandles.add(this,"timeExtent",(()=>this.updatingHandles.addPromise(this.refreshDebounced())))}initializeMaximumDataResolution(){const e=this.view.basemapTerrain.spatialReference,t=this.layer.fullExtent;t&&e.equals(t.spatialReference)&&(this.maximumDataResolution={x:this.layer.pixelSizeX,y:this.layer.pixelSizeY})}getFetchOptions(){return{timeExtent:this.timeExtent}}async processResult(e,t,a){t.imageElement?e.image=t.imageElement:(e.image=document.createElement("canvas"),e.pixelData=t.pixelData,await this.redrawImage(e,{signal:a}))}async redrawImage(e,t){if(!(e.image instanceof HTMLCanvasElement&&e.pixelData))return i();const a=e.image,r=a.getContext("2d"),s=await this.layer.applyRenderer(e.pixelData,t),o=this.layer.applyFilter(s),n=o.pixelBlock;a.width=n.width,a.height=n.height;const l=r.createImageData(n.width,n.height);l.data.set(o.pixelBlock.getAsRGBA()),r.putImageData(l,0,0)}};n=e([t("esri.views.3d.layers.ImageryLayerView3D")],n);var l=n;export default l;

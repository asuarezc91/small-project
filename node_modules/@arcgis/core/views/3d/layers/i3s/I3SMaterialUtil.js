/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{isSome as e,isNone as a}from"../../../../core/maybe.js";import{clamp as o}from"../../../../core/mathUtils.js";import{defaultMaskAlphaCutoff as l}from"../../webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js";import{PBRSchematicMRRValues as r}from"../../webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js";function t(o,l){const t=new Map,i=(e,o)=>{if(a(e))return-1;if(t.has(e.id)){const a=t.get(e.id);return a.usage|=o,a.id}const l=t.size;return t.set(e.id,{id:l,usage:o}),l},n=l.pbrMetallicRoughness,c=n&&n.baseColorFactor,u=l.emissiveFactor,d=null==l.normalTexture&&null==l.emissiveTexture&&null==l.occlusionTexture&&(!n||null==n.metallicRoughnessTexture&&1===n.roughnessFactor&&(1===n.metallicFactor||0===n.metallicFactor)),m=d?r[0]:n?n.metallicFactor:1,g=d?r[1]:n?n.roughnessFactor:1,h="mask"===l.alphaMode?33:1,p={baseColorFactor:c?[c[0],c[1],c[2],c[3]]:[1,1,1,1],baseColorTextureId:i(n&&n.baseColorTexture,h),metallicRoughnessTextureId:i(n&&n.metallicRoughnessTexture,2),metallicFactor:m,roughnessFactor:g},f={alphaMode:l.alphaMode,alphaCutoff:l.alphaCutoff,doubleSided:l.doubleSided,cullFace:"none"===l.cullFace?0:"back"===l.cullFace?2:"front"===l.cullFace?1:void 0,normalTextureId:i(l.normalTexture,4),emissiveTextureId:i(l.emissiveTexture,16),occlusionTextureId:i(l.occlusionTexture,8),emissiveFactor:u?[u[0],u[1],u[2]]:[0,0,0],metallicRoughness:p,wrapTextures:!1,isSchematic:d},x=[];return t.forEach((({usage:a},l)=>{const r=e(o)&&o[l]&&o[l].formats,t=r?r.map((({name:e,format:a})=>({name:e,encoding:s[a]}))):[];x.push({id:l,usage:a,encodings:t})})),{material:f,textures:x}}const s={jpg:"image/jpeg",png:"image/png",dds:"image/vnd-ms.dds","ktx-etc2":"image/ktx"};function i(e){const a=e&&e.materialDefinitions?Object.keys(e.materialDefinitions)[0]:null,l=e&&e.textureDefinitions?Object.keys(e.textureDefinitions)[0]:null,r=a&&e.materialDefinitions[a],t=l&&e.textureDefinitions[l],s=n();if(null!=r){const e=r.params;e.diffuse&&(s.metallicRoughness.baseColorFactor=[e.diffuse[0],e.diffuse[1],e.diffuse[2],1]),null!=e.doubleSided&&(s.doubleSided=e.doubleSided,s.cullFace=e.doubleSided?0:2),"none"!==e.cullFace&&"front"!==e.cullFace&&"back"!==e.cullFace||(s.cullFace="none"===e.cullFace?0:"back"===e.cullFace?2:1),e.transparency&&(s.metallicRoughness.baseColorFactor[3]=o(1-e.transparency,0,1)),(e.useVertexColorAlpha||s.metallicRoughness.baseColorFactor[3]<1)&&(s.alphaMode="blend")}const i=[];if(null!=t){const e=0;!t.wrap||"repeat"!==t.wrap[0]&&"repeat"!==t.wrap[1]||(s.wrapTextures=!0);let a=1;"rgba"===t.channels&&(s.alphaMode="blend",a|=32);const o=t.images.length-1,l=t.images[o],r=e=>e&&e.split("/").pop(),n=Array.isArray(t.encoding)?t.encoding.map(((e,a)=>({name:r(l.href[a]),encoding:e}))):[{name:r(l.href),encoding:t.encoding}];i.push({id:e,usage:a,encodings:n}),s.metallicRoughness.baseColorTextureId=e}return{material:s,textures:i}}const n=()=>({alphaMode:"opaque",alphaCutoff:l,doubleSided:!0,cullFace:0,normalTextureId:-1,emissiveTextureId:-1,occlusionTextureId:-1,emissiveFactor:[0,0,0],metallicRoughness:{baseColorFactor:[.8,.8,.8,1],baseColorTextureId:-1,metallicRoughnessTextureId:-1,metallicFactor:0,roughnessFactor:.6},wrapTextures:!1,isSchematic:!0});export{t as getMaterialAndTextures,i as getMaterialAndTexturesFromShared};

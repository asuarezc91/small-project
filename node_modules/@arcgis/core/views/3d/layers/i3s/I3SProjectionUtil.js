/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{c as t}from"../../../../chunks/vec3f64.js";import{getReferenceEllipsoid as o}from"../../../../geometry/projectionEllipsoid.js";import{computeLinearTransformation as r}from"../../../../geometry/projection.js";import{a}from"../../../../chunks/mat4f64.js";function n(t,o,n,h){const c=s(t,o,n),i=a();return r(n,c,i,h),i}function s(r,a,n){const s=t(),h=r[3],c=2**(4*Math.ceil(Math.log(h)*Math.LOG2E/4)+1);if(n.isGeographic){const t=c/o(n).radius*180/Math.PI,a=Math.round(r[1]/t),h=Math.max(-90,Math.min(90,a*t)),i=t/Math.cos((Math.abs(h)-t/2)/180*Math.PI),e=Math.round(r[0]/i)*i;s[0]=e,s[1]=h}else{const t=Math.round(r[0]/c),o=Math.round(r[1]/c);s[0]=t*c,s[1]=o*c}const i=r[2]+a,e=Math.round(i/c);return s[2]=e*c,s}export{n as computeGlobalTransformation,s as getLocalOrigin};

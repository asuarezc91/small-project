/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import e from"../../../../core/has.js";import{clone as t}from"../../../../core/lang.js";import{isNone as r,isSome as i}from"../../../../core/maybe.js";import{makeAbsolute as o}from"../../../../core/urlUtils.js";import{eachAlways as n,isAbortError as s,reject as a,all as u}from"../../../../core/promiseUtils.js";import{result as l,assertResult as f}from"../../../../core/asyncUtils.js";import{readBinaryAttribute as d,createGeometryDescriptor as c}from"./I3SBinaryReader.js";import{DDS_ENCODING_STRING as m,selectEncoding as h}from"./I3SUtil.js";import{getMaterialAndTextures as g,getMaterialAndTexturesFromShared as y}from"./I3SMaterialUtil.js";class D{constructor(e,t,r,i,o,n){if(this.streamDataController=t,this.logger=r,this.defaultGeometrySchema=i,this.requiredAttributes=o,this.options=n,this.logLayer=e,this.layerUrl=e.parsedUrl.path,this.geometryDefinitions=e.geometryDefinitions,e.materialDefinitions){const t=e.textureSetDefinitions;this.materialAndTextures=e.materialDefinitions.map((e=>g(t,e)))}}load(e,t,r){return this.streamDataController.request(e,t,{signal:r})}loadAttribute(e,t,r){const i=`${this.layerUrl}/nodes/${e.resources.attributes}/attributes/${t.key}/0`;return this.load(i,"binary",r).then((e=>d(t,e)))}loadAttributes(e,t,r){return n(t.map((t=>this.loadAttribute(e,t.attributeStorageInfo,r)))).then((r=>{const i={};for(let o=0;o<t.length;++o)if(r[o].value)i[t[o].name]=r[o].value;else{if(s(r[o].error))throw r[o].error;this.logger.error("#loadAttributes",this.logLayer,`Failed to load attributeData for '${t[o].name}' on node '${e.id}'`,r[o].error)}return i}))}async loadNodeData(o,n){const s=null!=this.requiredAttributes&&o.resources.attributes?l(this.loadAttributes(o,this.requiredAttributes,n)):null,{bufferDefinition:u,bufferIndex:d}=function(t,r){const i={bufferDefinition:null,bufferIndex:0};if(null==t||r.resources.geometryDefinition<0)return i;const o=r.resources.geometryDefinition>=0?t[r.resources.geometryDefinition].geometryBuffers:null;if(null==o)return i;for(let t=0;t<o.length;t++){const r=o[t];if(null==r.compressedAttributes)i.bufferIndex=t,i.bufferDefinition=o[t];else if("draco"===r.compressedAttributes.encoding&&!e("disable-feature:i3s-draco"))return i.bufferIndex=t,i.bufferDefinition=r,i}return i}(this.geometryDefinitions,o),m=!!o.resources.geometry,h=m?l(this.loadGeometry(o.resources.geometry,d,n)):null,g=o.resources.hasSharedResource?await this.loadShared(o,n):null,D=this.materialAndTextures&&o.resources.materialDefinition>=0?this.materialAndTextures[o.resources.materialDefinition]:null!=g?y(g):null,b=D&&D.material,x=D&&D.textures,p=`${o.id}`,A=!m&&this.options.loadFeatureData,T=A?await this.loadFeatureData(p,n):null,$=A?function(e){for(const t of e.featureData){const e=t.geometries;if(null!=e)for(const r of e)return{featureIds:[t.id],featureDataPosition:t.position,geometries:[r]}}return null}(T):function(e){return{featureIds:[],geometries:[{type:"ArrayBufferView",params:{material:e}}],featureDataPosition:[0,0,0]}}(b),w=r($)&&function(e){const t=new Array;for(const r of e.featureData)null!=r.position&&t.push({featureIds:[r.id],featureDataPosition:r.position,geometries:null});return t}(T),I=null!=x&&x.length>0?l(this.loadTextures(o,x,n)):null;let j=null,U=null;if(h){j=f(await h);const e=function(e,r){if(!e||!r||!r.materialDefinitions)return e;const i=Object.keys(r.materialDefinitions)[0];!r.materialDefinitions[i].params.vertexRegions&&e.vertexAttributes.region&&delete(e=t(e)).vertexAttributes.region;return e}(this.defaultGeometrySchema,g);U=c(u,e)}const F=I?f(await I):null,S=s?f(await s):{},C=S?{attributeData:S,loadedAttributes:this.requiredAttributes}:null;return i($)?{geometryData:$,attributeDataInfo:C,geometryBuffer:j,geometryDescriptor:U,requiredTextures:x,textureData:F}:i(w)?{pointData:w,attributeDataInfo:C,geometryBuffer:j,geometryDescriptor:U,requiredTextures:x,textureData:F}:a()}static addAbsoluteHrefTexture(e,t){const r=e.textureDefinitions;if(null!=r)for(const e of Object.keys(r))for(const i of r[e].images)Array.isArray(i.href)?i.hrefConcat=i.href.map((e=>o(e,t))):i.hrefConcat=o(i.href,t)}static fixTextureEncodings(e){const t=e.textureDefinitions;if(null!=t)for(const e in t){const r=t[e];if(Array.isArray(r.encoding))for(let e=0;e<r.encoding.length;e++){const t=r.encoding[e];"data:"===t.substring(0,5)&&(r.encoding[e]=t.substring(5))}else{const e=r.encoding;"data:"===e.substring(0,5)&&(r.encoding=e.substring(5))}}}loadShared(e,t){const r=`${this.layerUrl}/nodes/${e.resources.geometry}/shared`;return this.load(r,"json",t).then((e=>(D.fixTextureEncodings(e),D.addAbsoluteHrefTexture(e,r),e)))}loadTexture(e,t,r,i,o,n){return o===m?this.load(e,"binary",n).then((e=>({id:t,usage:r,data:e,encoding:o}))):this.load(e,"image",n).then((e=>{let n=e;if(i&&e.width*e.height>=4096){const t=Math.ceil(e.width/2),r=Math.ceil(e.height/2),i=document.createElement("canvas");i.width=t,i.height=r;i.getContext("2d").drawImage(e,0,0,t,r),n=i}return{id:t,usage:r,data:n,encoding:o}}))}loadTextures(e,t,r){const i=this.options.textureFormat===D.TextureFormat.Compressed,o=this.options.textureFormat===D.TextureFormat.Downsampled,n=this.options.textureUsageMask;return u(t.map((t=>{if(0==(t.usage&n))return null;const s=h(t.encodings,i);if(null==s)return this.logger.error("#loadTextures",this.logLayer,`No known encoding for texture found on node ${e.id}`),a();const u=e.resources.texture||e.id,l=`${this.layerUrl}/nodes/${u}/textures/${s.name}`;return this.loadTexture(l,t.id,t.usage,o,s.encoding,r)})))}loadFeatureData(e,t){const r=`${this.layerUrl}/nodes/${e}/features/0`;return this.load(r,"json",t)}loadGeometry(e,t,r){const i=`${this.layerUrl}/nodes/${e}/geometries/${t}`;return this.load(i,"binary",r)}}!function(e){let t;!function(e){e[e.Compressed=0]="Compressed",e[e.Normal=1]="Normal",e[e.Downsampled=2]="Downsampled"}(t=e.TextureFormat||(e.TextureFormat={}))}(D||(D={}));var b=D;export default b;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{isSome as e,isNone as t}from"../../../../core/maybe.js";import r from"../../../../Color.js";import{pt2px as i}from"../../../../core/screenUtils.js";import{VertexAttrConstants as a}from"../../webgl-engine/lib/Util.js";import{GeometryData as n}from"../../webgl-engine/lib/GeometryData.js";import{materialParametersDefaults as o}from"../../webgl-engine/lib/Material.js";import{computeCentroid as s}from"./graphicUtils.js";import{elevationModeChangeUpdateType as l,SymbolUpdateType as m,needsElevationUpdates2D as c}from"./elevationAlignmentUtils.js";import{perObjectElevationAligner as d}from"./ElevationAligners.js";import{ElevationContext as h}from"./ElevationContext.js";import u from"./Graphics3DObject3DGraphicLayer.js";import p from"../../webgl-engine/lib/Geometry.js";import{emptySymbolComplexity as f}from"./symbolComplexity.js";import{Graphics3DSymbolLayer as g}from"./Graphics3DSymbolLayer.js";import{createStageObjectForHUD as O,extendPointGraphicElevationContext as y}from"./pointUtils.js";import{LineCalloutMaterial as v}from"../../webgl-engine/materials/LineCalloutMaterial.js";const C=a;class _ extends g{constructor(e,t){super(e,null,t,U),this._elevationOptions={supportsOffsetAdjustment:!0,supportsOnTheGround:!1},this.ensureDrapedStatus(!1)}async doLoad(){this._material=new v(this.materialParameters,this._getIdHint("_lineCallout_common")),this._context.stage.add(3,this._material)}destroy(){super.destroy(),e(this._material)&&(this._context.stage.remove(3,this._material.id),this._material=null)}perInstanceMaterialParameters(e){const t=this.materialParameters;return t.screenOffset=e.screenOffset||[0,0],t.centerOffsetUnits=e.centerOffsetUnits||"world",t}get materialParameters(){const t=this.symbol,a=t.callout,n=e(a.color)?r.toUnitRGBA(a.color):[0,0,0,0];n[3]*=this._getLayerOpacity();const s=i(a.size||0);let l=null;if(t.verticalOffset){const{screenLength:e,minWorldLength:r,maxWorldLength:a}=t.verticalOffset;l={screenLength:i(e),minWorldLength:r||0,maxWorldLength:null!=a?a:1/0}}const m=e(a.border)&&e(a.border.color)?r.toUnitRGBA(a.border.color):null,c="object"===t.symbolLayers.getItemAt(0).type,d=!c,h=c?0:void 0,u="label-3d"===t.type;return{color:n,size:s,verticalOffset:l,screenSizePerspective:this._context.screenSizePerspectiveEnabled?this._context.sharedResources.screenSizePerspectiveSettings:null,screenOffset:[0,0],centerOffsetUnits:"world",borderColor:m,occlusionTest:d,shaderPolygonOffset:h,depthHUDAlignStart:u,slicePlaneEnabled:this._context.slicePlaneEnabled,renderOccluded:o.renderOccluded}}_defaultElevationInfoNoZ(){return E}createGraphics3DGraphic(e){const r=e.renderingInfo,i=e.graphic,a=this.setGraphicElevationContext(i,new h,r.elevationOffset||0),n=r.symbol,o="on-the-ground"===this._elevationContext.mode&&("cim"===n.type||!n.symbolLayers.some((e=>"object"===e.type||"text"===e.type)));if("label-3d"!==n.type&&o)return null;const l=s(i.geometry);if(t(l))return null;const m="graphic"+i.uid;return this._createAs3DShape(l,a,r,m,i.uid)}layerOpacityChanged(){return t(this._material)||this._material.setParameterValues(this.materialParameters),!0}layerElevationInfoChanged(t,r,i){const a=this._elevationContext.mode,n=l(_.elevationModeChangeTypes,i,a);return n!==m.UPDATE||t.forEach((t=>{const i=r(t);e(i)&&this.updateGraphicElevationContext(t.graphic,i)})),n}slicePlaneEnabledChanged(){return t(this._material)||this._material.setParameterValues({slicePlaneEnabled:this._context.slicePlaneEnabled}),!0}physicalBasedRenderingChanged(){return!0}pixelRatioChanged(){return!0}setGraphicElevationContext(e,t,r=0){const i=super.setGraphicElevationContext(e,t);return i.addOffsetRenderUnits(r),i}updateGraphicElevationContext(e,t){this.setGraphicElevationContext(e,t.elevationContext,t.metadata.elevationOffset),t.needsElevationUpdates=c(t.elevationContext.mode)}updateGeometry(e,t){return!1}computeComplexity(){return{primitivesPerFeature:2,primitivesPerCoordinate:0,drawCallsPerFeature:0,estimated:!1,memory:f.memory}}createVertexData(e){const{translation:t,centerOffset:r}=e;if(!t&&!r)return P;const i=t?{size:3,data:[t[0],t[1],t[2]]}:P[C.POSITION],a=r?{size:4,data:[r[0],r[1],r[2],r[3]]}:P[C.AUXPOS1];return{[C.POSITION]:i,[C.NORMAL]:P[C.NORMAL],[C.AUXPOS1]:a}}getOrCreateMaterial(t,r){const i=this.perInstanceMaterialParameters(t),a=v.uniqueMaterialIdentifier(i);if(e(this._material)&&a===this._material.uniqueMaterialIdentifier)return{material:this._material,isUnique:!1};if(t.materialCollection){let e=t.materialCollection.getMaterial(a);return e||(e=new v(i,`${r}_lineCallout_shared`),t.materialCollection.addMaterial(a,e)),{material:e,isUnique:!1}}return{material:new v(i,`${r}_lineCallout_unique`),isUnique:!0}}_createAs3DShape(e,t,r,i,a){const o=new n(this.createVertexData(r),x,"point"),s=[new p(o,i)],l=this.getOrCreateMaterial(r,i),m=O(this._context,e,s,[l.material],null,null,t,i,this._context.layer.uid,a);if(null===m)return null;const h=d,f=new u(this,m.object,s,l.isUnique?[l.material]:null,null,h,t);return f.metadata={elevationOffset:r.elevationOffset||0},f.alignedSampledElevation=m.sampledElevation,f.needsElevationUpdates=c(t.mode),y(f,e,this._context.elevationProvider),f}}_.elevationModeChangeTypes={definedChanged:m.UPDATE,staysOnTheGround:m.UPDATE,onTheGroundChanged:m.RECREATE};const P={[C.POSITION]:{size:3,data:[0,0,0]},[C.NORMAL]:{size:3,data:[0,0,1]},[C.AUXPOS1]:{size:4,data:[0,0,0,1]}},b=new Uint32Array([0]),x={[C.POSITION]:b,[C.NORMAL]:b,[C.AUXPOS1]:b},E={mode:"relative-to-ground",offset:0},U={ignoreDrivers:!0,renderPriority:0,renderPriorityStep:1};export default _;export{_ as Graphics3DLineCalloutSymbolLayer};

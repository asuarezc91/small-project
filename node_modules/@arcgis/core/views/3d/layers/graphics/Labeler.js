/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import"../../../../core/has.js";import{isNone as t,destroyMaybe as s,disposeMaybe as a,unwrap as l}from"../../../../core/maybe.js";import i from"../../../../core/Logger.js";import"../../../../core/accessorSupport/ensureType.js";import{property as r}from"../../../../core/accessorSupport/decorators/property.js";import{subclass as o}from"../../../../core/accessorSupport/decorators/subclass.js";import"../../../../core/urlUtils.js";import"../../../../core/uuid.js";import"../../../../portal/support/resourceExtension.js";import{throwIfAborted as n,isAbortError as c,createAbortController as h}from"../../../../core/promiseUtils.js";import b from"../../../../core/Accessor.js";import{isCalloutSupport as d}from"../../../../symbols/callouts/calloutUtils.js";import{forEach as p,result as u}from"../../../../core/asyncUtils.js";import g from"../../../../core/Handles.js";import{Task as y}from"../../../support/Scheduler.js";import{someMap as f}from"../../../../core/MapUtils.js";import{areLabelsVisible as x}from"../../../../layers/support/layerUtils.js";import C from"../../support/debugFlags.js";import{hydrateGraphic as m}from"../../../../layers/graphics/hydratedFeatures.js";import{createLabelFunction as v}from"../../../../layers/support/labelFormatUtils.js";import{make as L}from"./Graphics3DCalloutSymbolLayerFactory.js";import T from"./Graphics3DGraphicCreationContext.js";import G from"../../webgl-engine/lib/Layer.js";import{TextRenderParameters as D}from"../../webgl-engine/lib/TextRenderParameters.js";import{TextRenderer as w}from"../../webgl-engine/lib/TextRenderer.js";import{getGraphics3DSymbol as R}from"./graphicSymbolUtils.js";import{get as A}from"./labelPlacement.js";import O from"../../webgl-engine/lib/MaterialCollection.js";import _ from"../../webgl-engine/lib/TextTextureAtlas.js";const S=i.getLogger("esri.views.3d.layers.graphics.Labeler");let I=class extends b{constructor(){super(...arguments),this.idHint="__labeler",this._dirty=!1,this.labels=new Map,this.labelsToAdd=new Map,this.labelsToRemove=new Map,this.labelingContexts=[]}setup(){if(t(this.handles)){const e=this.view.resourceController.scheduler;this.handles=new g,this.handles.add([this.view.watch("state.camera",(()=>this.setDirty())),this.view.watch("pixelRatio",(()=>this.resetAllLabels())),e.registerTask(y.LABELER,(e=>this.update(e)),(()=>this.needsUpdate()))])}t(this.textTextureAtlas)&&(this.textTextureAtlas=new _({idHint:this.idHint+"_atlas",view:this.view}),this.hudMaterialCollection=new O(this.view._stage),this.calloutMaterialCollection=new O(this.view._stage))}dispose(){this.handles=s(this.handles),this.textTextureAtlas=a(this.textTextureAtlas),this.hudMaterialCollection=a(this.hudMaterialCollection),this.calloutMaterialCollection=a(this.calloutMaterialCollection),this.labelingContexts=[],this.labels.clear(),this.labelsToAdd.clear(),this.labelsToRemove.clear()}isActiveLabelingContext(e){return e.active&&x(e.layer)}activateLabelingContext(e){e.labels.forEach(((e,t)=>{this.labels.set(t,e),e.graphics3DGraphic.setVisibilityFlag(0,!0,1)})),e.active=!0}deactivateLabelingContext(e){e.labels.forEach(((e,t)=>{e.graphics3DGraphic.setVisibilityFlag(0,!1,1),this.setLabelGraphicVisibility(e.graphics3DGraphic,!1),this.labels.delete(t)})),e.active=!1}addLabelTextureToAtlas(e){for(const t of e.graphics3DGraphic.labelGraphics){if(!t._labelClass)continue;const s=e.textRenderers[t._labelIndex];s&&this.textTextureAtlas.addTextTexture(s,t.stageObject)}e.rendered=!0}removeLabelTextureFromAtlas(e){for(const t of e.graphics3DGraphic.labelGraphics){if(!t._labelClass)continue;const s=e.textRenderers[t._labelIndex];s&&this.textTextureAtlas.removeTextTexture(s,t.stageObject)}e.rendered=!1}needsUpdate(){return this.view.ready&&this.isDirty}update(e){this._updateLabels(e),!this._dirty&&this.deconflictor.needsUpdate()&&this.deconflictor.update(e)}_updateLabels(e){if(this._dirty){this._dirty=!1;for(const t of this.labelingContexts)if(this.isActiveLabelingContext(t)){if(!this.hasValidLabelClassContext(t)){if(this.hasInvalidLabelClassContext(t)){this.deactivateLabelingContext(t);continue}if(this.createLabelClassContext(t),this.hasPendingLabelClassContext(t)){this._dirty=!0;continue}if(!this.hasValidLabelClassContext(t))continue}f(t.labelsToInitialize,((s,a)=>(this.ensureGraphics3DResources(s)&&(this.labels.set(a,s),this.deconflictor.setDirty(),e.madeProgress()),(s.visible&&s.hasTextTextureResources||!s.visible&&s.hasGraphics3DResources)&&(t.labelsToInitialize.delete(a),e.madeProgress()),e.done)))&&(this._dirty=!0)}this.labelsToRemove.forEach((e=>this.removeLabelTextureFromAtlas(e))),this.labelsToRemove.clear(),this.labelsToAdd.forEach((e=>this.addLabelTextureToAtlas(e))),this.labelsToAdd.clear(),this._dirty||this.notifyChange("updating")}}hasPendingLabelClassContext(e){return e.labelClassPromise&&!!e.labelClassAbortController}hasValidLabelClassContext(e){return e.labelClassContexts&&e.labelClassContexts.length}hasInvalidLabelClassContext(e){return null===e.labelClassContexts}async createLabelClassContextAsync(e){const s=e.labelClassAbortController.signal;await e.layer.when(),n(s),e.scaleVisibility&&e.scaleVisibility.updateScaleRangeActive();const a=e.graphics3DCore,l=a.layer,i=l.labelingInfo&&l.labelingInfo.filter((e=>!!e.symbol));if(!i||0===i.length)return;const r=new Array(i.length);let o=!1;await p(i,(async(l,i)=>{const c=l.symbol,h=R(a.getOrCreateGraphics3DSymbol(c));if(t(h))return void S.error("Failed to create Graphics3DSymbol for label");await h.load(),n(s);let b=null;d(c)&&c.hasVisibleCallout()&&(b=L(c,a.symbolCreationContext),await b.load(),n(s));const p=await u(v(l,e.layer.fields.map((e=>e.toJSON())),this.view.spatialReference));n(s),!0===p.ok?r[i]={labelClass:l,labelFunction:p.value,graphics3DSymbol:h,graphics3DCalloutSymbolLayer:b,calloutSymbolLayerIndex:0,textRenderParameters:this.createTextRenderParameters(h.symbol)}:(S.error(`Label expression failed to evaluate: ${p.error}`),o=!0)})),n(s),o||(e.labelClassContexts=r)}async createLabelClassContext(e){return e.labelClassPromise||(e.labelClassPromise=this.createLabelClassContextAsync(e).catch((t=>{if(c(t))throw t;e.labelClassContexts=null})).then((()=>{e.labelClassAbortController=null,this.notifyChange("updating")})).catch((()=>{})),this.notifyChange("updating")),e.labelClassPromise}createTextRenderParameters(e){const t=e.symbolLayers.getItemAt(0);return t&&"text"===t.type?D.fromSymbol(t,this.view.pixelRatio):null}destroyLabelClassContext(e){for(const t of e.labelClassContexts)--t.graphics3DSymbol.referenced,t.graphics3DSymbol=null;const t=e.labelClassAbortController;e.labelClassAbortController=h(),t&&t.abort(),e.labelClassContexts=[],e.labelClassPromise=null,this.notifyChange("updating")}createTextSymbolGraphic(e,t,s,a,l){const i={text:e.text,centerOffset:s.centerOffset,translation:s.translation,elevationOffset:s.elevationOffset,screenOffset:s.screenOffset,anchor:s.anchor,centerOffsetUnits:s.centerOffsetUnits,verticalOffset:s.verticalOffset,debugDrawBorder:C.LABELS_SHOW_BORDER,displayWidth:e.displayWidth,displayHeight:e.displayHeight};return P.graphic=t,P.renderingInfo=null,P.layer=a,l.createLabel(P,i,this.hudMaterialCollection,this.textTextureAtlas)}createLineCalloutGraphic(e,t,s,a,l){const i={symbol:t,translation:a.translation,elevationOffset:a.elevationOffset,screenOffset:a.screenOffset,centerOffset:a.centerOffset,centerOffsetUnits:a.centerOffsetUnits,materialCollection:this.calloutMaterialCollection};return P.graphic=e,P.renderingInfo=i,P.layer=l,s.createGraphics3DGraphic(P)}ensureGraphics3DResources(e){if(e.hasGraphics3DResources)return!1;const s=e.graphics3DGraphic;if(s.destroyed)return!1;this.ensureTextTextureResources(e);const a=e.labelingContext,l=a.labelClassContexts;if(!l||0===l.length||!a.emptySymbolLabelSupported&&0===s._graphics.length)return!1;let i=!1;const r=s.graphic,o=a.layer,n=x(a.layer),c=this.view._stage;for(let h=0;h<l.length;h++){const b=e.textRenderers[h];if(!b)continue;const d=l[h],p=d.graphics3DSymbol;let u=null;p.symbol&&"label-3d"===p.symbol.type&&(u=p.symbol);const g=p.symbolLayers[0];if(!g)continue;const y=d.labelClass,f=a.disablePlacement,x=A({graphics3DGraphic:s,labelSymbol:u,labelClass:y,disablePlacement:f});if(t(x))continue;g.setElevationInfoOverride(a.elevationInfoOverride);const C=this.createTextSymbolGraphic(b,r,x,o,g);if(!C)return!1;C._labelClass=y,C._labelIndex=h,s.addLabelGraphic(C,c,a.stageLayer),s.setVisibilityFlag(0,n,1),s.clearVisibilityFlag(1,1),s.setVisibilityFlag(3,!1,1),i=!0;const m=d.graphics3DCalloutSymbolLayer;if(m&&x.hasLabelVerticalOffset){m.setElevationInfoOverride(a.elevationInfoOverride);const e=this.createLineCalloutGraphic(r,u,m,x,o);e&&(d.calloutSymbolLayerIndex=s.labelGraphics.length,s.addLabelGraphic(e,c,a.stageLayer))}break}return a.scaleVisibility&&i&&a.scaleVisibility.updateGraphicLabelScaleVisibility(s),e.hasGraphics3DResources=!0,!0}destroyGraphics3DResources(e){const t=e.labelingContext.labelClassContexts;for(const s of e.graphics3DGraphic.labelGraphics){if(null==s._labelClass)continue;const e=t[s._labelIndex].graphics3DSymbol.symbolLayers[0];null!=e&&e.onRemoveGraphic(s)}e.graphics3DGraphic.clearLabelGraphics(),e.hasGraphics3DResources=!1}ensureTextTextureResources(e){if(e.hasTextTextureResources)return;const s=e.labelingContext,a=s.labelClassContexts;if(!a||0===a.length)return;const l=e.graphics3DGraphic.graphic;for(let i=0;i<a.length;i++){const r=a[i];if(e.textRenderers[i]=null,!r.textRenderParameters)continue;const o=r.labelFunction;let n;if("arcade"===o.type)try{const e=o.needsHydrationToEvaluate()?m(l,s.layer):l;n=o.evaluate(e)}catch(e){n=null}else n=o.evaluate(l);t(n)||""===n||/^\s+$/.test(n)||(e.textRenderers[i]=new w(n,r.textRenderParameters))}e.hasTextTextureResources=!0}destroyTextTextureResources(e){e.textRenderers=[],e.hasTextTextureResources=!1}addGraphic(e,t){const s={hasGraphics3DResources:!1,hasTextTextureResources:!1,visible:!1,rendered:!1,labelingContext:e,graphics3DGraphic:t,textRenderers:[]},a=t.graphic.uid;e.labels.set(a,s),e.labelsToInitialize.set(a,s),this.setDirty(),this.deconflictor.setDirty()}removeGraphic(e,t){const s=t.graphic.uid,a=e.labels.get(s);a&&(this.destroyGraphic(a,s),e.labels.delete(s),e.labelsToInitialize.delete(s),this.setDirty(),this.deconflictor.setDirty())}destroyGraphic(e,t){this.labels.has(t)&&(this.labels.delete(t),this.labelsToAdd.delete(t),this.labelsToRemove.delete(t)),e.hasTextTextureResources&&(this.removeLabelTextureFromAtlas(e),this.destroyTextTextureResources(e)),e.hasGraphics3DResources&&this.destroyGraphics3DResources(e)}async labelingInfoChange(e,t){if(!t)return this.visibilityInfoChange(e),this.resetLabels(e),this.createLabelClassContext(e);for(const s of t){const t=e.labels.get(s);t&&(this.removeGraphic(e,t.graphics3DGraphic),this.addGraphic(e,t.graphics3DGraphic))}}globalPropertyChanged(e,t){for(const s of t.labelClassContexts){const a=new Map;t.labels.forEach((e=>{const t=e.graphics3DGraphic;a.set(t.graphic.uid,t)}));const i=e=>e.labelGraphics[0];if(l(s.graphics3DSymbol.symbolLayers[0]).globalPropertyChanged(e,a,i),s.graphics3DCalloutSymbolLayer){const t=e=>e.labelGraphics[s.calloutSymbolLayerIndex];s.graphics3DCalloutSymbolLayer.globalPropertyChanged(e,a,t)}}}visibilityInfoChange(e){const t=e.layer.labelsVisible;t&&!e.active&&this.activateLabelingContext(e),!t&&e.active&&this.deactivateLabelingContext(e),this.setDirty()}resetAllLabels(){for(const e of this.labelingContexts)this.resetLabels(e)}resetLabels(e){e.labels.forEach(((t,s)=>{this.destroyGraphic(t,s),t.visible=!1,t.rendered=!1,e.labelsToInitialize.set(s,t)})),this.destroyLabelClassContext(e),this.setDirty(),this.deconflictor.setDirty()}findLabelingContext(e){for(const t of this.labelingContexts)if(t.graphics3DCore===e)return t;return null}addGraphicsOwner(e,t,s){const a=s&&s.emptySymbolLabelSupported||!1,l=s&&s.elevationInfoOverride||null,i=s&&s.disablePlacement||null;if(this.findLabelingContext(e))return;const r=e.layer,o={graphics3DCore:e,layer:r,scaleVisibility:t,emptySymbolLabelSupported:a,elevationInfoOverride:l,disablePlacement:i,active:r.labelsVisible,labelClassPromise:null,labelClassAbortController:h(),labelClassContexts:[],labels:new Map,labelsToInitialize:new Map,stageLayer:new G(`${this.idHint}_${r.uid}`,{isPickable:!0},r.uid)};return this.view._stage.add(0,o.stageLayer),this.view._stage.addToViewContent([o.stageLayer.id]),this.labelingContexts.push(o),this.setDirty(),{addGraphic:e=>this.addGraphic(o,e),removeGraphic:e=>this.removeGraphic(o,e),featureReductionChange:()=>{},layerLabelsEnabled:()=>x(o.layer),labelingInfoChange:e=>this.labelingInfoChange(o,e),elevationInfoChange:()=>this.globalPropertyChanged("elevationInfo",o),slicePlaneEnabledChange:()=>this.globalPropertyChanged("slicePlaneEnabled",o),visibilityInfoChange:()=>this.visibilityInfoChange(o),reset:()=>this.resetLabels(o),clear:()=>{},processStageDirty:()=>this.view._stage.processDirtyLayer(o.stageLayer.id)}}removeGraphicsOwner(e){const t=this.findLabelingContext(e);if(!t)return;const s=this.labelingContexts.indexOf(t);this.labelingContexts.splice(s,1),t.labels.forEach((e=>this.removeGraphic(t,e.graphics3DGraphic)));const a=t.stageLayer.id;this.view._stage.removeFromViewContent([a]),this.view._stage.remove(0,a),t.stageLayer=null,this.setDirty()}setLabelGraphicVisibility(e,t){const s=e.graphic.uid,a=this.labels.get(s);a&&a.visible!==t&&(t&&!a.rendered?(this.labelsToAdd.set(s,a),this.labelsToRemove.delete(s),a.hasTextTextureResources||a.labelingContext.labelsToInitialize.set(s,a)):!t&&a.rendered&&(this.labelsToRemove.set(s,a),this.labelsToAdd.delete(s)),a.visible=t,this.setDirty())}get isDirty(){return this._dirty||this.textTextureAtlas&&this.textTextureAtlas.updating||this.deconflictor.needsUpdate()}setDirty(){this._dirty||(this._dirty=!0,this.notifyChange("updating"))}get updating(){return this._dirty||this.textTextureAtlas&&this.textTextureAtlas.updating||this.deconflictor.updating||this.labelingContexts.some((e=>this.hasPendingLabelClassContext(e)))}get updatingProgress(){if(!this.updating||!this.textTextureAtlas)return 1;const e=this.labelingContexts.length>0?this.labelingContexts.reduce(((e,t)=>e+(this.hasPendingLabelClassContext(t)?0:1)),0)/this.labelingContexts.length:1;return(this._dirty?0:.3)+(this.textTextureAtlas.updating?0:.1)+.1*e+.5*this.deconflictor.updatingProgress}get test(){return{textTextureAtlas:this.textTextureAtlas,resetAllLabels:()=>this.resetAllLabels()}}};e([r({constructOnly:!0})],I.prototype,"view",void 0),e([r({constructOnly:!0})],I.prototype,"deconflictor",void 0),e([r()],I.prototype,"textTextureAtlas",void 0),e([r({type:Boolean,readOnly:!0,dependsOn:["textTextureAtlas.updating","deconflictor.updating"]})],I.prototype,"updating",null),I=e([o("esri.views.3d.layers.graphics.Labeler")],I);const P=new T(null,null,null);export{I as Labeler};

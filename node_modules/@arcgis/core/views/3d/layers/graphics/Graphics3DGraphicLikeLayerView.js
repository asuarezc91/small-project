/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../chunks/tslib.es6.js";import"../../../../core/has.js";import"../../../../core/Logger.js";import"../../../../core/accessorSupport/ensureType.js";import{property as e}from"../../../../core/accessorSupport/decorators/property.js";import{subclass as i}from"../../../../core/accessorSupport/decorators/subclass.js";import"../../../../core/urlUtils.js";import"../../../../core/uuid.js";import"../../../../portal/support/resourceExtension.js";import{isAbortError as s,reject as r}from"../../../../core/promiseUtils.js";import a from"../../../../core/Accessor.js";import n from"../../../../core/Collection.js";import o from"../../../../Graphic.js";import h from"../../../../core/Handles.js";import c from"../../../../layers/Layer.js";import{init as p}from"../../../../core/watchUtils.js";import{diff as l}from"../../../../core/accessorSupport/diffUtils.js";import d from"../../../../tasks/support/Query.js";import{WatchUpdatingTracking as u}from"../../../support/WatchUpdatingTracking.js";import{hydrateGraphic as g}from"../../../../layers/graphics/hydratedFeatures.js";import{enlargeExtent as m}from"./graphicUtils.js";import{SUSPEND_RESUME_EXTENT_OPTIMISM as y}from"./constants.js";import{Graphics3DCore as b}from"./Graphics3DCore.js";import f from"./Graphics3DScaleVisibility.js";import j from"./Graphics3DElevationAlignment.js";import{Graphics3DObjectStates as w}from"./Graphics3DObjectStates.js";let C=class extends a{constructor(t){super(t),this.graphicsCore=null,this.elevationAlignment=new j,this.watchUpdatingTracking=new u,this.handles=new h,this.suspendResumeExtent=null}normalizeCtorArgs(t){let e=null;t.scaleVisibilityEnabled&&(delete(t={...t}).scaleVisibilityEnabled,e=new f);const i=new b({owner:t.owner,layer:t.layer,preferredUpdatePolicy:0,graphicSymbolSupported:!0});return{...t,graphicsCore:i,scaleVisibility:e}}initialize(){this.scaleVisibility&&"minScale"in this.layer&&this.watchUpdatingTracking.add(this.layer,"scaleRangeId",(()=>this.scaleVisibility.layerMinMaxScaleChangeHandler())),this.elevationAlignment&&"elevationInfo"in this.layer&&this.watchUpdatingTracking.add(this.layer,"elevationInfo",((t,e)=>{l(t,e)&&this.watchUpdatingTracking.addPromise(this.graphicsCore.elevationInfoChange())}))}async setup(){const t=(t,e,i)=>this.graphicsCore.spatialIndex.queryGraphicUIDsInExtent(t,e,i);if(this.elevationAlignment.setup(this.owner,t,this.graphicsCore,this.view.elevationProvider),this.scaleVisibility&&"minScale"in this.layer){const e=this.owner.view.basemapTerrain;this.scaleVisibility.setup(this.owner,this.layer,t,this.graphicsCore,e)}this._set("objectStates",new w(this.graphicsCore));try{await this.graphicsCore.setup({elevationAlignment:this.elevationAlignment,scaleVisibility:this.scaleVisibility,objectStates:this.objectStates})}catch(t){if(s(t))return;throw t}this.destroyed||(this.handles.add(this.view.watch("clippingArea",(()=>this.updateClippingExtent()),!0)),this.updateClippingExtent(),this.setupSuspendResumeExtent(),this.graphicsCore.startCreateGraphics())}destroy(){this.handles&&(this.handles.destroy(),this.handles=null),this.watchUpdatingTracking.destroy(),this.elevationAlignment&&(this.elevationAlignment.destroy(),this._set("elevationAlignment",null)),this.scaleVisibility&&(this.scaleVisibility.destroy(),this._set("scaleVisibility",null)),this.objectStates&&(this.objectStates.destroy(),this._set("objectStates",null)),this.graphicsCore&&(this.graphicsCore.destroy(),this._set("graphicsCore",null))}get suspended(){return!(!this.scaleVisibility||!this.scaleVisibility.suspended)}get updating(){return!!(this.graphicsCore&&this.graphicsCore.updating||this.scaleVisibility&&this.scaleVisibility.updating||this.watchUpdatingTracking&&this.watchUpdatingTracking.updating)}getGraphicFromGraphicUid(t){if(this.owner.loadedGraphics){const e=this.owner.loadedGraphics.find((e=>e.uid===t));if(e){const t=this.layer instanceof c?this.layer:null;return g(e,t)}}}whenGraphicBounds(t,e){return this.graphicsCore?this.graphicsCore.whenGraphicBounds(t,e):r()}computeAttachmentOrigin(t,e){return this.graphicsCore?this.graphicsCore.computeAttachmentOrigin(t,e):null}getSymbolLayerSize(t,e){return this.graphicsCore?this.graphicsCore.getSymbolLayerSize(t,e):null}maskOccludee(t){const{set:e,handle:i}=this.objectStates.acquireSet(1,null);return this.objectStates.setUid(e,t.uid),i}highlight(t){if(t instanceof d)return S;if("number"==typeof t)return this.highlight([t]);if(t instanceof o)return this.highlight([t]);if(t instanceof n&&(t=t.toArray()),Array.isArray(t)&&t.length>0){if(t[0]instanceof o){const e=t.map((t=>t.uid)),{set:i,handle:s}=this.objectStates.acquireSet(0,null);return this.objectStates.setUids(i,e),s}if("number"==typeof t[0]){const e=t,{set:i,handle:s}=this.objectStates.acquireSet(0,null);return this.objectStates.setObjectIds(i,e),s}}return S}updateClippingExtent(){const t=this.view.clippingArea;this.graphicsCore.setClippingExtent(t,this.view.spatialReference)&&this.graphicsCore.recreateAllGraphics()}updateSuspendResumeExtent(){this.suspendResumeExtent=m(this.graphicsCore.computedExtent,this.suspendResumeExtent,y,this.graphicsCore.extentPadding),this.scaleVisibility.setExtent(this.suspendResumeExtent)}setupSuspendResumeExtent(){this.scaleVisibility&&(p(this.graphicsCore,"computedExtent",(t=>this.updateSuspendResumeExtent()),!0),this.graphicsCore.watch("extentPadding",(t=>this.updateSuspendResumeExtent())))}};t([e({constructOnly:!0})],C.prototype,"owner",void 0),t([e({constructOnly:!0})],C.prototype,"layer",void 0),t([e({readOnly:!0,aliasOf:"owner.view"})],C.prototype,"view",void 0),t([e({constructOnly:!0})],C.prototype,"graphicsCore",void 0),t([e({constructOnly:!0})],C.prototype,"scaleVisibility",void 0),t([e({readOnly:!0})],C.prototype,"elevationAlignment",void 0),t([e({readOnly:!0})],C.prototype,"objectStates",void 0),t([e({readOnly:!0})],C.prototype,"watchUpdatingTracking",void 0),t([e({readOnly:!0,dependsOn:["scaleVisibility.suspended"]})],C.prototype,"suspended",null),t([e({readOnly:!0,dependsOn:["graphicsCore.updating","scaleVisibility.updating","watchUpdatingTracking.updating"]})],C.prototype,"updating",null),C=t([i("esri.views.3d.layers.graphics.Graphics3DGraphicLikeLayerView")],C);const S={remove(){},pause(){},resume(){}};var v=C;export default v;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{isSome as e,isNone as t,get as r}from"../../../../core/maybe.js";import n from"../../../../core/Error.js";import o from"../../../../core/ObjectPool.js";import{pt2px as s}from"../../../../core/screenUtils.js";import{isCalloutSupport as i}from"../../../../symbols/callouts/calloutUtils.js";import{a}from"../../../../chunks/vec2f64.js";import{GeometryData as l}from"../../webgl-engine/lib/GeometryData.js";import c from"../../webgl-engine/lib/GeometryUtil.js";import{HUDMaterial as d}from"../../webgl-engine/materials/HUDMaterial.js";import{validateSymbolLayerSize as m,namedAnchorToHUDMaterialAnchorPos as h}from"./graphicUtils.js";import{SymbolUpdateType as f,needsElevationUpdates2D as p}from"./elevationAlignmentUtils.js";import{perObjectElevationAligner as u}from"./ElevationAligners.js";import{ElevationContext as g}from"./ElevationContext.js";import y from"./Graphics3DObject3DGraphicLayer.js";import x from"../../webgl-engine/lib/Geometry.js";import{Graphics3DSymbolLayer as b}from"./Graphics3DSymbolLayer.js";import{placePointOnGeometry as v,createStageObjectForHUD as O,extendPointGraphicElevationContext as P}from"./pointUtils.js";import{TextRenderParameters as _}from"../../webgl-engine/lib/TextRenderParameters.js";import j from"../../webgl-engine/lib/TextTexture.js";const w=[0,0,1];class E extends b{constructor(t,r,n,s){super(t,r,n,s),this._geometryDataPool=new o(l,((t,r,n)=>{const o=r.translation,s=e(n)?[n.displayWidth,n.displayHeight]:[0,0],i=r.centerOffset;if(0===t.indexCount){const e=w,r=[0,0];c.createPointGeometry(e,o,null,s,i,r,null,t)}else c.updatePointGeometry(null,o,null,s,i,null,null,t)})),this._elevationOptions={supportsOffsetAdjustment:!0,supportsOnTheGround:!1},this.ensureDrapedStatus(!1)}async doLoad(){if(!this._drivenProperties.size){const e=m(this.symbolLayer.size);if(e)throw new n("graphics3dtextsymbollayer:invalid-size",e)}this._createTextRenderParameters()}_createTextRenderParameters(){const e=this._context.layerView.view.pixelRatio;this._textRenderParameters=_.fromSymbol(this.symbolLayer,e)}destroy(){super.destroy(),this._geometryDataPool.destroy()}createGraphics3DGraphic(e){const r=e.graphic,n=v(r.geometry);if(t(n))return this.logger.warn(`unsupported geometry type for text symbol: ${r.geometry.type}`),null;const o=this.symbolLayer.text;if(!o)return null;const s=i(this.symbol)&&this.symbol.hasVisibleVerticalOffset()?this.symbol:null;return this._createAs3DShape(r,n,o,s)}onRemoveGraphic(e){this._geometryDataPool.release(e.stageObject.geometries[0].data)}createLabel(e,r,n,o){const s=e.graphic,i=v(s.geometry);if(t(i))return this.logger.warn(`unsupported geometry type for label: ${s.geometry.type}`),null;const a=r.text;return!a||/^\s+$/.test(a)?null:this._createAs3DShape(s,i,a,r,r,n,o)}setGraphicElevationContext(e,t,r=0){const n=super.setGraphicElevationContext(e,t);return n.addOffsetRenderUnits(r),n}layerOpacityChanged(){return this.logger.warn("layer opacity change not yet implemented in Graphics3DTextSymbolLayer"),!1}layerElevationInfoChanged(e,t){return S(e,t,((e,t)=>{this.updateGraphicElevationContext(t,e)})),f.UPDATE}slicePlaneEnabledChanged(e,t){return S(e,t,(e=>{for(const t of e.stageObject.geometryRecords)t.material.setParameterValues({slicePlaneEnabled:this._context.slicePlaneEnabled})})),!0}physicalBasedRenderingChanged(){return!0}pixelRatioChanged(){return!1}updateGraphicElevationContext(e,t){this.setGraphicElevationContext(e,t.elevationContext,t.metadata.elevationOffset),t.needsElevationUpdates=p(t.elevationContext.mode)||"absolute-height"===t.elevationContext.mode}_defaultElevationInfoNoZ(){return D}_createAs3DShape(n,o,i,l,c=G,m,f){const b=this.setGraphicElevationContext(n,new g,c.elevationOffset),v=this._context.layer.id+"_label_"+n.uid,_="polyline"===r(n.geometry,"type"),w=n.uid,E=this._context.stage.renderView.renderingContext,S=c.anchor in h?c.anchor:"center",D=h[S],C=t(f)?new j(E,i,this._textRenderParameters,v):null,L={occlusionTest:!0,screenOffset:c.screenOffset,anchorPos:D,polygonOffset:!0,color:[1,1,1,1],centerOffsetUnits:c.centerOffsetUnits,debugDrawBorder:c.debugDrawBorder,drawInSecondSlot:!0};if(e(C)&&(L.textureId=C.id,L.texCoordScale=C.texcoordScale),e(f)&&(L.textureId=f.textureId),e(l)&&e(l.verticalOffset)){const{screenLength:e,minWorldLength:t,maxWorldLength:r}=l.verticalOffset;L.verticalOffset={screenLength:s(e),minWorldLength:t||0,maxWorldLength:null!=r?r:1/0}}if(this._context.screenSizePerspectiveEnabled){const{screenSizePerspectiveSettings:e,screenSizePerspectiveSettingsLabels:t}=this._context.sharedResources;L.screenSizePerspective=t.overridePadding(this._textRenderParameters.haloSize),L.screenSizePerspectiveAlignment=e}_&&(L.shaderPolygonOffset=1e-4),L.slicePlaneEnabled=this._context.slicePlaneEnabled;let U=null;if(e(m)){const e=JSON.stringify(L);U=m.getMaterial(e),null==U&&(U=new d(L,v),m.addMaterial(e,U))}else U=new d(L,v);const R=[U],z=this._geometryDataPool.acquire(c,C),T=[new x(z,v)],A=this._context.layer.uid,W=O(this._context,o,T,R,null,null,b,v,A,w);if(null===W)return null;const I=u,V=new y(this,W.object,T,t(m)?R:null,e(C)?[C]:null,I,b);V.alignedSampledElevation=W.sampledElevation,V.needsElevationUpdates=p(b.mode)||"absolute-height"===b.mode;const{displayWidth:B,displayHeight:H}=e(C)?C:c;V.getScreenSize=(e=a())=>(e[0]=B,e[1]=H,e);const M={labelText:i,elevationOffset:c.elevationOffset};return V.metadata=M,P(V,o,this._context.elevationProvider),V}}function S(t,r,n){t&&t.forEach((t=>{const o=r(t);e(o)&&n(o,t.graphic)}))}const D={mode:"relative-to-ground",offset:0},G={text:null,translation:[0,0,0],elevationOffset:0,centerOffset:[0,0,0,1],screenOffset:[0,0],anchor:"center",verticalOffset:null,centerOffsetUnits:null,debugDrawBorder:!1,displayWidth:0,displayHeight:0};export default E;export{E as Graphics3DTextSymbolLayer};

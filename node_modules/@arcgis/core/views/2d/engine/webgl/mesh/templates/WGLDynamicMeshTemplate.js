/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import e from"../../../../../../core/Logger.js";import{reject as t,resolve as a}from"../../../../../../core/promiseUtils.js";import{analyzeCIMResource as i}from"../../../../../../symbols/cim/cimAnalyzer.js";import s from"./WGLMeshTemplate.js";const r=e.getLogger("esri.views.2d.engine.webgl.WGLDynamicMeshTemplate");export default class extends s{constructor(e){super(),this._ongoingMaterialRequestMap=new Map,this._materialCache=new Map,this._dynamicPropertyMap=new Map,this._cimLayer=e}analyze(e,s,o,n){const m=s.readLegacyFeature(),c=this._materialCache,l=this._cimLayer.materialHash;if(!l)return r.error("A Dynamic mesh template must have a material hash value or function!"),t(null);const h="function"==typeof l?l(m,o,n):l;if(c.has(h)){const e=c.get(h);return a(e)}if(this._ongoingMaterialRequestMap.has(h))return this._ongoingMaterialRequestMap.get(h);const g=i(this._cimLayer.cim,this._cimLayer.materialOverrides);g.mosaicHash=h;const p=e.getMosaicItem(g).then((e=>(this._ongoingMaterialRequestMap.delete(h),c.set(h,e),e))).catch((e=>(this._ongoingMaterialRequestMap.delete(h),r.error(".analyze()",e.message),null)));return this._ongoingMaterialRequestMap.set(h,p),p}}

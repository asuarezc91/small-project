/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import e from"../../../../../core/Logger.js";import i from"../../../../../core/Error.js";import{clamp as t,sign as s}from"../../../../../core/mathUtils.js";import{FILTER_FLAG_0 as o,EFFECT_FLAG_0 as r,TILE_SIZE as n,COLLISION_BUCKET_SIZE as l}from"../definitions.js";import c from"./CollisionBucket.js";import a from"./LayerCollisionInfo.js";const h=n/l,f=h,m=e.getLogger("esri.views.2d.engine.webgl.collisions.CollisionEngine");class u{constructor(e){this._layers=new Map,this._collisionBuckets=new Map,this._didError=!1,this._tilingScheme=e}get collisionInfos(){return Array.from(this._layers.values())}registerLayerView(e,i){if(this._layers.has(e))return;const t=a.create(e,i,this.collisionInfos,this._tilingScheme);this._layers.set(e,t),this._collisionBuckets.forEach((e=>e.onRegisterLayer(t.index)))}unregisterLayerView(e){if(!this._layers.has(e))return;const i=this._layers.get(e);a.delete(i.index,this.collisionInfos),this._layers.delete(e),this._collisionBuckets.forEach(((e,t)=>{const s=e.getTile(i.index);s&&(e.onUnregisterLayer(i.index),e.canDelete()&&this._collisionBuckets.delete(t),s.reference&&(s.reference.isDirty=!1))}))}addTile(e,i){const t=i.key.id;if(!this._layers.has(e))return;this._collisionBuckets.has(t)||this._collisionBuckets.set(t,new c(i.key,this._layers.size));const s=this._getIndex(e);this._collisionBuckets.get(t).getTile(s).reference=i}removeTile(e,i){if(!this._layers.has(e)||!this._collisionBuckets.has(i))return;const t=this._getIndex(e),s=this._collisionBuckets.get(i).getTile(t);s.dirty=!1,s.reference=null}run(e,t){const s=Array.from(this._collisionBuckets.values()).sort(((e,i)=>e.key.compareRowMajor(i.key)));let o=!0;const r=e.renderingOptions.labelCollisionsEnabled&&!this._didError,n=this.collisionInfos;try{for(const i of s){o=o||i.isDirty,i.computeNeighbors(this._collisionBuckets);for(let t=0;t<this._layers.size;t++){const s=a.find(t,n);i.reset(e,o,s)}}for(let e=0;e<this._layers.size;e++){const i=a.find(e,n);for(const e of s)this._run(r,e,i,t)}}catch(e){m.error(new i("mapview-labeling","Encountered an error during decluttering. Disabling collisions",e)),this._didError=!0}for(const e of s)e.ready()}_run(e,i,t,s){const o=i.getReference(t.index);o&&o.hasData&&(o.key.level!==s?this._resetLabelsMinZoom(i,t):this._runVisibility(e,i,o,t,s))}_resetLabelsMinZoom(e,i){if(!e||"polyline"===i.geometryType)return;const t=e.getReference(i.index);if(!t||!t.hasData)return;const s=i.layerView.tileRenderer.featuresView.attributeView,o=t.displayObjects;for(const e of o)s.setLabelMinZoom(e.id,255)}_checkLabelsVisible(e,i){const t=!i.filter||!!(e&o),s=!i.effect||i.effect.excludedLabelsVisible||!!(e&r);return t&&s}_runVisibility(e,i,t,s,o){const r=s.layerView.tileRenderer.featuresView.attributeView,n=t.displayObjects.sort(((e,i)=>r.getLabelMinZoom(e.id)-r.getLabelMinZoom(i.id))),l=s.zoomRanges.some((e=>"none"===e.deconflictionStrategy));for(const t of n){if(!t.metrics.length)continue;let n="polyline"===s.geometryType?0:10*(o-1);const c=r.getFilterFlags(t.id),a=this._checkLabelsVisible(c,s.layerView);if(e&&!l)for(let e=0;e<t.metrics.length;e++){const r=t.metrics[e],l=a?-1!==r.minZoom?r.minZoom:this._computeLabelVisibility(t,r,s.index,i,r.baseZoom,o):255;n=Math.max(l,n)}n=Math.max(n,0),r.setLabelMinZoom(t.id,n);for(const e of t.metrics)e.minZoom=n}}_computeLabelVisibility(e,i,t,s,o,r){let n=o;const{xBucket:l,yBucket:c,xOverflow:a,yOverflow:m}=i,u=l-a,g=l+a+1,d=c+m+1;for(let o=c-m;o<d;o++)for(let l=u;l<g;l++)if(!(l<-h||o<-f||l>h||o>f))for(let c=0;c<=t;c++){const a=this._getRelativeSubBucket(c,s,l,o);if(a)for(const s of a){if(c===t&&s.id===e.id)continue;const o=this._compareLabels(i,s,n,r);n=Math.max(o,n)}}return n}_compareLabels(e,i,s,o){const r=10*(o+1);if(-1===i.minZoom||i.minZoom>r)return s;const n=e.findCollisionDelta(i),l=t(Math.ceil(10*(n+o)),0,255);return i.minZoom>=l?s:Math.max(s,l)}_getNeighboringTile(e,i,t,s){const o=3*(1+s)+(1+t),r=i.neighbors[o];return r&&r.getTile(e)}_getRelativeSubBucket(e,i,t,o){const r=s(Math.floor(t/4)),n=s(Math.floor(o/4)),l=this._getNeighboringTile(e,i,r,n);return l&&l.reference&&l.index&&l.reference.hasData?l.index[o-4*n][t-4*r]:null}_getIndex(e){return this._layers.get(e).index}}export{u as CollisionEngine};

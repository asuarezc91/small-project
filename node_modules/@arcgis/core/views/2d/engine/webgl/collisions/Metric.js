/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import t from"../../../../../core/Logger.js";import{COLLISION_BUCKET_SIZE as s,COLLISION_MAX_ZOOM_DELTA as i,TILE_SIZE as e}from"../definitions.js";import{f as o}from"../../../../../chunks/vec2f32.js";import h from"./BoundingBox.js";import{serializeList as n,deserializeList as r}from"../util/serializationUtils.js";const a=t.getLogger("esri/views/2d/engine/webgl/collisions/Metric");class d{constructor(t,s,i,e,h){this.id=t,this.range=s,this.boxes=null,this.minZoom=-1,this.size=0,this.directionX=0,this.directionY=0,this.offsetX=0,this.offsetY=0,this.placementPadding=0,this.anchor=o(i,e),this.baseZoom=h}add(t,s,i){t.x=t.x+s,t.y=t.y+i,this.bounds?this.boxes?(this.boxes.push(t),this.bounds.extend(t)):(this.boxes=[this.bounds,t],this.bounds=this.bounds.clone(),this.bounds.extend(t)):this.bounds=t}computeIndex(){const t=this.anchor[0],i=this.anchor[1],o=Math.floor(t/s),h=Math.floor(i/s);this.xBucket=o,this.yBucket=h;const n=e/s;if(this.hasVV)return this.xOverflow=n,void(this.yOverflow=n);this.xOverflow=Math.min(n,Math.ceil(2*this.bounds.width/s)),this.yOverflow=Math.min(n,Math.ceil(2*this.bounds.height/s))}findCollisionDelta(t){const s=this.bounds.findCollisionDelta(t.bounds),e=this.boxes&&this.boxes.length,o=t.boxes&&t.boxes.length;return Math.abs(s)>i||!e&&!o?s:e&&o?this._boxesToBoxes(t):e?this._boxesToBox(t):this._boxToBoxes(t)}computeVVOffset(t,s){s||a.error("mapview-labeling",`Unable to compute label offset. Expected an evaluator function but found ${s}`);let i=this.size;if(this.hasVV){const e=s(t);i=isNaN(e)||null==e||e===1/0?this.size:e}this._computeOffset(i)}setPlacementOffset(t,s,i,e,o){this.hasVV=t,this.size=s,this.placementPadding=Math.round(i),this.directionX=e,this.directionY=o}clone(){const t=new d(this.id,this.range,this.anchor[0],this.anchor[1],this.baseZoom);return t.minZoom=this.minZoom,this.bounds&&(t.bounds=this.bounds.clone()),this.boxes&&(t.boxes=this.boxes.map((t=>t.clone()))),t.xBucket=this.xBucket,t.yBucket=this.yBucket,t.xOverflow=this.xOverflow,t.yOverflow=this.yOverflow,t.hasVV=this.hasVV,t.size=this.size,t.directionX=this.directionX,t.directionY=this.directionY,t.offsetX=this.offsetX,t.offsetY=this.offsetY,t}_boxToBoxes(t){let s=-1/0;for(const i of t.boxes){const t=this.bounds.findCollisionDelta(i);s=Math.max(t,s)}return s}_boxesToBox(t){let s=this.boxes[0].findCollisionDelta(t.bounds);for(let i=1;i<this.boxes.length;i++){const e=this.boxes[i].findCollisionDelta(t.bounds);s=Math.max(e,s)}return s}_boxesToBoxes(t){let s=-1/0;for(let i=0;i<this.boxes.length;i++){const e=this.boxes[i];for(const i of t.boxes){const t=e.findCollisionDelta(i);s=Math.max(t,s)}}return s}_computeOffset(t){this.offsetX=this.directionX*(t/2+this.placementPadding),this.offsetY=this.directionY*(t/2+this.placementPadding)}serialize(t){return t.push(this.id),this.bounds.serialize(t),t.push(this.range.from),t.push(this.range.count),t.push(this.anchor[0]),t.push(this.anchor[1]),t.push(this.baseZoom),t.push(this.hasVV?1:0),t.push(this.size),t.writeF32(this.directionX),t.writeF32(this.directionY),t.push(this.offsetX),t.push(this.offsetY),t.push(this.placementPadding),n(t,this.boxes),t}static deserialize(t){const s=t.readInt32(),i=h.deserialize(t),e={from:t.readInt32(),count:t.readInt32()},o=t.readInt32(),n=t.readInt32(),a=t.readInt32(),f=t.readInt32(),l=t.readInt32(),c=t.readF32(),u=t.readF32(),b=t.readInt32(),x=t.readInt32(),m=t.readInt32(),p=r(t,h),g=new d(s,e,o,n,a);return g.bounds=i,g.boxes=p,g.setPlacementOffset(!!f,l,m,c,u),g.offsetX=b,g.offsetY=x,g.computeIndex(),f||g._computeOffset(l),g}}export default d;

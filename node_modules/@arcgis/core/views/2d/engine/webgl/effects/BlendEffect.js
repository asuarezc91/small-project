/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import"../../../../../core/has.js";import{isSome as e}from"../../../../../core/maybe.js";import r from"../../../../../core/Logger.js";import t from"../../../../../core/Error.js";import"../../../../../chunks/builtins.js";import i from"../../../../webgl/Texture.js";import"../../../../webgl/FramebufferObject.js";import s from"../../../../webgl/ProgramCache.js";import"../../../../webgl/RenderingContext.js";import{WGLDrawPhase as o}from"../enums.js";import n from"../VertexStream.js";import{blend as a}from"../shaders/BlendPrograms.js";const d=r.getLogger("esri.views.2d.engine.webgl.effects.blendEffects.BlendEffect");class u{constructor(){this._size=[0,0]}dispose(e){this._backBufferTexture&&(this._backBufferTexture.dispose(),this._backBufferTexture=null),this._programCache&&(this._programCache.dispose(),this._programCache=null),this._quad&&(this._quad.dispose(),this._quad=null)}draw(e,r,i,s,n){const{context:u,drawPhase:c}=e;if(this._setupShader(u),s&&"normal"!==s&&c!==o.LABEL)return void this._drawBlended(e,r,i,s,n);const m=this._programCache.getProgram(a,"normal");if(!m)return void d.error(new t("mapview-BlendEffect",'Error creating shader program for blend mode "normal"'));u.bindProgram(m),r.setSamplingMode(i),u.bindTexture(r,0),m.setUniform1i("u_layerTexture",0),m.setUniform1f("u_opacity",n),u.setBlendingEnabled(!0),u.setBlendFunction(1,771);const f=this._quad;f.draw(),f.unbind()}_drawBlended(r,i,s,o,n){const{context:u,state:c,pixelRatio:m,inFadeTransition:f}=r,{size:h}=c,l=u.getBoundFramebufferObject();let p,g;if(e(l)){const e=l.descriptor;p=e.width,g=e.height}else p=Math.round(m*h[0]),g=Math.round(m*h[1]);this._createOrResizeTexture(r,p,g);const _=this._backBufferTexture;l.copyToTexture(0,0,p,g,0,0,_),u.setStencilTestEnabled(!1),u.setStencilWriteMask(0),u.setBlendingEnabled(!0),u.setDepthTestEnabled(!1),u.setDepthWriteEnabled(!1);const b=this._programCache.getProgram(a,o);if(!b)return void d.error(new t("mapview-BlendEffect",`Error creating shader program for blend mode ${o}`));u.bindProgram(b),_.setSamplingMode(s),u.bindTexture(_,0),b.setUniform1i("u_backbufferTexture",0),i.setSamplingMode(s),u.bindTexture(i,1),b.setUniform1i("u_layerTexture",1),b.setUniform1f("u_opacity",n),b.setUniform1f("u_inFadeOpacity",f?1:0),u.setBlendFunction(1,0);const x=this._quad;x.draw(),x.unbind(),u.setBlendFunction(1,771)}_setupShader(e){this._programCache||(this._programCache=new s(e),this._quad||(this._quad=new n(e,[-1,-1,1,-1,-1,1,1,1])))}_createOrResizeTexture(e,r,t){const{context:s}=e;null!==this._backBufferTexture&&r===this._size[0]&&t===this._size[1]||(this._backBufferTexture?this._backBufferTexture.resize(r,t):this._backBufferTexture=new i(s,{target:3553,pixelFormat:6408,internalFormat:6408,dataType:5121,wrapMode:33071,samplingMode:9729,flipped:!1,width:r,height:t}),this._size[0]=r,this._size[1]=t)}}export{u as BlendEffect};

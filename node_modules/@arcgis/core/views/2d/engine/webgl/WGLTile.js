/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import"../../../../core/has.js";import{isSome as t}from"../../../../core/maybe.js";import e from"../../../../core/CircularArray.js";import{t as s}from"../../../../chunks/vec2.js";import{TILE_SIZE as i,COLLISION_BUCKET_SIZE as a}from"./definitions.js";import{i as r,t as l,m as d}from"../../../../chunks/mat2d.js";import{c as h}from"../../../../chunks/mat2df32.js";import{c as o}from"../../../../chunks/vec2f32.js";import{TiledDisplayObject as p}from"./TiledDisplayObject.js";import{WGLGeometryType as c}from"./enums.js";import n from"./DirtyMap.js";import y from"./DisplayRecordStore.js";import f from"./Fader.js";import u from"./WGLBuffers.js";const _=new Set;class m extends p{constructor(t,s,a=!1){super(t,s,[i,i]),this._data=null,this._displayList=null,this._wglBuffers=null,this._deferPatches=!1,this._dirtyMap=new n,this._labelIndex=null,this._lastCommitTime=0,this._patchQueue=new e(100),this.fader=new f,this._dirty=!0,this._replaceBuffers=!1,this._uploadsLocked=!1,this._hasData=!1,this._invalidated=!1,this.transforms.labelMat2d=h(),this._ensureCorrectZOrder=a,this._deferPatches=!a}destroy(){super.destroy(),this.clear()}get displayObjects(){var t;return null!=(t=this._displayObjects)?t:[]}get isDirty(){return this._dirty}get hasData(){return!!this._hasData}get labelIndex(){return this._labelIndex}set isDirty(t){this._dirty=t,this.requestRender()}getGeometry(t){return this._wglBuffers&&this._wglBuffers.has(t)?this._wglBuffers.get(t):null}getDisplayList(){return this._displayList}setTransform(t,e){super.setTransform(t,e);const i=this.transforms.labelMat2d,a=t.getScreenTransform(i,e),h=o();s(h,this.coords,a),r(i),l(i,i,h),d(i,t.viewMat2d,i)}setData(t){const e=t.addOrUpdate,s=t.remove;t.clear&&(this.clear(),this._patchQueue.clear(),this._hasData=!1),"replace"===t.type&&(this._replaceBuffers=!0,this._patchQueue.clear(),this._data=null),!this._data&&e&&e.tileDisplayData.displayObjects.length?(e.tileDisplayData.computeDisplayList(this._ensureCorrectZOrder),this._dirtyMap=new n,this._dispRecStore=y.fromTileData(e,this._dirtyMap),this._data=e,this._dirtyMap.markAllDirty(),this._hasData=!0,t.end&&this.ready()):this._data&&(e&&e.tileDisplayData.displayObjects.length||s.length)?this._deferPatches?this._patchQueue.enqueue(t):this._doPatchData(t):t.end&&this.ready(),t.end&&!this._data&&this.clear(),this.requestRender(),this.emit("change")}lockUploads(){this._uploadsLocked=!0}unlockUploads(){this._uploadsLocked=!1,this.requestRender()}commitChanges(e){if(!e.time||e.time!==this._lastCommitTime){if(this._lastCommitTime=e.time,this.fader.step()||this.requestRender(),this._patchQueue.size){const e=this._patchQueue.dequeue();t(e)&&(e.end&&this.ready(),this._doPatchData(e),this.requestRender(),this._hasData=!0)}if(this._uploadsLocked)this.requestRender();else if(this.visible&&this._data){if(this._replaceBuffers)for(this._wglBuffers&&this._wglBuffers.dispose(),this._wglBuffers=null,this._replaceBuffers=!1;this._patchQueue.size;){const e=this._patchQueue.dequeue();t(e)&&(e.end&&this.ready(),this._doPatchData(e),this._hasData=!0)}this._wglBuffers||(this._wglBuffers=new u(e.context)),(this._dirtyMap.hasDirty()||this._invalidated)&&(this._invalidated=!1,this._wglBuffers.upload(this._data.tileBufferData,this._dirtyMap),this._displayList=this._data.tileDisplayData.displayList.clone(),this._displayObjects=this._data.tileDisplayData.displayObjects.slice(),this._rebuildLabelIndex(),this._dirtyMap.markAllClean())}}}clear(){this._data=null,this._displayList=null,this._dispRecStore=null,this._wglBuffers&&(this._wglBuffers.dispose(),this._wglBuffers=null)}_doPatchData(t){try{if("new"===t.type){if(!t.addOrUpdate)return;this._invalidated=!0;const e=this._bulkAddFeatures(t);e&&(this._dirtyMap.markAllDirty(),this._data.reshuffleBulkAdd(t,e.objectIndex,e.recordIndex),this._dispRecStore=y.fromTileData(this._data,this._dirtyMap))}else this._invalidated=!0,this._patchData(t)||(this._dirtyMap.markAllDirty(),this._data.reshuffle(),this._dispRecStore=y.fromTileData(this._data,this._dirtyMap))}catch(t){}this.requestRender()}_rebuildLabelIndex(){var t,e;if(!(null==(t=this._data)||null==(e=t.tileBufferData.geometries[c.LABEL])||!e.indexBuffer.length)){this.isDirty=!0,this._labelIndex=this._initLabelIndex();for(const t of this.displayObjects)for(const e of t.metrics)this._insertIntoLabelIndex(e)}}_insertIntoLabelIndex(t){if(t.xBucket<0||t.yBucket<0||t.yBucket>3||t.xBucket>3)return;this.labelIndex[t.yBucket][t.xBucket].push(t)}_initLabelIndex(){const t=[];for(let e=0;e<i/a;e++){t.push([]);for(let s=0;s<i/a;s++)t[e].push([])}return t}_bulkAddFeatures(t){const e=t.addOrUpdate.tileDisplayData.displayObjects,s=this._data.tileDisplayData.displayObjects,i=this._data.tileDisplayData.displayObjectRegistry;for(let a=0;a<e.length;a++){const r=e[a],l=i.get(r.id);for(let e=0;e<r.displayRecords.length;++e){const s=r.displayRecords[e];if(l){if(s.geometryType!==c.FILL&&s.geometryType!==c.LINE)continue;l.displayRecords.push(s)}const i=t.addOrUpdate.tileBufferData.geometries[s.geometryType];if(!this._dispRecStore.tryAddMeshData(s,i))return{objectIndex:a,recordIndex:e}}l||(i.set(r.id,r),s.push(r))}return null}_patchData(t){let e=!0;const s=t.addOrUpdate&&t.addOrUpdate.tileDisplayData&&t.addOrUpdate.tileDisplayData.displayObjects||[],i=(t.remove||[]).slice();for(const t of s)null!=t.insertAfter&&i.push(t.id);for(const t of i){const e=this._data.tileDisplayData.displayObjectRegistry.get(t);if(e){this._data.tileDisplayData.displayList.removeFromList(e.displayRecords);for(const t of e.displayRecords)this._dispRecStore.delete(t);this._data.tileDisplayData.displayObjectRegistry.delete(t);const s=this._data.tileDisplayData.displayObjects.indexOf(e);this._data.tileDisplayData.displayObjects.splice(s,1)}}for(const i of s){let s,a=this._data.tileDisplayData.displayObjectRegistry.get(i.id);if(a){const t=a.displayRecords;a.set(i),a.displayRecords=t;const e=a.displayRecords.length;for(let t=0;t<e;++t){const e=a.displayRecords[t],s=i.displayRecords[t];(t>=i.displayRecords.length||e.geometryType!==s.geometryType||e.symbolLevel!==s.symbolLevel||e.zOrder!==s.zOrder||e.materialKey!==s.materialKey)&&(this._dispRecStore.delete(a.displayRecords[t]),t<i.displayRecords.length&&(a.displayRecords[t]=void 0))}a.displayRecords.length=i.displayRecords.length,a.metrics=i.metrics}else{let t;a=i.copy(),a.displayRecords=[],this._data.tileDisplayData.displayObjectRegistry.set(i.id,a);const e=this._data.tileDisplayData.displayObjects;if(null!=a.insertAfter)if(s={},a.insertAfter>=0){const s=this._data.tileDisplayData.displayObjectRegistry.get(a.insertAfter);s?(t=e.indexOf(s)+1,t<e.length?e.splice(t,0,a):(e.push(a),t=e.length)):(e.push(a),t=e.length)}else e.unshift(a),t=0;else e.push(a),t=e.length;if(s){let a;if(this._data.tileDisplayData.displayList.unified)a=i.displayRecords.length>0?1:0;else{_.clear();for(const t of i.displayRecords){const e=this._data.tileDisplayData.displayList.getDPInfoType(t.geometryType);_.add(e)}a=_.size}let r=0;for(let i=t-1;i>=0&&r<a;--i)for(let t=e[i].displayRecords.length-1;t>=0&&r<a;--t){const a=e[i].displayRecords[t],l=this._data.tileDisplayData.displayList.getDPInfoType(a.geometryType);s[l]||(s[l]=a,++r)}}}const r=i.displayRecords.length;for(let l=0;l<r;++l){const r=i.displayRecords[l];let d=a.displayRecords[l];d?(d.meshData=r.meshData,d.materialKey=r.materialKey):(d=r.copy(),d.vertexFrom=void 0,d.indexFrom=void 0,a.displayRecords[l]=d);const h=r.geometryType,o=this._data.tileDisplayData.displayList.getDPInfoType(h),p=t.addOrUpdate.tileBufferData.geometries[h],c=p.vertexBuffer,n=p.indexBuffer;let y;s&&(y=s[o]?this._data.tileDisplayData.displayList.splitAfter(s[o]):-1),e=this._dispRecStore.setMeshData(d,r,c,n,y)&&e,s&&null!=d.indexFrom&&null!=d.indexFrom&&(s[o]=d)}}return e}}export{m as WGLTile};

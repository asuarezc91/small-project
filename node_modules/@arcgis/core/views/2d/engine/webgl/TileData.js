/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{WGLGeometryType as e}from"./enums.js";import{allocateTypedArrayBuffer as t,copyMeshData as r}from"./Utils.js";import i from"./MemoryRequirements.js";import s from"./TileBufferData.js";import a from"./WGLDisplayRecord.js";import o,{groupRecordsByGeometryType as n}from"./TileDisplayData.js";import f from"./util/Writer.js";import{MeshData as l}from"./mesh/MeshData.js";import{VertexBuffers as d}from"./mesh/VertexBuffer.js";const u=new i,c=new i;function p(e,r){const i={};for(const s in e){const a={data:t(r,e[s]),stride:e[s]};i[s]=a}return i}class m{constructor(){this.tileDisplayData=null,this.tileBufferData=null}reshuffle(){u.reset();const e=n(this.tileDisplayData.displayObjects);for(const t of e)for(const e of t)e&&u.needMore(e.geometryType,e.meshData?e.meshData.vertexCount:e.vertexCount,e.meshData?e.meshData.indexData.length:e.indexCount);const i=e.length,a=new s;for(let e=0;e<i;++e){a.geometries[e].indexBuffer=new Uint32Array(Math.round(1.5*u.indicesFor(e)));const r=[];for(const t in this.tileBufferData.geometries[e].vertexBuffer)r.push(this.tileBufferData.geometries[e].vertexBuffer[t].stride);const i=m._computeVertexAlignment(r),s=Math.round(1.5*u.verticesFor(e)),o=m._align(s,i);for(const r in this.tileBufferData.geometries[e].vertexBuffer){const i=this.tileBufferData.geometries[e].vertexBuffer[r].stride;a.geometries[e].vertexBuffer[r]={stride:i,data:t(o,i)}}}c.reset(),this.tileDisplayData.displayList.clear();for(let t=0;t<i;++t){const i=e[t];for(const e of i){if(e.meshData)e.writeMeshDataToBuffers(c.verticesFor(t),a.geometries[t].vertexBuffer,c.indicesFor(t),a.geometries[t].indexBuffer),e.meshData=null;else{const i=this.tileBufferData.geometries[t].vertexBuffer,s=this.tileBufferData.geometries[t].indexBuffer,o=a.geometries[t].vertexBuffer,n=a.geometries[t].indexBuffer,f=c.verticesFor(t),l=c.indicesFor(t);r(f,l,o,n,e,i,s),e.vertexFrom=f,e.indexFrom=l}c.needMore(t,e.vertexCount,e.indexCount)}this.tileDisplayData.displayList.unified||this.tileDisplayData.displayList.addToList(i)}if(this.tileDisplayData.displayList.unified)for(const e of this.tileDisplayData.displayObjects)this.tileDisplayData.displayList.addToList(e.displayRecords);this.tileBufferData=a}reshuffleBulkAdd(i,a,o){const n=i.addOrUpdate.tileDisplayData.displayObjects,f=this.tileDisplayData.displayObjects;u.reset();for(let e=0;e<f.length;e++){const t=f[e];for(let e=0;e<t.displayRecords.length;e++){const r=t.displayRecords[e];u.needMore(r.geometryType,r.vertexCount,r.indexCount)}}for(let e=a;e<n.length;e++){const t=n[e];for(let r=e===a?o:0;r<t.displayRecords.length;r++){const e=t.displayRecords[r];u.needMore(e.geometryType,e.vertexCount,e.indexCount)}}const l=new s;for(let e=0;e<5;e++){l.geometries[e].indexBuffer=new Uint32Array(Math.round(1.5*u.indicesFor(e)));const r=[],i=this.tileBufferData.geometries[e].vertexBuffer;for(const e in i)r.push(i[e].stride);const s=m._computeVertexAlignment(r),a=Math.round(1.5*u.verticesFor(e)),o=m._align(a,s);for(const r in i){const s=i[r].stride,a=t(o,s);l.geometries[e].vertexBuffer[r]={stride:s,data:a}}}c.reset(),this.tileDisplayData.displayList.clear();for(let e=0;e<f.length;e++){const t=f[e];for(let e=0;e<t.displayRecords.length;e++){const i=t.displayRecords[e],s=i.geometryType,a=this.tileBufferData.geometries[s].vertexBuffer,o=this.tileBufferData.geometries[s].indexBuffer,n=l.geometries[s].vertexBuffer,f=l.geometries[s].indexBuffer,d=c.verticesFor(s),u=c.indicesFor(s);r(d,u,n,f,i,a,o),i.vertexFrom=d,i.indexFrom=u,c.needMore(s,i.vertexCount,i.indexCount),this.tileDisplayData.displayList.addToList(i)}}const d=this.tileDisplayData.displayObjectRegistry;if(0!==o){const t=n[a];for(let i=0;i<o;i++){const s=t.displayRecords[i];if(d.get(t.id)){if(s.geometryType!==e.FILL&&s.geometryType!==e.LINE)continue}const a=s.geometryType,o=this.tileBufferData.geometries[a].vertexBuffer,n=this.tileBufferData.geometries[a].indexBuffer,f=l.geometries[a].vertexBuffer,u=l.geometries[a].indexBuffer,p=c.verticesFor(a),m=c.indicesFor(a);r(p,m,f,u,s,o,n),s.vertexFrom=p,s.indexFrom=m,c.needMore(a,s.vertexCount,s.indexCount),this.tileDisplayData.displayList.addToList(s)}}for(let t=a;t<n.length;t++){const s=n[t],f=t===a?o:0,u=d.get(s.id);for(let t=f;t<s.displayRecords.length;t++){const a=s.displayRecords[t];if(u){if(a.geometryType!==e.FILL&&a.geometryType!==e.LINE)continue;u.displayRecords.push(a)}const o=a.geometryType,n=i.addOrUpdate.tileBufferData.geometries[o],f=n.vertexBuffer,d=n.indexBuffer,p=l.geometries[o].vertexBuffer,m=l.geometries[o].indexBuffer,D=c.verticesFor(o),y=c.indicesFor(o);r(D,y,p,m,a,f,d),a.vertexFrom=D,a.indexFrom=y,c.needMore(o,a.vertexCount,a.indexCount),this.tileDisplayData.displayList.addToList(a)}u||(d.set(s.id,s),this.tileDisplayData.displayObjects.push(s))}this.tileBufferData=l}getStrides(){const e=[];for(let t=0;t<this.tileBufferData.geometries.length;++t){const r=this.tileBufferData.geometries[t];e[t]={};for(const i in r.vertexBuffer)e[t][i]=r.vertexBuffer[i].stride}return e}clone(){const e=new m;return e.tileBufferData=this.tileBufferData.clone(),e.tileDisplayData=this.tileDisplayData.clone(),e}_guessSize(){const{displayObjects:e}=this.tileDisplayData,t=Math.min(e.length,4);let r=0;for(let i=0;i<t;i++)r=Math.max(r,e[i].displayRecords.length);return 2*(12*e.length+e.length*r*40)}serialize(){const e=this.tileBufferData.serialize(),t=this.tileBufferData.getBuffers(),r=this.tileDisplayData.serialize(new f(Int32Array,this._guessSize())).buffer();return t.push(r),{result:{displayData:r,bufferData:e},transferList:t}}static decode(e){const t=l.deserializeDisplayObjects(e),r={};for(const t in e.vertexBuffersMap)r[t]=d.decode(e.vertexBuffersMap[t]);return m.fromMeshData({displayObjects:t,vertexBuffersMap:r})}static fromMeshData(e){const t=new m,r=new o,i=new s;r.displayObjects=e.displayObjects;for(const t in e.vertexBuffersMap){const r=e.vertexBuffersMap[t];i.geometries[t].indexBuffer=r.indexBuffer,i.geometries[t].vertexBuffer=r.namedBuffers}return t.tileDisplayData=r,t.tileBufferData=i,t}static bind(e,t){const r=new m;return r.tileDisplayData=e,r.tileBufferData=t,r}static create(e,t){const r=new m;r.tileDisplayData=new o,r.tileDisplayData.displayObjects=e;const i=[0,0,0,0,0],n=[0,0,0,0,0],f=[[],[],[],[],[]];for(const t of e)for(const e of t.displayRecords)f[e.geometryType].push(e),i[e.geometryType]+=e.meshData.vertexCount,n[e.geometryType]+=e.meshData.indexData.length;const l=new s,d=function(e){return[e.fill||{},e.line||{},e.icon||{},e.text||{},e.label||{}]}(t);for(let e=0;e<5;e++){const t=new Uint32Array(n[e]),r=p(d[e],i[e]);a.writeAllMeshDataToBuffers(f[e],r,t),l.geometries[e]={indexBuffer:t,vertexBuffer:r}}return r.tileBufferData=l,r}static _align(e,t){const r=e%t;return 0===r?e:e+(t-r)}static _computeVertexAlignment(e){let t=!1,r=!1;for(const i of e)i%4==2?t=!0:i%4!=0&&(r=!0);return r?4:t?2:1}}export{m as TileData};

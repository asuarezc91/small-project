/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import e from"../../../../core/Logger.js";import{WGLDrawPhase as t,WGLGeometryType as o}from"./enums.js";const n=e.getLogger("esri.views.2d.engine.webgl.WGLDisplayList");function i(e,t,o,...n){t<e.length?e.splice(t,o,...n):e.push(...n)}const r=new Map;r.set(t.MAP,[o.FILL,o.LINE,o.MARKER,o.TEXT]),r.set(t.LABEL,[o.LABEL]),r.set(t.LABEL_ALPHA,[o.LABEL]);class s{constructor(e=!1){this.symbolLevels=[],this.unified=e}replay(e,t,o){if(this.unified)for(const n of this.symbolLevels)for(const i of n.zLevels){const n=i.geometryDPInfo.unified;if(n)for(const i of n){const n=e.painter.getGeometryBrush(i.geometryType),r=t.getGeometry(i.geometryType);n.prepareState(e,t),n.drawGeometry(e,t,i,r,o)}}}get empty(){return!this.symbolLevels||0===this.symbolLevels.length}clear(){this.symbolLevels.length=0}addToList(e,t){if(Array.isArray(e))for(const o of e)this._addToList(o,t);else this._addToList(e,t)}removeFromList(e){Array.isArray(e)||(e=[e]);let t=null;for(const o of e)t=this._removeFromList(o);return t}byType(e,t){for(const o of this.symbolLevels)for(const n of o.zLevels){const o=n.geometryDPInfo,i=this.getDPInfoType(e);if(o[i])for(const e of o[i])t(e)}}clone(){const e=new s(this.unified);for(const t of this.symbolLevels)e.symbolLevels.push(t.clone());return e}splitAfter(e){const t=this._getDisplayList(e.symbolLevel,e.zOrder,e.geometryType),o=t.length,n=e.indexFrom+e.indexCount;for(let i=0;i<o;++i){const o=t[i];if(o.geometryType===e.geometryType&&n>o.indexFrom&&n<=o.indexFrom+o.indexCount){if(n<o.indexFrom+o.indexCount){const e=new l;e.geometryType=o.geometryType,e.materialKey=o.materialKey,e.indexFrom=n,e.indexCount=o.indexFrom+o.indexCount-n,t.splice(i+1,0,e),o.indexCount=n-o.indexFrom}return i}}}_addToList(e,t){const o=e.symbolLevel,n=e.zOrder,r=this._getDisplayList(o,n,e.geometryType),s=null!=t?t:r.length-1,m=s>=0&&s<r.length?r[s]:null;if(null===m||m.materialKey!==e.materialKey||m.indexFrom+m.indexCount!==e.indexFrom||this.unified&&m.geometryType!==e.geometryType){const t=new l;t.indexFrom=e.indexFrom,t.indexCount=e.indexCount,t.materialKey=e.materialKey,t.geometryType=e.geometryType,i(r,s+1,0,t)}else m.indexCount+=e.indexCount}_removeFromList(e){const t=e.symbolLevel,o=e.zOrder,n=this._getDisplayList(t,o,e.geometryType),r=n.length;let s;for(let t=0;t<r;++t){const o=n[t];if(e.indexFrom+e.indexCount>o.indexFrom&&e.indexFrom<o.indexFrom+o.indexCount&&(!this.unified||o.geometryType===e.geometryType)){s=t;break}}if(void 0!==s){const t=n[s];if(e.indexFrom===t.indexFrom)return t.indexCount-=e.indexCount,t.indexFrom+=e.indexCount,0===t.indexCount&&i(n,s,1),s-1;if(e.indexFrom+e.indexCount===t.indexFrom+t.indexCount)return t.indexCount-=e.indexCount,0===t.indexCount?(i(n,s,1),s-1):s;{const o=t.indexFrom,r=e.indexFrom-t.indexFrom,m=e.indexCount,y=t.indexFrom+t.indexCount-(e.indexFrom+e.indexCount);t.indexCount=r;const d=new l;return d.geometryType=t.geometryType,d.materialKey=t.materialKey,d.indexFrom=o+r+m,d.indexCount=y,i(n,s+1,0,d),s}}return null}_getDisplayList(e,t,n){let i;const r=this.symbolLevels.length;for(let t=0;t<r;t++)if(this.symbolLevels[t].symbolLevel===e){i=this.symbolLevels[t];break}let s;i||(i=new d,i.symbolLevel=e,this.symbolLevels.push(i));const l=i.zLevels.length;for(let e=0;e<l;e++)if(i.zLevels[e].zLevel===t){s=i.zLevels[e];break}let f;if(s||(s=new y,s.geometryDPInfo=new m,s.zLevel=t,i.zLevels.push(s)),this.unified)s.geometryDPInfo.unified||(s.geometryDPInfo.unified=[]),f=s.geometryDPInfo.unified;else switch(n){case o.FILL:s.geometryDPInfo.fill||(s.geometryDPInfo.fill=[]),f=s.geometryDPInfo.fill;break;case o.LINE:s.geometryDPInfo.line||(s.geometryDPInfo.line=[]),f=s.geometryDPInfo.line;break;case o.MARKER:s.geometryDPInfo.marker||(s.geometryDPInfo.marker=[]),f=s.geometryDPInfo.marker;break;case o.TEXT:s.geometryDPInfo.text||(s.geometryDPInfo.text=[]),f=s.geometryDPInfo.text;break;case o.LABEL:s.geometryDPInfo.label||(s.geometryDPInfo.label=[]),f=s.geometryDPInfo.label;break;default:console.error("Trying to add a record with geometry type '"+n+"'.")}return f}getDPInfoType(e){if(this.unified)return"unified";switch(e){case o.FILL:return"fill";case o.LINE:return"line";case o.MARKER:return"marker";case o.TEXT:return"text";case o.LABEL:return"label";default:return void n.error(`DisplayList: Tried to convert unknown geometryType: ${e}`)}}}class l{constructor(){this.materialKey=null,this.indexFrom=0,this.indexCount=0}clone(){const e=new l;return e.geometryType=this.geometryType,e.materialKey=this.materialKey,e.indexFrom=this.indexFrom,e.indexCount=this.indexCount,e}}class m{constructor(){this.fill=null,this.line=null,this.marker=null,this.text=null,this.label=null,this.unified=null}clone(){const e=new m;return e.fill=this.fill&&this.fill.map((e=>e.clone())),e.line=this.line&&this.line.map((e=>e.clone())),e.marker=this.marker&&this.marker.map((e=>e.clone())),e.text=this.text&&this.text.map((e=>e.clone())),e.label=this.label&&this.label.map((e=>e.clone())),e.unified=this.unified&&this.unified.map((e=>e.clone())),e}}class y{constructor(){this.geometryDPInfo=new m}clone(){const e=new y;return e.zLevel=this.zLevel,e.geometryDPInfo=this.geometryDPInfo.clone(),e}}class d{constructor(){this.zLevels=[]}clone(){const e=new d;e.symbolLevel=this.symbolLevel;for(const t of this.zLevels)e.zLevels.push(t.clone());return e}}export default s;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import"../../../../core/has.js";import{allocateTypedArrayBuffer as e,strideToPackingFactor as t,copyMeshData as r}from"./Utils.js";import{FreeList as i}from"./FreeList.js";const s=["FILL","LINE","MARKER","TEXT","LABEL"];class o{constructor(t,r,s,o){this._strides=t,this._displayList=r,this._freeListsAndStorage={},this._dirtyMap=null,this._dirtyMap=s;for(const r in t){this._freeListsAndStorage[r]={vtxFreeList:o?new i(o):null,idxFreeList:o?new i(o):null,vertexBuffers:{},indexBuffer:o?new Uint32Array(o):null};for(const i in t[r])this._freeListsAndStorage[r].vertexBuffers[i]={data:o?e(o,t[r][i]):null,stride:t[r][i]}}}static fromTileData(e,r){const n=function(e){const t=e.getStrides(),r={};for(let e=0;e<t.length;e++)r[s[e]]=t[e];return r}(e),d=[0,0,0,0,0],a=[0,0,0,0,0],x=e.tileDisplayData.displayObjects;for(const e of x)for(const t of e.displayRecords)d[t.geometryType]=Math.max(d[t.geometryType],t.vertexFrom+t.vertexCount),a[t.geometryType]=Math.max(a[t.geometryType],t.indexFrom+t.indexCount);const u=new o(n,e.tileDisplayData.displayList,r,null);for(let r=0;r<e.tileBufferData.geometries.length;++r){const o=d[r],n=a[r],x=e.tileBufferData.geometries[r],f=s[r],l=u._storageFor(f),c=e.tileBufferData.geometries[r].indexBuffer;let m;l.indexBuffer=c,l.idxFreeList=new i(c.length),l.idxFreeList.allocate(n);for(const i in x.vertexBuffer){const s=e.tileBufferData.geometries[r].vertexBuffer[i];l.vertexBuffers[i].data=s.data,l.vertexBuffers[i].stride=s.stride;const o=t(s.stride),n=s.data.length*o/s.stride;m||(m=n)}l.vtxFreeList=new i(m),l.vtxFreeList.allocate(o)}return u}delete(e){const t=s[e.geometryType];this._freeVertices(t,e.vertexFrom,e.vertexCount),this._freeIndices(t,e.indexFrom,e.indexCount),this._displayList.removeFromList(e),e.vertexFrom=void 0,e.indexFrom=void 0}setMeshData(e,t,i,o,n){const d=s[e.geometryType];let a,x;e.meshData=null,void 0===e.vertexFrom?(x=t.vertexCount,a=this._allocateVertices(d,x)):t.vertexCount>e.vertexCount?(this._freeVertices(d,e.vertexFrom,e.vertexCount),x=t.vertexCount,a=this._allocateVertices(d,x)):t.vertexCount===e.vertexCount?(a=e.vertexFrom,x=e.vertexCount):(this._freeVertices(d,e.vertexFrom+t.vertexCount,e.vertexCount-t.vertexCount),a=e.vertexFrom,x=t.vertexCount);let u,f,l,c=!0;if(void 0===e.indexFrom?(u=n,l=t.indexCount,f=this._allocateIndices(d,l)):t.indexCount>e.indexCount?(u=this._displayList.removeFromList(e),this._freeIndices(d,e.indexFrom,e.indexCount),l=t.indexCount,f=this._allocateIndices(d,l)):t.indexCount===e.indexCount?(c=!1,f=e.indexFrom,l=e.indexCount):(u=this._displayList.removeFromList(e),this._freeIndices(d,e.indexFrom+t.indexCount,e.indexCount-t.indexCount),f=e.indexFrom,l=t.indexCount),-1!==a&&-1!==f){const s=this._storageFor(d);if(r(a,f,s.vertexBuffers,s.indexBuffer,t,i,o),e.vertexFrom=a,e.indexFrom=f,e.vertexCount=t.vertexCount,e.indexCount=t.indexCount,this._dirtyMap){this._dirtyMap.markDirtyIndices(e.geometryType,e.indexFrom,e.indexCount);for(const t in i)this._dirtyMap.markDirtyVertices(e.geometryType,t,e.vertexFrom,e.vertexCount)}return c&&this._displayList.addToList(e,u),!0}return-1!==a&&this._freeVertices(d,a,x),-1!==f&&this._freeIndices(d,f,l),e.setMeshDataFromBuffers(t,i,o),e.vertexFrom=void 0,e.vertexCount=0,e.indexFrom=void 0,e.indexCount=0,!1}tryAddMeshData(e,t){const i=t.vertexBuffer,o=t.indexBuffer,n=s[e.geometryType],d=this._allocateVertices(n,e.vertexCount);if(-1===d)return this._freeVertices(n,d,e.vertexCount),!1;const a=this._allocateIndices(n,e.indexCount);if(-1===a)return this._freeVertices(n,d,e.vertexCount),this._freeIndices(n,a,e.indexCount),!1;const x=this._storageFor(n);if(r(d,a,x.vertexBuffers,x.indexBuffer,e,i,o),e.vertexFrom=d,e.indexFrom=a,this._dirtyMap){this._dirtyMap.markDirtyIndices(e.geometryType,e.indexFrom,e.indexCount);for(const t in i)this._dirtyMap.markDirtyVertices(e.geometryType,t,d,e.vertexCount)}return this._displayList.addToList(e),!0}_allocateVertices(e,t){const r=this._storageFor(e),i=r.vtxFreeList.allocate(t);if(-1===i)return-1;return r.vtxFreeList.fragmentation>.5?-1:i}_freeVertices(e,t,r){this._storageFor(e).vtxFreeList.free(t,r)}_freeIndices(e,t,r){this._storageFor(e).idxFreeList.free(t,r)}_allocateIndices(e,t){const r=this._storageFor(e),i=r.idxFreeList.allocate(t);if(-1===i)return-1;return r.idxFreeList.fragmentation>.5?-1:i}_storageFor(e){return this._freeListsAndStorage[e]}_stridesFor(e,t){return this._strides[e][t]}}export default o;

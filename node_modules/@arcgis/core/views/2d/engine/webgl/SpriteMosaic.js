/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import t from"../../../../core/has.js";import{isSome as e}from"../../../../core/maybe.js";import i from"../../../../core/Error.js";import{SPRITE_PADDING as s}from"./definitions.js";import"../../../../chunks/builtins.js";import a from"../../../webgl/Texture.js";import"../../../webgl/FramebufferObject.js";import"../../../webgl/RenderingContext.js";import r from"./Rect.js";import{log2 as o}from"./GeometryUtils.js";import h from"./RectangleBinPack.js";function c(t){return t&&"static"===t.type}class n{constructor(e,i,s,a=0){if(this._mosaicPages=[],this._maxItemSize=0,this._currentPage=0,this._fixSpriteLocationsTable=t("fix-sprite-locations"),this._testId=t("test-id"),this._pageWidth=0,this._pageHeight=0,this._mosaicRects=new Map,this._spriteCopyQueue=[],this.pixelRatio=1,(i<=0||s<=0)&&console.error("Sprites mosaic defaultWidth and defaultHeight must be greater than zero!"),this._pageWidth=i,this._pageHeight=s,this._requestRender=e,a>0&&(this._maxItemSize=a),this.pixelRatio=window.devicePixelRatio||1,this._fixSpriteLocationsTable){const t=[];for(const e in this._fixSpriteLocationsTable[this._testId]){const i=this._fixSpriteLocationsTable[this._testId][e];t[i.page]=i.pageSize}for(const e of t)this._mosaicPages.push({mosaicsData:{type:"static",data:new Uint32Array(e[0]*e[1])},size:[e[0],e[1]],dirty:!0,texture:void 0})}this._binPack=new h(this._pageWidth,this._pageHeight);const r=Math.floor(this._pageWidth),o=Math.floor(this._pageHeight);this._mosaicPages.push({mosaicsData:{type:"static",data:new Uint32Array(r*o)},size:[this._pageWidth,this._pageHeight],dirty:!0,texture:void 0})}getWidth(t){return t>=this._mosaicPages.length?-1:this._mosaicPages[t].size[0]}getHeight(t){return t>=this._mosaicPages.length?-1:this._mosaicPages[t].size[1]}getPageTexture(t){return t<this._mosaicPages.length?this._mosaicPages[t].texture:null}has(t){return this._mosaicRects.has(t)}get itemCount(){return this._mosaicRects.size}getSpriteItem(t){return this._mosaicRects.get(t)}addSpriteItem(t,e,i,s,a,o){if(this._mosaicRects.has(t))return this._mosaicRects.get(t);let h,n,p;if(c(i))if(this._fixSpriteLocationsTable&&this._fixSpriteLocationsTable[this._testId]&&this._fixSpriteLocationsTable[this._testId][t]){const e=this._fixSpriteLocationsTable[this._testId][t];h=e.rect,n=e.page,p=e.pageSize}else[h,n,p]=this._allocateImage(e[0],e[1]);else{h=new r(0,0,e[0],e[1]),n=this._mosaicPages.length;const t=void 0;this._mosaicPages.push({mosaicsData:i,size:e,dirty:!0,texture:t})}if(h.width<=0||h.height<=0)return null;const g={rect:h,width:e[0],height:e[1],sdf:a,simplePattern:o,pixelRatio:1,page:n};return this._mosaicRects.set(t,g),c(i)&&this._copy({rect:h,spriteSize:e,spriteData:i.data,page:n,pageSize:p,repeat:s,sdf:a}),g}hasItemsToProcess(){return 0!==this._spriteCopyQueue.length}processNextItem(){const t=this._spriteCopyQueue.pop();t&&this._copy(t)}getSpriteItems(t){const e={};for(const i of t)e[i]=this.getSpriteItem(i);return e}getMosaicItemPosition(t){const e=this.getSpriteItem(t),i=e&&e.rect;if(!i)return null;i.width=e.width,i.height=e.height;const a=e.width,r=e.height,o=s,h=this._mosaicPages[e.page];return{size:[e.width,e.height],tl:[(i.x+o)/h[0],(i.y+o)/h[1]],br:[(i.x+o+a)/h[0],(i.y+o+r)/h[1]],page:e.page}}bind(t,i,s=0,r=0){const o=this._mosaicPages[s],h=o.mosaicsData;let n=o.texture;if(n||(n=function(t,e,i){if(c(e))return new a(t,{pixelFormat:6408,dataType:5121,width:i[0],height:i[1]},new Uint8Array(e.data.buffer));return new a(t,{pixelFormat:6408,dataType:5121,samplingMode:9729,wrapMode:33071,width:i[0],height:i[1]},null)}(t,h,o.size),o.texture=n),n.setSamplingMode(i),c(h))t.bindTexture(n,r),o.dirty&&(n.setData(new Uint8Array(h.data.buffer)),n.generateMipmap());else{const i=h.data,s=i.bindFrame(t,n,r);e(this._requestRender)&&s&&i.frameCount>0&&this._requestRender.requestRender(),i.bindFrame(t,n,r)}o.dirty=!1}static _copyBits(t,e,i,s,a,r,o,h,c,n,p){let g=s*e+i,m=h*r+o;if(p){m-=r;for(let o=-1;o<=n;o++,g=((o+n)%n+s)*e+i,m+=r)for(let e=-1;e<=c;e++)a[m+e]=t[g+(e+c)%c]}else for(let i=0;i<n;i++){for(let e=0;e<c;e++)a[m+e]=t[g+e];g+=e,m+=r}}_copy(t){if(t.page>=this._mosaicPages.length)return;const e=this._mosaicPages[t.page],a=e.mosaicsData;if(!c(e.mosaicsData))throw new i("mapview-invalid-resource","unsuitable data type!");const r=t.spriteData,o=a.data;o&&r||console.error("Source or target images are uninitialized!"),n._copyBits(r,t.spriteSize[0],0,0,o,t.pageSize[0],t.rect.x+s,t.rect.y+s,t.spriteSize[0],t.spriteSize[1],t.repeat),e.dirty=!0}_allocateImage(t,e){t+=2*s,e+=2*s;const i=Math.max(t,e);if(this._maxItemSize&&this._maxItemSize<i){const i=Math.pow(2,Math.ceil(o(t))),s=Math.pow(2,Math.ceil(o(e))),a=new r(0,0,t,e);return this._mosaicPages.push({mosaicsData:{type:"static",data:new Uint32Array(i*s)},size:[i,s],dirty:!0,texture:void 0}),[a,this._mosaicPages.length-1,[i,s]]}const a=this._binPack.allocate(t,e);if(a.width<=0){const i=this._mosaicPages[this._currentPage];return!i.dirty&&c(i.mosaicsData)&&(i.mosaicsData.data=null),this._currentPage=this._mosaicPages.length,this._mosaicPages.push({mosaicsData:{type:"static",data:new Uint32Array(this._pageWidth*this._pageHeight)},size:[this._pageWidth,this._pageHeight],dirty:!0,texture:void 0}),this._binPack=new h(this._pageWidth,this._pageHeight),this._allocateImage(t,e)}return[a,this._currentPage,[this._pageWidth,this._pageHeight]]}dispose(){this._binPack=null;for(const t of this._mosaicPages){const e=t.texture;e&&e.dispose();const i=t.mosaicsData;if(!c(i)){i.data.pause()}}this._mosaicPages=null,this._mosaicRects.clear()}}export default n;

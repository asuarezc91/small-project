/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{getLimitCosine as t}from"./mesh/templates/util.js";class e{constructor(){this.closed=void 0,this.isFirstVertex=void 0,this.isLastVertex=void 0,this.isCap=void 0,this.currentVertex={x:void 0,y:void 0},this.inbound={x:void 0,y:void 0},this.outbound={x:void 0,y:void 0},this.prevNormal={x:void 0,y:void 0},this.nextNormal={x:void 0,y:void 0},this.bisector={x:void 0,y:void 0},this.leftInner={x:void 0,y:void 0},this.rightInner={x:void 0,y:void 0},this.leftOuter={x:void 0,y:void 0},this.rightOuter={x:void 0,y:void 0}}}function r(t,e,r){o.trackDistance=null!=e.trackDistance&&e.trackDistance,o.wrapDistance=null!=e.wrapDistance?e.wrapDistance:65535,o.thin=null!=e.thin&&e.thin,o.initialDistance=null!=e.initialDistance?e.initialDistance:0,o.enableOuterBisectorSplit=null!=e.enableOuterBisectorSplit&&e.enableOuterBisectorSplit,o.outerBisectorAutoSplitThreshold=null!=e.outerBisectorAutoSplitThreshold?e.outerBisectorAutoSplitThreshold:0,o.enableInnerBisectorSplit=null!=e.enableOuterBisectorSplit&&e.enableOuterBisectorSplit,o.innerBisectorAutoSplitThreshold=null!=e.innerBisectorAutoSplitThreshold?e.innerBisectorAutoSplitThreshold:0,x=t,s=r,u=0,l=0,c=0,y=!1,a=null,h=null,d.currentVertex.x=null,d.currentVertex.y=null,d.distance=o.initialDistance;const i=x[0],n=x[x.length-1];d.canSplit=!1,d.closed=i.x===n.x&&i.y===n.y,x.length<2||2===x.length&&d.closed||(o.thin?o.trackDistance?function(){b(),V(),f(1);for(;l-c>o.wrapDistance||u<x.length;)b(),V(),f(2),s.bridge(d),d.leftExit0=d.rightExit0,d.leftExit2=d.rightExit2}():function(){for(;u<x.length;){if(u>0&&(d.inbound.x=d.outbound.x,d.inbound.y=d.outbound.y),u<x.length-1){d.outbound.x=x[u+1].x-x[u].x,d.outbound.y=x[u+1].y-x[u].y;const t=Math.sqrt(d.outbound.x*d.outbound.x+d.outbound.y*d.outbound.y);d.distance+=t,d.outbound.x/=t,d.outbound.y/=t}else d.outbound.x=d.inbound.x,d.outbound.y=d.inbound.y;0===u&&(d.inbound.x=d.outbound.x,d.inbound.y=d.outbound.y),d.currentVertex.x=x[u].x,d.currentVertex.y=x[u].y,d.prevNormal.x=-d.inbound.y,d.prevNormal.y=d.inbound.x,d.nextNormal.x=-d.outbound.y,d.nextNormal.y=d.outbound.x,0===u?(s.vertex(d),d.leftEntry0=d.entry0,d.leftEntry2=d.entry2,d.leftExit0=d.exit0,d.leftExit2=d.exit2):(s.vertex(d),d.rightEntry0=d.entry0,d.rightEntry2=d.entry2,d.rightExit0=d.exit0,d.rightExit2=d.exit2,s.bridge(d),d.leftExit0=d.rightExit0,d.leftExit2=d.rightExit2),++u}}():o.enableOuterBisectorSplit||o.outerBisectorAutoSplitThreshold>0||o.enableInnerBisectorSplit||o.innerBisectorAutoSplitThreshold>0?(d.canSplit=!0,function(){b(),g(),d.splitInner=d.gapInner=d.splitOuter=d.gapOuter=!1,p(1),d.closure0=d.leftEntry0,d.closure1=d.leftEntry1,d.closure2=d.leftEntry2;for(;l-c>o.wrapDistance||u<x.length-1||u<x.length&&(!d.closed||o.trackDistance);)b(),g(),d.splitInner=d.gapInner=d.splitOuter=d.gapOuter=!1,p(2),s.bridge(d),d.leftExit0=d.rightExit0,d.leftExit1=d.rightExit1,d.leftExit2=d.rightExit2;d.closed&&!o.trackDistance&&(d.rightEntry0=d.closure0,d.rightEntry1=d.closure1,d.rightEntry2=d.closure2,s.bridge(d),d.leftExit0=d.rightExit0,d.leftExit1=d.rightExit1,d.leftExit2=d.rightExit2)}()):function(){b(),g(),p(1),d.closure0=d.leftEntry0,d.closure1=d.leftEntry1,d.closure2=d.leftEntry2;for(;l-c>o.wrapDistance||u<x.length-1||u<x.length&&(!d.closed||o.trackDistance);)b(),g(),p(2),s.bridge(d),d.leftExit0=d.rightExit0,d.leftExit1=d.rightExit1,d.leftExit2=d.rightExit2;d.closed&&!o.trackDistance&&(d.rightEntry0=d.closure0,d.rightEntry1=d.closure1,d.rightEntry2=d.closure2,s.bridge(d),d.leftExit0=d.rightExit0,d.leftExit1=d.rightExit1,d.leftExit2=d.rightExit2)}())}function i(){x=null,s=null}function n(){if(d.cosine<o.innerBisectorAutoSplitThreshold){d.splitInner=!0,d.gapInner=!0;const t=Math.max(o.innerBisectorAutoSplitThreshold,d.cosine),e=Math.sqrt(1-t*t)/t;d.leftInner.x=d.nextNormal.x+d.sign*e*d.outbound.x,d.leftInner.y=d.nextNormal.y+d.sign*e*d.outbound.y,d.rightInner.x=d.prevNormal.x-d.sign*e*d.inbound.x,d.rightInner.y=d.prevNormal.y-d.sign*e*d.inbound.y}else o.enableInnerBisectorSplit&&(d.splitInner=!0,d.gapInner=!1,d.leftInner.x=d.rightInner.x=d.bisector.x/d.cosine,d.leftInner.y=d.rightInner.y=d.bisector.y/d.cosine);if(d.cosine<o.outerBisectorAutoSplitThreshold){d.splitOuter=!0,d.gapOuter=!0;const t=Math.max(o.outerBisectorAutoSplitThreshold,d.cosine),e=Math.sqrt(1-t*t)/t;d.leftOuter.x=d.prevNormal.x-d.sign*e*d.inbound.x,d.leftOuter.y=d.prevNormal.y-d.sign*e*d.inbound.y,d.rightOuter.x=d.nextNormal.x+d.sign*e*d.outbound.x,d.rightOuter.y=d.nextNormal.y+d.sign*e*d.outbound.y}else o.enableOuterBisectorSplit&&(d.splitOuter=!0,d.gapOuter=!1,d.leftOuter.x=d.rightOuter.x=d.bisector.x/d.cosine,d.leftOuter.y=d.rightOuter.y=d.bisector.y/d.cosine)}let x;const o={};let s,u,l,c,y,a,h;const d=new e;function b(){if(y)return d.distance=0,d.isCap=d.isFirstVertex=d.isLastVertex=!1,void(y=!1);if(0===l)if(d.isFirstVertex=0===u,h=x[u],0===u){if(l=0,d.closed){d.inbound.x=h.x-x[x.length-2].x,d.inbound.y=h.y-x[x.length-2].y;const t=Math.sqrt(d.inbound.x*d.inbound.x+d.inbound.y*d.inbound.y);d.inbound.x/=t,d.inbound.y/=t}}else d.inbound.x=h.x-a.x,d.inbound.y=h.y-a.y,l=Math.sqrt(d.inbound.x*d.inbound.x+d.inbound.y*d.inbound.y),d.inbound.x/=l,d.inbound.y/=l;if(d.distance+l-c<=o.wrapDistance){if(u<x.length-1){d.outbound.x=x[u+1].x-h.x,d.outbound.y=x[u+1].y-h.y;const t=Math.sqrt(d.outbound.x*d.outbound.x+d.outbound.y*d.outbound.y);d.outbound.x/=t,d.outbound.y/=t}else if(d.closed){d.outbound.x=x[1].x-h.x,d.outbound.y=x[1].y-h.y;const t=Math.sqrt(d.outbound.x*d.outbound.x+d.outbound.y*d.outbound.y);d.outbound.x/=t,d.outbound.y/=t}else d.outbound.x=d.inbound.x,d.outbound.y=d.inbound.y;return 0!==u||d.closed||(d.inbound.x=d.outbound.x,d.inbound.y=d.outbound.y),++u,d.isLastVertex=u===x.length,d.isCap=!d.closed&&(d.isFirstVertex||d.isLastVertex),d.distance+=l-c,l=0,c=0,y=d.distance+l-c===o.wrapDistance,d.currentVertex.x=h.x,d.currentVertex.y=h.y,a=h,void(h=null)}d.outbound.x=d.inbound.x,d.outbound.y=d.inbound.y,c+=o.wrapDistance-d.distance,d.distance=o.wrapDistance,y=!0;const t=c/l;d.currentVertex.x=(1-t)*a.x+t*h.x,d.currentVertex.y=(1-t)*a.y+t*h.y}function V(){d.prevNormal.x=-d.inbound.y,d.prevNormal.y=d.inbound.x,d.nextNormal.x=-d.outbound.y,d.nextNormal.y=d.outbound.x}function g(){V(),d.bisector.x=d.prevNormal.x+d.nextNormal.x,d.bisector.y=d.prevNormal.y+d.nextNormal.y;const t=Math.sqrt(d.bisector.x*d.bisector.x+d.bisector.y*d.bisector.y);if(t<.001)return d.bisector.x=void 0,d.bisector.y=void 0,d.cosine=0,void(d.sign=void 0);d.bisector.x/=t,d.bisector.y/=t,d.cosine=d.bisector.x*d.nextNormal.x+d.bisector.y*d.nextNormal.y,d.sign=d.prevNormal.x*d.nextNormal.y-d.prevNormal.y*d.nextNormal.x>=0?1:-1}function p(t){s.vertex(d),1===t?(d.leftEntry0=d.entry0,d.leftEntry1=d.entry1,d.leftEntry2=d.entry2,d.leftExit0=d.exit0,d.leftExit1=d.exit1,d.leftExit2=d.exit2):2===t&&(d.rightEntry0=d.entry0,d.rightEntry1=d.entry1,d.rightEntry2=d.entry2,d.rightExit0=d.exit0,d.rightExit1=d.exit1,d.rightExit2=d.exit2)}function f(t){s.vertex(d),1===t?(d.leftEntry0=d.entry0,d.leftEntry2=d.entry2,d.leftExit0=d.exit0,d.leftExit2=d.exit2):2===t&&(d.rightEntry0=d.entry0,d.rightEntry2=d.entry2,d.rightExit0=d.exit0,d.rightExit2=d.exit2)}class E{constructor(e,r){this.writeVertex=e,this.writeTriangle=r,this.capType=0,this.joinType=2,this.miterLimitCosine=t(2),this.roundLimitCosine=Math.cos(23*Math.PI/180),this.almostParallelCosine=.97,this.radsPerSlice=.8,this.textured=!1,this.joinOnUTurn=!1}vertex(t){const e=2===this.joinType?this.miterLimitCosine:this.roundLimitCosine,r=t.isCap&&0!==this.capType;let i=!1;t.cosine>this.almostParallelCosine?(t.exit0=t.entry0=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,t.bisector.x/t.cosine,t.bisector.y/t.cosine,0,-1,t.distance),t.exit2=t.entry2=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,-t.bisector.x/t.cosine,-t.bisector.y/t.cosine,0,1,t.distance)):t.cosine<1-this.almostParallelCosine?(i=!t.isCap&&this.joinOnUTurn,t.entry0=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,t.prevNormal.x,t.prevNormal.y,0,-1,t.distance),t.entry2=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,-t.prevNormal.x,-t.prevNormal.y,0,1,t.distance),t.exit0=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,t.nextNormal.x,t.nextNormal.y,0,-1,t.distance),t.exit2=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,-t.nextNormal.x,-t.nextNormal.y,0,1,t.distance)):t.canSplit?(n(),t.sign>0?(t.splitInner?(t.exit0=this.writeVertex(t.currentVertex.x,t.currentVertex.y,t.outbound.x,t.outbound.y,t.leftInner.x,t.leftInner.y,0,-1,t.distance),t.entry0=this.writeVertex(t.currentVertex.x,t.currentVertex.y,t.inbound.x,t.inbound.y,t.rightInner.x,t.rightInner.y,0,-1,t.distance)):t.exit0=t.entry0=this.writeVertex(t.currentVertex.x,t.currentVertex.y,t.inbound.x,t.inbound.y,t.bisector.x/t.cosine,t.bisector.y/t.cosine,0,-1,t.distance),t.cosine<e?(i=!t.isCap,t.entry2=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,-t.prevNormal.x,-t.prevNormal.y,0,1,t.distance),t.exit2=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,-t.nextNormal.x,-t.nextNormal.y,0,1,t.distance)):t.splitOuter?(i=i||t.gapOuter,t.entry2=this.writeVertex(t.currentVertex.x,t.currentVertex.y,t.inbound.x,t.inbound.y,-t.leftOuter.x,-t.leftOuter.y,0,1,t.distance),t.exit2=this.writeVertex(t.currentVertex.x,t.currentVertex.y,t.outbound.x,t.outbound.y,-t.rightOuter.x,-t.rightOuter.y,0,1,t.distance)):t.entry2=t.exit2=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,-t.bisector.x/t.cosine,-t.bisector.y/t.cosine,0,1,t.distance)):(t.splitInner?(t.exit2=this.writeVertex(t.currentVertex.x,t.currentVertex.y,t.outbound.x,t.outbound.y,-t.leftInner.x,-t.leftInner.y,0,1,t.distance),t.entry2=this.writeVertex(t.currentVertex.x,t.currentVertex.y,t.inbound.x,t.inbound.y,-t.rightInner.x,-t.rightInner.y,0,1,t.distance)):t.exit2=t.entry2=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,-t.bisector.x/t.cosine,-t.bisector.y/t.cosine,0,1,t.distance),t.cosine<e?(i=!t.isCap,t.entry0=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,t.prevNormal.x,t.prevNormal.y,0,-1,t.distance),t.exit0=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,t.nextNormal.x,t.nextNormal.y,0,-1,t.distance)):t.splitOuter?(i=i||t.gapOuter,t.entry0=this.writeVertex(t.currentVertex.x,t.currentVertex.y,t.inbound.x,t.inbound.y,t.leftOuter.x,t.leftOuter.y,0,-1,t.distance),t.exit0=this.writeVertex(t.currentVertex.x,t.currentVertex.y,t.outbound.x,t.outbound.y,t.rightOuter.x,t.rightOuter.y,0,-1,t.distance)):t.exit0=t.entry0=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,t.bisector.x/t.cosine,t.bisector.y/t.cosine,0,-1,t.distance))):t.sign>0?(t.exit0=t.entry0=this.writeVertex(t.currentVertex.x,t.currentVertex.y,t.inbound.x,t.inbound.y,t.bisector.x/t.cosine,t.bisector.y/t.cosine,0,-1,t.distance),t.cosine<e?(i=!t.isCap,t.entry2=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,-t.prevNormal.x,-t.prevNormal.y,0,1,t.distance),t.exit2=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,-t.nextNormal.x,-t.nextNormal.y,0,1,t.distance)):t.entry2=t.exit2=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,-t.bisector.x/t.cosine,-t.bisector.y/t.cosine,0,1,t.distance)):(t.exit2=t.entry2=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,-t.bisector.x/t.cosine,-t.bisector.y/t.cosine,0,1,t.distance),t.cosine<e?(i=!t.isCap,t.entry0=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,t.prevNormal.x,t.prevNormal.y,0,-1,t.distance),t.exit0=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,t.nextNormal.x,t.nextNormal.y,0,-1,t.distance)):t.exit0=t.entry0=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,t.bisector.x/t.cosine,t.bisector.y/t.cosine,0,-1,t.distance));const x=t.canSplit&&(t.splitInner||t.splitOuter);let o;if(o=t.entry1=t.exit1=x||i||r?this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,0,0,0,0,t.distance):null,i&&1!==this.joinType)this.writeTriangle(o,t.sign>0?t.exit2:t.entry0,t.sign>0?t.entry2:t.exit0);else if(r&&1===this.capType||i&&1===this.joinType){let e,r,i,n,x,s;if(t.isCap){const o=Math.PI;x=Math.ceil(o/this.radsPerSlice),s=o/x,t.isFirstVertex?(e=t.prevNormal.x,r=t.prevNormal.y,i=t.entry0,n=t.entry2):t.isLastVertex&&(e=-t.nextNormal.x,r=-t.nextNormal.y,i=t.exit2,n=t.exit0)}else{const o=2*Math.acos(t.cosine);x=Math.ceil(o/this.radsPerSlice),s=o/x,e=t.sign>0?-t.prevNormal.x:t.nextNormal.x,r=t.sign>0?-t.prevNormal.y:t.nextNormal.y,i=t.sign>0?t.entry2:t.exit0,n=t.sign>0?t.exit2:t.entry0}const u=Math.cos(s),l=Math.sin(s),c=l*e+u*r;let y,a;e=u*e-l*r,r=c;for(let s=0;s<x;++s){if(y=a,s<x-1)if(t.isCap){const i=t.isFirstVertex?-1:1;a=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,e,r,i,0,t.distance)}else a=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,e,r,0,t.sign,t.distance);this.writeTriangle(0===s?i:y,o,s===x-1?n:a);const c=l*e+u*r;e=u*e-l*r,r=c}}else if(r&&2===this.capType){const e=t.isFirstVertex?1:-1;let r,i;this.textured?(r=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,t.prevNormal.x-e*t.inbound.x,t.prevNormal.y-e*t.inbound.y,-e,-1,t.distance),i=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,-t.prevNormal.x-e*t.inbound.x,-t.prevNormal.y-e*t.inbound.y,-e,1,t.distance)):(r=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,t.prevNormal.x-e*t.inbound.x,t.prevNormal.y-e*t.inbound.y,0,-1,t.distance),i=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,-t.prevNormal.x-e*t.inbound.x,-t.prevNormal.y-e*t.inbound.y,0,1,t.distance)),e>0?(this.writeTriangle(o,t.entry2,i),this.writeTriangle(o,i,r),this.writeTriangle(o,r,t.entry0)):(this.writeTriangle(o,i,t.exit2),this.writeTriangle(o,r,i),this.writeTriangle(o,t.exit0,r))}}bridge(t){this.writeTriangle(t.leftExit0,t.rightEntry0,null!=t.leftExit1?t.leftExit1:t.leftExit2),this.writeTriangle(t.rightEntry0,null!=t.rightEntry1?t.rightEntry1:t.rightEntry2,null!=t.leftExit1?t.leftExit1:t.leftExit2),null!=t.leftExit1&&null!=t.rightEntry1?(this.writeTriangle(t.leftExit1,t.rightEntry1,t.leftExit2),this.writeTriangle(t.rightEntry1,t.rightEntry2,t.leftExit2)):null!=t.leftExit1?this.writeTriangle(t.leftExit1,t.rightEntry2,t.leftExit2):null!=t.rightEntry1&&this.writeTriangle(t.rightEntry1,t.rightEntry2,t.leftExit2)}}class m{constructor(t,e){this.writeVertex=t,this.writeTriangle=e}vertex(t){t.entry0=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,t.prevNormal.x,t.prevNormal.y,0,-1,t.distance),t.entry2=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,-t.prevNormal.x,-t.prevNormal.y,0,1,t.distance),t.exit0=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,t.nextNormal.x,t.nextNormal.y,0,-1,t.distance),t.exit2=this.writeVertex(t.currentVertex.x,t.currentVertex.y,0,0,-t.nextNormal.x,-t.nextNormal.y,0,1,t.distance)}bridge(t){this.writeTriangle(t.leftExit0,t.rightEntry0,t.leftExit2),this.writeTriangle(t.rightEntry0,t.rightEntry2,t.leftExit2)}}export{E as StandardTessellationCallbacks,e as TessellationState,m as ThinTessellationCallbacks,i as cleanup,n as splitVertex,r as tessellate};

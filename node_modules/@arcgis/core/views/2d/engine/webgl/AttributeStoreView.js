/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import t from"../../../../core/has.js";import{isNone as e,mapMany as i,isSome as s,andThen as r,unwrap as a,forEachSome as h,mapOr as o,unwrapOr as n}from"../../../../core/maybe.js";import d from"../../../../core/Logger.js";import u from"../../../../core/Error.js";import{createResolver as l}from"../../../../core/promiseUtils.js";import{ATTRIBUTE_DATA_VV as p,TEXTURE_BINDING_ATTRIBUTE_DATA_0 as x,TEXTURE_BINDING_ATTRIBUTE_DATA_1 as c,TEXTURE_BINDING_ATTRIBUTE_DATA_2 as _,TEXTURE_BINDING_ATTRIBUTE_DATA_3 as g}from"./definitions.js";import"../../../../chunks/builtins.js";import f from"../../../webgl/Texture.js";import b from"../../../webgl/FramebufferObject.js";import"../../../webgl/RenderingContext.js";import{getPixelArrayCtor as T,getPixelBytes as m}from"./Utils.js";import{createDebugLogger as y,DEBUG_ATTR_UPDATES as w}from"./util/debug.js";const z=d.getLogger("esri.views.2d.engine.webgl.AttributeStoreView"),D=y(w,z),S=t=>2147483647&t;class U{constructor(t,e,i){this._texture=null,this._lastTexture=null,this._fbos={},this.texelSize=4;const{buffer:s,pixelType:r,textureOnly:h}=t,o=T(r);this.shared=i,this.pixelType=r,this.size=e,this.textureOnly=h,h||(this.data=new o(a(s))),this._resetRange()}destroy(){r(this._texture,(t=>t.dispose()));for(const t in this._fbos)r(this._fbos[t],(e=>{"0"===t&&e.detachColorTexture(),e.dispose()})),this._fbos[t]=null;this._texture=null}get _textureDesc(){return{target:3553,wrapMode:33071,pixelFormat:6408,dataType:this.pixelType,samplingMode:9728,width:this.size,height:this.size}}setData(t,e,i){const s=S(t),r=a(this.data),h=s*this.texelSize+e;!r||h>=r.length||(r[h]=i,this.dirtyStart=Math.min(this.dirtyStart,s),this.dirtyEnd=Math.max(this.dirtyEnd,s))}getData(t,i){if(e(this.data))return null;const s=S(t)*this.texelSize+i;return!this.data||s>=this.data.length?null:this.data[s]}getTexture(t){return n(this._texture,(()=>this._initTexture(t)))}getFBO(t,i=0){if(e(this._fbos[i])){const e={colorTarget:0,depthStencilTarget:0},s=0===i?this.getTexture(t):this._textureDesc;this._fbos[i]=new b(t,e,s)}return this._fbos[i]}get locked(){return!(5121!==this.pixelType||!this.shared||this.textureOnly||!t("esri-atomics")||!this.data)&&1===Atomics.load(this.data,0)}updateTexture(t){if(!this.locked)try{const e=this.dirtyStart,i=this.dirtyEnd;if(e>i)return;this._resetRange();const s=a(this.data).buffer,r=this.getTexture(t),h=4,o=(e-e%this.size)/this.size,n=(i-i%this.size)/this.size,d=o,l=this.size,p=n,x=o*this.size*h,c=(l+p*this.size)*h-x,_=T(this.pixelType),g=_.BYTES_PER_ELEMENT;try{new _(s,x*g,c)}catch(t){console.debug(t)}const f=new _(s,x*g,c),b=this.size,m=p-d+1;if(m>this.size)return void z.error(new u("mapview-webgl","Out-of-bounds index when updating AttributeData"));r.updateData(0,0,d,b,m,f)}catch(t){console.debug(t)}}update(t){const{data:e,start:i,end:r}=t;if(s(e)){const s=this.data,r=i*this.texelSize;for(let i=0;i<e.length;i++){const a=1<<i%this.texelSize;t.layout&a&&(s[r+i]=e[i])}}this.dirtyStart=Math.min(this.dirtyStart,i),this.dirtyEnd=Math.max(this.dirtyEnd,r)}resize(t,e){const i=this.size;if(this.size=e,this.textureOnly)return void(i!==this.size&&(this._lastTexture=this._texture,this._texture=null));const s=T(this.pixelType);this.destroy(),this.data=new s(a(t.buffer))}_resetRange(){this.dirtyStart=2147483647,this.dirtyEnd=0}_initTexture(t){const e=new f(t,this._textureDesc,n(this.data,void 0));if(s(this._lastTexture)&&this._fbos[0]){const i=this._lastTexture.descriptor.width,s=this._lastTexture.descriptor.height,r=this._lastTexture.descriptor.dataType,a=this._lastTexture.descriptor.pixelFormat,h=this.getFBO(t),o=m(r),n=new(T(r))(new ArrayBuffer(i*s*o*this.texelSize)),d=t.getBoundFramebufferObject(),{x:u,y:l,width:p,height:x}=t.getViewport();t.bindFramebuffer(h),h.readPixels(0,0,i,s,a,r,n),e.updateData(0,0,0,2*i,s/2,n),t.setViewport(u,l,p,x),t.bindFramebuffer(d)}return this.destroy(),this._texture=e,this._texture}}class j{constructor(){this._initialized=!1,this._forceNextUpload=!1,this._locked=!1}initialize(t){const{blocks:r,shared:a,size:h}=t;if(this.shared=a,this.size=h,D("Initializing AttributeStoreView",t),e(this._data))this._data=i(r,(t=>new U(t,h,a)));else for(let t=0;t<this._data.length;t++){const i=this._data[t],o=r[t];s(o)&&(e(i)?this._data[t]=new U(o,h,a):i.resize(o,h))}this._initialized=!0}destroy(){r(this._data,(t=>i(t,(t=>t.destroy())))),r(this._defaultTexture,(t=>t.dispose()))}getBlock(t){if(e(this._data))return null;return this._data[t]}setLabelMinZoom(t,e){this.setData(t,0,1,e)}getLabelMinZoom(t){return this.getData(t,0,1,255)}getFilterFlags(t){return this.getData(t,0,0,0)}getVVSize(t){return this.getData(t,p,0,0)}getData(t,i,r,h){if(!this._data)return 0;const o=a(this._data)[i];if(e(o))return 0;const n=o.getData(t,r);return s(n)?n:h}setData(t,e,i,s){const r=a(this._data)[e];a(r).setData(t,i,s)}lockTextureUpload(){this._locked=!0}unlockTextureUpload(){this._locked=!1}forceTextureUpload(){this._forceNextUpload=!0}async requestUpdate(t){if(this._pendingAttributeUpdate)return void z.error(new u("mapview-webgl","Tried to update attribute data with a pending update"));const e=l();return D("AttributeStoreView Update Requested",t),this._pendingAttributeUpdate={data:t,resolver:e},e.promise}update(){if(this._initialized&&s(this._pendingAttributeUpdate)){const{data:t,resolver:e}=this._pendingAttributeUpdate,i=a(this._data);for(let e=0;e<t.blocks.length;e++){const s=t.blocks[e],a=i[e];r(a,(t=>r(s,(i=>{D(`Updating block ${e}`,i),t.update(i)}))))}this._pendingAttributeUpdate=null,e()}}bindTextures(t){this.update();const e=this._getDefaultTexture(t);if(!this._initialized)return t.bindTexture(e,x),t.bindTexture(e,c),t.bindTexture(e,_),void t.bindTexture(e,g);const i=a(this._data);this._locked&&!this._forceNextUpload||(h(i,(e=>e.updateTexture(t))),this._forceNextUpload=!1),t.bindTexture(o(i[0],e,(e=>e.getTexture(t))),x),t.bindTexture(o(i[1],e,(e=>e.getTexture(t))),c),t.bindTexture(o(i[2],e,(e=>e.getTexture(t))),_),t.bindTexture(o(i[3],e,(e=>e.getTexture(t))),g)}_getDefaultTexture(t){if(e(this._defaultTexture)){const e={wrapMode:33071,pixelFormat:6408,dataType:5121,samplingMode:9728,width:1,height:1};this._defaultTexture=new f(t,e,new Uint8Array(4))}return this._defaultTexture}}export{j as AttributeStoreView};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{isSome as e}from"../../../../core/maybe.js";import{isAbortError as t}from"../../../../core/promiseUtils.js";import{TileStatus as s}from"../../tiling/enums.js";import{PlacementEngine as r}from"./Placement.js";import i from"./TileParser.js";export default class{constructor(e,t,i,n){this.status=s.INITIALIZED,this.placementEngine=new r,this.tileKey=e,this.refKeys=t,this._workerTileHandler=i,this._styleRepository=n}release(){this.tileKey="",this.refKeys=null,this.status=s.INITIALIZED,this._workerTileHandler=null}async parse(r,i,n){const a=n&&n.signal;if(e(a)){const e=()=>{a.removeEventListener("abort",e),this.status=s.INVALID};a.addEventListener("abort",e)}let o;try{o=await this._parse(r,n)}catch(e){if(t(e))throw e;return{result:[],transferList:[]}}this.status=s.READY;const l=[];for(const e of o){const t=e.serialize();l.push(t)}return{result:l,transferList:l.length<=i&&l}}setObsolete(){this.status=s.INVALID}getLayers(){return this._workerTileHandler.getLayers()}getWorkerTileHandler(){return this._workerTileHandler}async _parse(e,t){const r=e.sourceName2DataAndRefKey;if(0===Object.keys(r).length)return[];this.status=s.MODIFIED;return new i(r,this,t.client,this._styleRepository,e.styleLayerUIDs).parse(t)}}

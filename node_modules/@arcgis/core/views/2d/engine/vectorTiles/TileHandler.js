/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import e from"../../../../core/has.js";import{isSome as t,isNone as s}from"../../../../core/maybe.js";import{all as i,create as r,resolve as o,throwIfAborted as a,isAbortError as n,eachAlways as l}from"../../../../core/promiseUtils.js";import c from"../../../../request.js";import{create as h}from"../../../../geometry/support/aaBoundingRect.js";import{MIN_PRIORITY as u}from"../../../../core/MemCache.js";import p from"../../../../core/ItemCache.js";import{open as f}from"../../../../core/workers/workers.js";import _ from"../../tiling/TileKey.js";import y from"./TileIndex.js";import{VectorTile as g}from"./VectorTile.js";import m from"./GlyphMosaic.js";import d from"./GlyphSource.js";import T from"./SpriteMosaic.js";import{perfAdd as M}from"./decluttering/debugging.js";const R=new p(10),v=new Map;class S{constructor(e,t,s,i){this._vectorTileLayer=e,this._styleRepository=t,this.devicePixelRatio=s,this._memCache=i,this._spriteMosaic=null,this._glyphMosaic=null,this._connection=null,this._ongoingTileRequests=new Map,this._ongoingRequestToController=new Map}destroy(){this._ongoingTileRequests&&this.abortAll(),this._connection&&(this._connection.close(),this._connection=null),this._styleRepository=null,this._vectorTileLayer=null,this._spriteMosaic&&(this._spriteMosaic=null),this._glyphMosaic&&(this._glyphMosaic=null)}get spriteMosaic(){return this._spriteSourcePromise.then((()=>this._spriteMosaic))}get glyphMosaic(){return this._glyphMosaic}async start(t){const s=this._vectorTileLayer,r=s.sourceNameToSource,o=[];for(const e in r)o.push(this._fetchTileMap(r[e],t));this._spriteSourcePromise=this._vectorTileLayer.loadSpriteSource(this.devicePixelRatio,t),this._spriteSourcePromise.then((e=>{this._spriteMosaic=new T(1024,1024,250),this._spriteMosaic.setSpriteSource(e)}));const a=this._styleRepository,n=new d(a.glyphs);return this._glyphMosaic=new m(1024,1024,n),this._broadcastPromise=f("WorkerTileHandler",{client:this,scheduler:t.scheduler,signal:t.signal}).then((r=>(this._connection=r,i(this._connection.broadcast("setStyle",{style:s.currentStyleInfo.style,vectorTileLayerMaxBuffers:e("vectortilelayer-max-buffers")},t))))),i(o)}async updateStyle(e){return await this._broadcastPromise,this._broadcastPromise=r(((t,s)=>{i(this._connection.broadcast("updateStyle",e)).then(t,s)})),this._broadcastPromise}async setStyle(t,s){await this._broadcastPromise,this._styleRepository=t;const o=this._vectorTileLayer.sourceNameToSource,a=[];for(const e in o)a.push(this._fetchTileMap(o[e],null));this._spriteSourcePromise=this._vectorTileLayer.loadSpriteSource(this.devicePixelRatio,null),this._spriteSourcePromise.then((e=>{this._spriteMosaic=new T(1024,1024,250),this._spriteMosaic.setSpriteSource(e)}));const n=new d(t.glyphs);return this._glyphMosaic=new m(1024,1024,n),this._broadcastPromise=r(((t,r)=>{i(this._connection.broadcast("setStyle",{style:s,vectorTileLayerMaxBuffers:e("vectortilelayer-max-buffers")})).then(t,r)})),a.push(this._broadcastPromise),i(a)}getVectorTile(e,s,i,r){const n=new _(e,s,i,0);if(t(this._memCache)){const e=this._memCache.get(n.id);if(t(e))return e.reference(),o(e)}return this._getVectorTileData(n).then((e=>{if(a(r),t(this._memCache)){const e=this._memCache.get(n.id);if(t(e))return e.reference(),e}if(!this._vectorTileLayer)return null;const s=this._vectorTileLayer.tileInfo.getTileBounds(h(),n),i=new g(n,this._styleRepository,s,[512,512]);if(e&&e.tileData){if(i.setData(e.tileData),t(this._memCache)){i.reference();const e=i.getMemoryUsage();e>0&&this._memCache.put(i.key.id,i,e*i.referenced,u)}}else i.setData(null);return i}))}releaseVectorTile(e){s(this._memCache)||e.release()||this._memCache.updateSize(e.key.id,e,e.getMemoryUsage()*e.referenced)}fetchTileData(e,t){return this._getRefKeys(e,t).then((e=>{const s=this._vectorTileLayer.sourceNameToSource,i=[];for(const e in s)i.push(e);return this._getSourcesData(i,e,t)}))}parseTileData(t,s){const i=t&&t.data;if(!i)return o(null);const{sourceName2DataAndRefKey:r,transferList:a}=i;return 0===Object.keys(r).length?o(null):this._broadcastPromise.then((()=>this._connection.getAvailableClient().then((i=>i.invoke("createTileAndParse",{key:t.key.id,sourceName2DataAndRefKey:r,styleLayerUIDs:t.styleLayerUIDs},{...s,transferList:a}).then((t=>{if(e("esri-vector-tiles-debug")){const e={};for(const t in r)e[t]=r[t].refKey;return{tileData:t,refKeys:e}}return{tileData:t}}))))))}get updating(){return this._ongoingTileRequests.size>0}abortAll(){this._ongoingRequestToController.forEach((e=>e.abort())),this._ongoingRequestToController.clear(),this._ongoingTileRequests.clear()}async getSprites(e){return await this._spriteSourcePromise,this._spriteMosaic.getSpriteItems(e)}getGlyphs(e){return this._glyphMosaic.getGlyphItems(e.font,e.codePoints)}perfReport({key:e,milliseconds:t}){M(e,t,"ms")}async _getTilePayload(e,t,s){const i=_.pool.acquire(e.id),r=this._vectorTileLayer.sourceNameToSource[t].getSourceTileUrl(i.level,i.row,i.col);_.pool.release(i);try{return{protobuff:(await c(r,{responseType:"array-buffer",...s})).data,sourceName:t}}catch(e){if(n(e))throw e;return{protobuff:null,sourceName:t}}}async _fetchTileMap(e,t){if(e.capabilities.operations.supportsTileMap&&e.tileIndex)return o();if(!e.tileMapURL)return;const s=R.get(e.tileMapURL);if(s)return void(e.tileIndex=s);let i;if(v.has(e.tileMapURL)){try{i=await v.get(e.tileMapURL),e.tileIndex=new y(i.data)}catch(e){if(n(e))throw e}return}const r=c(e.tileMapURL,t);v.set(e.tileMapURL,r);try{i=await r,v.delete(e.tileMapURL),R.put(e.tileMapURL,e.tileIndex),e.tileIndex=new y(i.data)}catch(t){if(v.delete(e.tileMapURL),n(t))throw t}}_getRefKeys(e,t){const s=this._vectorTileLayer.sourceNameToSource,i=new Array;for(const r in s){const o=s[r].getRefKey(e,t);i.push(o)}return l(i)}_getSourcesData(e,t,s){const i=[];for(let r=0;r<t.length;r++)if(null==t[r].value||null==e[r])i.push(null);else{const o=this._getTilePayload(t[r].value,e[r],s);i.push(o)}return l(i).then((e=>{const s={},i=[];for(let r=0;r<e.length;r++)if(e[r].value&&e[r].value&&e[r].value.protobuff&&e[r].value.protobuff.byteLength>0){const o=t[r].value.id;s[e[r].value.sourceName]={refKey:o,protobuff:e[r].value.protobuff},i.push(e[r].value.protobuff)}return{sourceName2DataAndRefKey:s,transferList:i}}))}_getVectorTileData(e){const t=e.id;if(this._ongoingTileRequests.has(t))return this._ongoingTileRequests.get(t);const s=new AbortController,i={signal:s.signal},r=this._getParsedVectorTileData(e,i).then((e=>(this._ongoingTileRequests.delete(t),this._ongoingRequestToController.delete(t),e))).catch((()=>(this._ongoingTileRequests.delete(t),this._ongoingRequestToController.delete(t),null)));return this._ongoingTileRequests.set(t,r),this._ongoingRequestToController.set(t,s),r}_getParsedVectorTileData(e,t){return this.fetchTileData(e,t).then((s=>this.parseTileData({key:e,data:s},t)))}}export{S as TileHandler};

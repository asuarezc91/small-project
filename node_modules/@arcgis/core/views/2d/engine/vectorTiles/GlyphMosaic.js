/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import"../../../../core/has.js";import{all as t}from"../../../../core/promiseUtils.js";import"../../../../chunks/builtins.js";import e from"../../../webgl/Texture.js";import"../../../webgl/FramebufferObject.js";import"../../../webgl/RenderingContext.js";import i from"../webgl/Rect.js";import s from"./RectangleBinPack.js";export default class{constructor(t,e,i){this.width=0,this.height=0,this._dirties=[],this._glyphData=[],this._currentPage=0,this._glyphIndex={},this._textures=[],this._rangePromises=new Map,this.width=t,this.height=e,this._glyphSource=i,this._binPack=new s(t-4,e-4),this._glyphData.push(new Uint8Array(t*e)),this._dirties.push(!0),this._textures.push(void 0)}getGlyphItems(e,h){const r=[],n=this._glyphSource,o=new Set;for(const t of h){const e=Math.floor(.00390625*t);o.add(e)}const a=[];return o.forEach((t=>{if(t<=256){const i=e+t;if(this._rangePromises.has(i))a.push(this._rangePromises.get(i));else{const s=n.getRange(e,t).then((()=>{this._rangePromises.delete(i)}),(()=>{this._rangePromises.delete(i)}));this._rangePromises.set(i,s),a.push(s)}}})),t(a).then((()=>{let t,o=this._glyphIndex[e];o||(o={},this._glyphIndex[e]=o),t=h;for(const h of t){const t=o[h];if(t){r[h]={sdf:!0,rect:t.rect,metrics:t.metrics,page:t.page,code:h};continue}const a=n.getGlyph(e,h);if(!a||!a.metrics)continue;const c=a.metrics;let l;if(0===c.width)l=new i(0,0,0,0);else{const t=3,e=c.width+2*t,i=c.height+2*t;let h=e%4?4-e%4:4,r=i%4?4-i%4:4;1===h&&(h=5),1===r&&(r=5),l=this._binPack.allocate(e+h,i+r),l.isEmpty&&(this._dirties[this._currentPage]||(this._glyphData[this._currentPage]=null),this._currentPage=this._glyphData.length,this._glyphData.push(new Uint8Array(this.width*this.height)),this._dirties.push(!0),this._textures.push(void 0),this._binPack=new s(this.width-4,this.height-4),l=this._binPack.allocate(e+h,i+r));const n=this._glyphData[this._currentPage],o=a.bitmap;let g,p;if(o)for(let t=0;t<i;t++){g=e*t,p=this.width*(l.y+t+1)+l.x;for(let t=0;t<e;t++)n[p+t+1]=o[g+t]}}o[h]={rect:l,metrics:c,tileIDs:null,page:this._currentPage},r[h]={sdf:!0,rect:l,metrics:c,page:this._currentPage,code:h},this._dirties[this._currentPage]=!0}return r}))}removeGlyphs(t){for(const e in this._glyphIndex){const i=this._glyphIndex[e];if(!i)continue;let s;for(const e in i)if(s=i[e],s.tileIDs.delete(t),0===s.tileIDs.size){const t=this._glyphData[s.page],h=s.rect;let r,n;for(let e=0;e<h.height;e++)for(r=this.width*(h.y+e)+h.x,n=0;n<h.width;n++)t[r+n]=0;delete i[e],this._dirties[s.page]=!0}}}bind(t,i,s,h=0){this._textures[s]||(this._textures[s]=new e(t,{pixelFormat:6406,dataType:5121,width:this.width,height:this.height},new Uint8Array(this.width*this.height)));const r=this._textures[s];r.setSamplingMode(i),this._dirties[s]&&r.setData(this._glyphData[s]),t.bindTexture(r,h),this._dirties[s]=!1}dispose(){this._binPack=null;for(const t of this._textures)t&&t.dispose();this._textures.length=0}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import"../../../../core/has.js";import"../../../../chunks/builtins.js";import t from"../../../webgl/Texture.js";import"../../../webgl/FramebufferObject.js";import"../../../webgl/RenderingContext.js";import i from"../webgl/Rect.js";import e from"./RectangleBinPack.js";class s{constructor(t,i,s=0){this._size=[],this._mosaicsData=[],this._textures=[],this._dirties=[],this._maxItemSize=0,this._currentPage=0,this._pageWidth=0,this._pageHeight=0,this._mosaicRects={},this.pixelRatio=1,(t<=0||i<=0)&&console.error("Sprites mosaic defaultWidth and defaultHeight must be greater than zero!"),this._pageWidth=t,this._pageHeight=i,s>0&&(this._maxItemSize=s),this._binPack=new e(t-4,i-4)}getWidth(t){return t>=this._size.length?-1:this._size[t][0]}getHeight(t){return t>=this._size.length?-1:this._size[t][1]}setSpriteSource(t){if(this.dispose(),this.pixelRatio=t.devicePixelRatio,0===this._mosaicsData.length){this._binPack=new e(this._pageWidth-4,this._pageHeight-4);const t=Math.floor(this._pageWidth),i=Math.floor(this._pageHeight),s=new Uint32Array(t*i);this._mosaicsData[0]=s,this._dirties.push(!0),this._size.push([this._pageWidth,this._pageHeight]),this._textures.push(void 0)}this._sprites=t}getSpriteItem(t,i=!1){let e=this._mosaicRects[t];if(e)return e;if(!this._sprites||"loaded"!==this._sprites.loadStatus)return null;const s=this._sprites.getSpriteInfo(t);if(!s||!s.width||!s.height||s.width<0||s.height<0)return null;const h=s.width,a=s.height,[r,o,_]=this._allocateImage(h,a);return r.width<=0?null:(this._copy(r,s,o,_,i),e={rect:r,width:h,height:a,sdf:s.sdf,simplePattern:!1,pixelRatio:s.pixelRatio,page:o},this._mosaicRects[t]=e,e)}preloadSpriteItems(){for(const t of this._sprites.spriteNames)this.getSpriteItem(t,!0)}getSpriteItems(t){const i={};for(const e of t)i[e]=this.getSpriteItem(e);return i}getMosaicItemPosition(t,i){const e=this.getSpriteItem(t,i),s=e&&e.rect;if(!s)return null;s.width=e.width,s.height=e.height;const h=e.width,a=e.height,r=this._size[e.page];return{size:[e.width,e.height],tl:[(s.x+2)/r[0],(s.y+2)/r[1]],br:[(s.x+2+h)/r[0],(s.y+2+a)/r[1]],page:e.page}}bind(i,e,s=0,h=0){this._textures[s]||(this._textures[s]=new t(i,{pixelFormat:6408,dataType:5121,wrapMode:33071,width:this._size[s][0],height:this._size[s][1]},new Uint8Array(this._mosaicsData[s].buffer)));const a=this._textures[s];a.setSamplingMode(e),this._dirties[s]&&a.setData(new Uint8Array(this._mosaicsData[s].buffer)),i.bindTexture(a,h),this._dirties[s]=!1}static _copyBits(t,i,e,s,h,a,r,o,_,n,g){let p=s*i+e,c=o*a+r;if(g){c-=a;for(let r=-1;r<=n;r++,p=((r+n)%n+s)*i+e,c+=a)for(let i=-1;i<=_;i++)h[c+i]=t[p+(i+_)%_]}else for(let e=0;e<n;e++){for(let i=0;i<_;i++)h[c+i]=t[p+i];p+=i,c+=a}}_copy(t,i,e,h,a,r){if(!this._sprites||"loaded"!==this._sprites.loadStatus||e>=this._mosaicsData.length)return;const o=new Uint32Array(r?r.buffer:this._sprites.image.buffer),_=this._mosaicsData[e];_&&o||console.error("Source or target images are uninitialized!");const n=r?i.width:this._sprites.width;s._copyBits(o,n,i.x,i.y,_,h[0],t.x+2,t.y+2,i.width,i.height,a),this._dirties[e]=!0}_allocateImage(t,s){t+=2,s+=2;const h=Math.max(t,s);if(this._maxItemSize&&this._maxItemSize<h){const e=new i(0,0,t,s);return this._mosaicsData.push(new Uint32Array(t*s)),this._dirties.push(!0),this._size.push([t,s]),this._textures.push(void 0),[e,this._mosaicsData.length-1,[t,s]]}let a=t%4?4-t%4:4,r=s%4?4-s%4:4;1===a&&(a=5),1===r&&(r=5);const o=this._binPack.allocate(t+a,s+r);return o.width<=0?(this._dirties[this._currentPage]||(this._mosaicsData[this._currentPage]=null),this._currentPage=this._mosaicsData.length,this._mosaicsData.push(new Uint32Array(this._pageWidth*this._pageHeight)),this._dirties.push(!0),this._size.push([this._pageWidth,this._pageHeight]),this._textures.push(void 0),this._binPack=new e(this._pageWidth-4,this._pageHeight-4),this._allocateImage(t,s)):[o,this._currentPage,[this._pageWidth,this._pageHeight]]}dispose(){this._binPack=null,this._mosaicRects={};for(const t of this._textures)t&&t.dispose();this._textures.length=0}}export default s;

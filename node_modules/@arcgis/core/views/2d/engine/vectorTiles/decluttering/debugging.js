/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
function t(t,e,n,o,l,i){t.fillStyle=e,t.fillRect(n,o,l,i)}function e(t,e,n,o,l,i){t.strokeStyle=e,t.strokeRect(n,o,l,i)}function n(t,e){t.strokeStyle="black";const n=e.cellSize,o=e.rows,l=e.columns;for(let i=0;i<o;i++){const o=e.cells[i],r=i*n,s=(i+1)*n;for(let e=0;e<l;e++){const l=o[e],i=e*n,d=(e+1)*n;t.strokeRect(i,r,d-i,s-r),t.fillText(`cells:${l.length}`,i+4,r+12)}}}function o(n,o){const l=window.COLLISION_XRAY;for(let i=0;i<o.length;++i){const r=!o[i].unique.show;if(l||!r)for(const s of o[i].colliders){if(!s.enabled)continue;const d=!o[i].unique.parts[s.partIndex].show;if(!l&&d)continue;const a=s.xScreen,c=s.yScreen,m=s.dxScreen,h=s.dyScreen;n.globalAlpha=r||d?.2:1,t(n,"green",a-1,c-1,3,3),e(n,"red",a+m,c+h,s.width,s.height),t(n,"blue",a+m-1,c+h-1,3,3),n.globalAlpha=1}}}function l(t,e,n){if(!window.PERFORMANCE_RECORDING_STORAGE)return;const o=window.PERFORMANCE_RECORDING_STORAGE;o.perf=o.perf||{};const l=o.perf;l[t]=l[t]||{start:null,time:0,min:void 0,max:void 0,samples:[],unit:n},l[t].time+=e,l[t].samples.push(e),(null==l[t].min||e<l[t].min)&&(l[t].min=e),(null==l[t].max||e>l[t].max)&&(l[t].max=e)}function i(){if(!window.PERFORMANCE_RECORDING_STORAGE)return;window.PERFORMANCE_RECORDING_STORAGE.perf={}}function r(t,e){return`${Math.round(10*t)/10}${e}`}function s(t){if(!window.PERFORMANCE_RECORDING_STORAGE){const t=document.createElement("div");return t.innerHTML="No recorded data is present because performance recording is disabled.",t}const e=document.createElement("div");let n="";const o=window.PERFORMANCE_RECORDING_STORAGE.perf;n+='<table style="border-collapse: collapse;">',n+=`<tr style="text-weight: bold; border-bottom: 1px solid "${t}";"><td>Name</td><td>Total</td><td>Runs</td><td>Average</td><td>Min</td><td>Distribution</td><td>Max</td><td>Histogram (50 bins)</td></tr>`;const l=[];for(const t in o)l.push({name:t,value:o[t].time/o[t].samples.length,sortkey:o[t].max});l.sort(((t,e)=>-(t.sortkey-e.sortkey)));const i=l.map((t=>t.name));for(const t of i)n+="<tr>",n+=`<td>${t}</td>`,n+=`<td>${r(o[t].time,o[t].unit)}</td>`,n+=`<td>${o[t].samples.length}</td>`,n+=`<td>${r(o[t].time/o[t].samples.length,o[t].unit)}</td>`,n+=`<td style="text-align: right;">${r(o[t].min,o[t].unit)}</td>`,n+="<td data-distribution='1'></td>",n+=`<td>${r(o[t].max,o[t].unit)}</td>`,n+="<td data-histogram='1'></td>",n+="</tr>";n+="<table>",e.innerHTML=n;const s=e.querySelectorAll("td[data-distribution='1']"),d=e.querySelectorAll("td[data-histogram='1']");for(let e=0;e<s.length;e++){let n=s[e];{const r=document.createElement("canvas");r.height=10,r.width=100;const s=r.getContext("2d");if(s.strokeStyle=t,s.beginPath(),s.moveTo(0,5),s.lineTo(100,5),o[i[e]].max>o[i[e]].min+.001)for(const t of o[i[e]].samples){const n=(t-o[i[e]].min)/(o[i[e]].max-o[i[e]].min);s.moveTo(100*n,3),s.lineTo(100*n,7)}s.stroke(),s.strokeRect((l[e].value-o[i[e]].min)/(o[i[e]].max-o[i[e]].min)*100-2,0,4,9),n.appendChild(r)}n=d[e];{const l=new Array(50);for(let t=0;t<l.length;t++)l[t]=0;for(const t of o[i[e]].samples){const n=(t-o[i[e]].min)/(o[i[e]].max-o[i[e]].min);l[1===n?l.length-1:Math.floor(n*l.length)]++}const r=document.createElement("canvas");r.height=30,r.width=120;const s=r.getContext("2d");s.strokeStyle=t,s.fillStyle=t;let d=0;for(let t=0;t<l.length;t++){const e=l[t];d=Math.max(d,e)}for(let t=0;t<l.length;t++){const e=l[t];s.fillRect(t*r.width/l.length,r.height*(1-e/d),r.width/l.length,r.height*(e/d))}s.beginPath(),s.moveTo(0,r.height),s.lineTo(r.width,r.height),s.stroke(),n.appendChild(r)}}const a=e.querySelectorAll("td");for(let t=0;t<a.length;t++)a[t].style.padding="5px";return e}export{o as drawColliders,n as drawGridIndex,l as perfAdd,i as perfClear,s as perfElement};

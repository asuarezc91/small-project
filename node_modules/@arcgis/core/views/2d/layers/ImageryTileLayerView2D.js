/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../core/has.js";import{isNone as t,unwrap as i}from"../../../core/maybe.js";import s from"../../../core/Logger.js";import"../../../core/accessorSupport/ensureType.js";import{property as r}from"../../../core/accessorSupport/decorators/property.js";import{subclass as a}from"../../../core/accessorSupport/decorators/subclass.js";import"../../../core/urlUtils.js";import"../../../core/uuid.js";import"../../../portal/support/resourceExtension.js";import{debounce as l,resolve as o,isAbortError as n,createAbortController as h,eachAlways as c}from"../../../core/promiseUtils.js";import u from"../../../geometry/Point.js";import p from"../../../geometry/Extent.js";import"../../../geometry.js";import{createScreenPoint as m}from"../../../core/screenUtils.js";import d from"../../../Graphic.js";import{watch as y}from"../../../core/watchUtils.js";import _ from"../../../layers/support/PixelBlock.js";import b from"../../../layers/support/TileInfo.js";import{extractBands as g}from"../../../layers/support/rasterFunctions/pixelUtils.js";import{computeProjectedScales as f}from"../../../layers/support/rasterFunctions/rasterProjectionHelper.js";import{update as w,unregister as I,register as P,getRasterId as U}from"../../../layers/support/rasterDatasets/RawBlockCache.js";import{RefreshableLayerView as R}from"../../layers/RefreshableLayerView.js";import T from"../../webgl/capabilities.js";import v from"../tiling/TileInfoView.js";import x from"../tiling/TileQueue.js";import S from"../tiling/TileStrategy.js";import k from"../../layers/LayerView.js";import{createQueryGeometry as C}from"../../support/drapedUtils.js";import{ImageryTileLayerView as z}from"../../layers/ImageryTileLayerView.js";import{RasterTileContainer as j}from"../engine/RasterTileContainer.js";import{LayerView2DMixin as V}from"./LayerView2D.js";const L=s.getLogger("esri.views.2d.layers.ImageryTileLayerView2D"),q=[0,0];let D=class extends(z(R(V(k)))){constructor(){super(...arguments),this._tileStrategy=null,this._tileInfoView=null,this._fetchQueue=null,this._blockCacheRegistryUrl=null,this._blockCacheRegistryId=null,this._bitmapView=null,this._emptyTilePixelBlock=null,this._srcResolutions=null,this._previousLOD=null,this._needBlockCacheUpdate=!1,this._globalSymbolizerParams=null,this._symbolizerParams=null,this._abortController=null,this._globalUpdateRequested=!1,this.useWebGLForProcessing=!0,this.datumTransformation=null,this._redrawDebounced=l((e=>this._redrawImage(e)),2e3)}initialize(){const e=this.updateFullExtent();this.addResolvingPromise(e)}get useProgressiveUpdate(){return null==this._get("useProgressiveUpdate")||this._get("useProgressiveUpdate")}set useProgressiveUpdate(e){this._tileStrategy&&this.useProgressiveUpdate!==e&&(this._tileStrategy.destroy(),this._bitmapView.removeAllChildren(),this._tileStrategy=new S({cachePolicy:e?"keep":"purge",resampling:!1,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),cacheSize:e?40:0,tileInfoView:this._tileInfoView}),this._set("useProgressiveUpdate",e),this.requestUpdate())}hitTest(e,t){if(this.suspended)return o(null);const i=this.view.toMap(m(e,t));return o(new d({attributes:{},geometry:i}))}update(e){this._fetchQueue.pause(),this._fetchQueue.state=e.state,this._tileStrategy.update(e),this._fetchQueue.resume();const{extent:t,resolution:i,scale:s}=e.state,r=this._tileInfoView.getClosestInfoForScale(s);if(this.layer.raster){var a;if(!this.useProgressiveUpdate||this._needBlockCacheUpdate){const e=this._srcResolutions[r.level],s=t.toJSON?t:p.fromJSON(t);w(this._blockCacheRegistryUrl,this._blockCacheRegistryId,s,i,e,this.layer.raster.ioConfig.sampling)}this._needBlockCacheUpdate=!1,(null==(a=this._previousLOD)?void 0:a.level)!==r.level&&(this._previousLOD=r,null!=this._symbolizerParams&&this._updateSymbolizerParams())}this.notifyChange("updating")}attach(){this.layer.increaseRasterJobHandlerUsage(),T().supportsTextureFloat||(this.useWebGLForProcessing=!1),this.layer.raster&&(this.layer.raster.ioConfig.allowPartialFill=!0),this._initializeTileInfo(),this._tileInfoView=new v(this.tileInfo,this.fullExtent),this._fetchQueue=new x({tileInfoView:this._tileInfoView,concurrency:10,process:(e,t)=>this.fetchTile(e,t)}),this._tileStrategy=new S({cachePolicy:this.useProgressiveUpdate?"keep":"purge",resampling:!1,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),cacheSize:this.useProgressiveUpdate?40:0,tileInfoView:this._tileInfoView}),this._bitmapView=new j(this._tileInfoView),this.container.addChild(this._bitmapView),this.handles.add([y(this,["layer.bandIds","layer.renderer"],(()=>this._redrawDebounced().catch((e=>{n(e)||L.error(e)})))),y(this,["layer.interpolation"],((e,t)=>{"majority"!==e&&"majority"!==t||!this._canUseMajorityInterpolationOnDataSource()?this._redrawDebounced().catch((e=>{n(e)||L.error(e)})):this.refreshDebounced()})),y(this,["layer.multidimensionalDefinition"],this.refreshDebounced)],"attach"),this._updateBlockCacheRegistry()}detach(){this.handles.remove("attach"),this.layer.decreaseRasterJobHandlerUsage(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null,I(this._blockCacheRegistryUrl,this._blockCacheRegistryId)}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){!this.hasTilingEffects&&this.useProgressiveUpdate||(this._abortController&&this._abortController.abort(),this._abortController=h(),0===this._fetchQueue.length&&this._redrawImage(this._abortController.signal).then((()=>{this._globalUpdateRequested=!1,this.requestUpdate()}))),this.requestUpdate()}createFetchPopupFeaturesQueryGeometry(e,t){return C(e,t,this.view)}async doRefresh(){this.updateRequested||this.suspended||(this._updateSymbolizerParams(),this._updateBlockCacheRegistry(),this._fetchQueue.reset(),this._tileStrategy.tiles.forEach((e=>this._enqueueTileFetch(e))),this.notifyChange("updating"))}isUpdating(){return this._fetchQueue.length>0||this._globalUpdateRequested}acquireTile(e){const t=this._bitmapView.createTile(e),i=t.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(q,t.key),i.resolution=this._tileInfoView.getTileResolution(t.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(t),this.requestUpdate(),this._needBlockCacheUpdate=!0,this._globalUpdateRequested=this.hasTilingEffects||!this.useProgressiveUpdate,t}releaseTile(e){this._fetchQueue.abort(e.key.id),this._bitmapView.removeChild(e),e.once("detach",(()=>{e.destroy(),this.requestUpdate()})),this.requestUpdate()}fetchTile(e,s){const r=!t(s)&&s.signal,a=this._canUseWebGLForProcessing(),l={tileInfo:this.tileInfo,signal:i(r),registryId:this._blockCacheRegistryId,requestRawData:a,srcResolution:this._srcResolutions[e.level],datumTransformation:this.datumTransformation,interpolation:a?"nearest":this.layer.interpolation};return this.layer.fetchTile(e.level,e.row,e.col,l)}_canUseWebGLForProcessing(){return this.useWebGLForProcessing&&this.layer.symbolizer.canRenderInWebGL&&!("majority"===this.layer.interpolation&&this._canUseMajorityInterpolationOnDataSource())}_initializeTileInfo(){const e=this.view.spatialReference,t=new u({x:this.fullExtent.xmin,y:this.fullExtent.ymax,spatialReference:e}),{scales:i,srcResolutions:s}=f(this.layer.rasterInfo,e),r=b.create({spatialReference:e,size:512,scales:i});(0===r.origin.x||r.origin.x>t.x)&&(r.origin=t),this._set("tileInfo",r),this._srcResolutions=null!=s?s:[]}async _enqueueTileFetch(e,t){if(!this._fetchQueue.has(e.key.id)){try{const t=await this._fetchQueue.push(e.key),{bandIds:i}=this.layer;let s=!this.useProgressiveUpdate||this.hasTilingEffects&&!this._globalSymbolizerParams;if(this._globalUpdateRequested&&!this.moving&&0===this._fetchQueue.length){s=!1;try{await this._redrawImage(this._abortController&&this._abortController.signal)}catch(e){n(e)&&L.error(e)}this._globalUpdateRequested=!1}const r=this._canUseWebGLForProcessing();if(r&&!this.hasTilingEffects&&null==this._symbolizerParams&&this._updateSymbolizerParams(),t&&t.pixelBlock){if(r)e.bitmap.source=t.pixelBlock,e.bitmap.isRendereredSource=!1;else{const i={extent:t.extent,pixelBlock:t.pixelBlock},s=await this.layer.applyRenderer(i,this.hasTilingEffects&&this._globalSymbolizerParams&&"stretch"===this._globalSymbolizerParams.type?this._globalSymbolizerParams:null);e.bitmap.rawPixelData=i,e.bitmap.source=s,e.bitmap.isRendereredSource=!0}e.bitmap.symbolizerParameters=r?this._globalSymbolizerParams||this._symbolizerParams:null,!e.bitmap.transformGrid&&r?e.bitmap.transformGrid=t.transformGrid:e.bitmap.transformGrid=null}else{const t=this._createEmptyTilePixelBlock();e.bitmap.source=t,e.bitmap.symbolizerParameters=r?this._symbolizerParams:null,e.bitmap.transformGrid=null}e.bitmap.bandIds=i,e.bitmap.width=this._tileInfoView.tileInfo.size[0],e.bitmap.height=this._tileInfoView.tileInfo.size[1],e.bitmap.interpolation=this._getLayerInterpolation(),e.bitmap.suspended=s,e.bitmap.invalidateTexture(),e.once("attach",(()=>this.requestUpdate())),this._bitmapView.addChild(e)}catch(e){n(e)||L.error(e)}this.requestUpdate()}}async _redrawImage(e){this.layer.updateRenderer(),this.hasTilingEffects?await this._updateGlobalSymbolizerParams(e):(this._updateSymbolizerParams(),this._globalSymbolizerParams=null);const{bandIds:t}=this.layer,i=this._bitmapView.children.map((async e=>{const i=this._canUseWebGLForProcessing();i?e.bitmap.isRendereredSource=!1:(e.bitmap.source=await this.layer.applyRenderer(e.bitmap.rawPixelData,this.hasTilingEffects&&this._globalSymbolizerParams&&"stretch"===this._globalSymbolizerParams.type?this._globalSymbolizerParams:null),e.bitmap.isRendereredSource=!0),e.bitmap.symbolizerParameters=i?this._globalSymbolizerParams||this._symbolizerParams:null,e.bitmap.bandIds=t,e.bitmap.interpolation=this._getLayerInterpolation(),e.bitmap.suspended=!1}));await c(i),this.container.requestRender()}_createEmptyTilePixelBlock(){if(!this._emptyTilePixelBlock){const e=this._tileInfoView.tileInfo.size[0],t=this._tileInfoView.tileInfo.size[1];this._emptyTilePixelBlock=new _({width:e,height:t,pixels:[new Uint8Array(e*t)],mask:new Uint8Array(e*t),pixelType:"u8"})}return this._emptyTilePixelBlock}async _updateGlobalSymbolizerParams(e){const t={srcResolution:this._srcResolutions[this._previousLOD.level],registryId:this._blockCacheRegistryId,signal:e},i=await this.layer.fetchPixels(this.view.extent,this.view.width,this.view.height,t);if(!i||!i.pixelBlock)return;const s=this.layer.symbolizer.generateWebGLParameters({pixelBlock:g(i.pixelBlock,this.layer.bandIds),isGCS:this.view.spatialReference.isGeographic,resolution:{x:this._previousLOD.resolution,y:this._previousLOD.resolution},bandIds:this.layer.bandIds});!this._canUseWebGLForProcessing()&&s&&"stretch"===s.type&&this.layer.renderer&&"raster-stretch"===this.layer.renderer.type&&(s.factor=s.factor.map((e=>255*e)),s.outMin=Math.round(255*s.outMin),s.outMax=Math.round(255*s.outMax)),this._globalSymbolizerParams=s}_updateSymbolizerParams(){this._symbolizerParams=this.layer.symbolizer.generateWebGLParameters({pixelBlock:null,isGCS:this.view.spatialReference.isGeographic,resolution:{x:this._previousLOD.resolution,y:this._previousLOD.resolution},bandIds:this.layer.bandIds})}_updateBlockCacheRegistry(){const{url:e,rasterInfo:t,multidimensionalDefinition:i,raster:s}=this.layer,r=null!=t&&t.multidimensionalInfo?s.getSliceIndex(i):null,a=U(e,r);a!==this._blockCacheRegistryUrl&&(null==this._blockCacheRegistryUrl&&I(this._blockCacheRegistryUrl,this._blockCacheRegistryId),this._blockCacheRegistryId=P(a,this.layer.raster.rasterInfo),this._blockCacheRegistryUrl=a)}_canUseMajorityInterpolationOnDataSource(){const{bandCount:e,attributeTable:t,colormap:i,pixelType:s}=this.layer.rasterInfo;return 1===e&&(null!=t||null!=i||"u8"===s||"s8"===s)}_getLayerInterpolation(){const e=this.layer.renderer.type;return"raster-colormap"===e||"unique-value"===e||"class-breaks"===e?"nearest":this.layer.interpolation}};e([r()],D.prototype,"useProgressiveUpdate",null),D=e([a("esri.views.2d.layers.ImageryTileLayerView2D")],D);var G=D;export default G;

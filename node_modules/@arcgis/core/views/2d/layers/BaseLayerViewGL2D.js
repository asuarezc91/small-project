/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../core/has.js";import"../../../core/Logger.js";import"../../../core/accessorSupport/ensureType.js";import{property as t}from"../../../core/accessorSupport/decorators/property.js";import{subclass as s}from"../../../core/accessorSupport/decorators/subclass.js";import"../../../core/urlUtils.js";import"../../../core/uuid.js";import"../../../portal/support/resourceExtension.js";import{closeRings as r}from"../../../geometry/support/coordsUtils.js";import{create as o}from"../../../geometry/support/aaBoundingRect.js";import{earcut as i}from"../../../core/libs/earcut/earcut.js";import{RefreshableLayerView as n}from"../../layers/RefreshableLayerView.js";import{checkProjectionSupport as c,project as a}from"../../../layers/graphics/data/projectionSupport.js";import"../tiling/TileKey.js";import"../tiling/PagedTileQueue.js";import l from"../tiling/TileInfoView.js";import"../tiling/TileQueue.js";import"../tiling/TileStrategy.js";import p from"../../layers/LayerView.js";import{analyzeRings as h}from"./support/util.js";import{tessellate as d,StandardTessellationCallbacks as f}from"../engine/webgl/TurboLine.js";import{normalizeCentralMeridian as u}from"./graphics/graphicsUtils.js";import{LayerView2DMixin as m}from"./LayerView2D.js";import{DisplayGL as y}from"./support/DisplayGL.js";const x=new Set,g=[],v=[];class T{constructor(e,t,s,r,i,n,c,a=[0,0],l=o()){this.id=e,this.level=t,this.row=s,this.col=r,this.world=i,this.resolution=n,this.scale=c,this.coords=a,this.bounds=l}}let w=class extends(n(m(p))){constructor(e){super(e),this._tileMap=new Map,this.container=new y(this),this.layer=null,this.tiles=[],this._renderTarget={framebufferObject:null,viewport:[0,0,0,0]}}get _tileInfoView(){const e=this.layer&&this.layer.tileInfo;return e?new l(e):null}get context(){return this.view._stage.context.gl}attach(){}detach(){}requestRender(){this.container.requestRender()}tilesChanged(e,t){}async doRefresh(){}isUpdating(){return!1}update(e){const t=this._tileInfoView,s=this.tiles;if(t){const r=t.getTileCoverage(e.state,0),{spans:o,lodInfo:i}=r,{level:n}=i;if(o.length)for(const{row:e,colFrom:t,colTo:r}of o)for(let o=t;o<=r;o++){const t=i.normalizeCol(o),r=i.getWorldForColumn(o),c=`${n}/${e}/${t}/${r}`;if(!this._tileMap.has(c)){const o=new T(c,n,e,t,r,i.resolution,i.scale);i.getTileCoords(o.coords,o,!1),i.getTileBounds(o.bounds,o,!0),this._tileMap.set(c,o),s.push(o),g.push(o)}x.add(c)}}for(let e=s.length-1;e>=0;e--){const t=s[e];x.has(t.id)||(s.splice(e,1),v.push(t),this._tileMap.delete(t.id))}(g.length||v.length)&&(this.tilesChanged(g,v),g.length=v.length=0),x.clear(),this.requestRender()}moveStart(){}viewChange(){this.requestUpdate()}moveEnd(){}bindRenderTarget(){this.context.bindFramebuffer(this.context.FRAMEBUFFER,this._renderTarget.framebufferObject),this.context.viewport(this._renderTarget.viewport[0],this._renderTarget.viewport[1],this._renderTarget.viewport[2],this._renderTarget.viewport[3])}getRenderTarget(){return this._renderTarget}async tessellateExtent(e){const t={vertices:[],indices:[]},s=await this._projectAndNormalizeGeometry(e),r=t.vertices.length;return t.vertices.push({x:s.xmin,y:s.ymin,xOffset:0,yOffset:0,uTexcoord:0,vTexcoord:0,distance:0}),t.vertices.push({x:s.xmax,y:s.ymin,xOffset:0,yOffset:0,uTexcoord:1,vTexcoord:0,distance:0}),t.vertices.push({x:s.xmin,y:s.ymax,xOffset:0,yOffset:0,uTexcoord:0,vTexcoord:1,distance:0}),t.vertices.push({x:s.xmax,y:s.ymax,xOffset:0,yOffset:0,uTexcoord:1,vTexcoord:1,distance:0}),t.indices.push(r+0,r+1,r+2,r+1,r+3,r+2),t}async tessellatePoint(e,t){const s=await this._projectAndNormalizeGeometry(e);return this._tessellatePoints([s],t)}async tessellateMultipoint(e,t){const s=await this._projectAndNormalizeGeometry(e),r=s.points.map((e=>({x:e[0],y:e[1],spatialReference:s.spatialReference})));return this._tessellatePoints(r,t)}async _tessellatePoints(e,t){const s={vertices:[],indices:[]};for(const r of e){const e=s.vertices.length;s.vertices.push({x:r.x,y:r.y,xOffset:t.x,yOffset:t.y+t.height,uTexcoord:0,vTexcoord:0,distance:0}),s.vertices.push({x:r.x,y:r.y,xOffset:t.x+t.width,yOffset:t.y+t.height,uTexcoord:1,vTexcoord:0,distance:0}),s.vertices.push({x:r.x,y:r.y,xOffset:t.x,yOffset:t.y,uTexcoord:0,vTexcoord:1,distance:0}),s.vertices.push({x:r.x,y:r.y,xOffset:t.x+t.width,yOffset:t.y,uTexcoord:1,vTexcoord:1,distance:0}),s.indices.push(e+0,e+1,e+2,e+1,e+3,e+2)}return s}async tessellatePolyline(e,t){const s={vertices:[],indices:[]},r=(await this._projectAndNormalizeGeometry(e)).paths;if(!r||!r.length)return s;let o;const i=new f(((e,r,i,n,c,a,l,p,h)=>{const d=s.vertices.length;return s.vertices.push({x:e,y:-r,xOffset:c*t/2,yOffset:a*t/2,uTexcoord:h/o,vTexcoord:(p+1)/2,distance:h}),d}),((e,t,r)=>{s.indices.push(e,t,r)}));for(const e of r){o=0;for(let t=1;t<e.length;++t){const s=e[t][0]-e[t-1][0],r=e[t][1]-e[t-1][1];o+=Math.sqrt(s*s+r*r)}const t=e.map((e=>({x:e[0],y:-e[1]})));d(t,j,i)}return s}async tessellatePolygon(e){const t={vertices:[],indices:[]},s=await this._projectAndNormalizeGeometry(e),o=s.rings;if(!o||!o.length)return t;r(s);for(const e of s.rings)for(const t of e)t[1]=-t[1];let i=1/0,n=1/0,c=-1/0,a=-1/0;return h(s.rings,(()=>{}),((e,t,s)=>{for(let r=e;r<t;r+=2)i=Math.min(i,s[r]),n=Math.min(n,s[r+1]),c=Math.max(c,s[r]),a=Math.max(a,s[r+1])})),h(s.rings,(()=>{}),((e,s,r,o)=>{this._invokeEarcut(t,e,s,r,o,[i,n,c,a])})),t}_invokeEarcut(e,t,s,r,o,n){const c=r.slice(t,s),a=i(c,o,2),l=e.vertices.length;for(let t=0;t<c.length;t+=2){const s=c[t],r=c[t+1];e.vertices.push({x:s,y:-r,xOffset:0,yOffset:0,uTexcoord:(s-n[0])/(n[2]-n[0]),vTexcoord:1-(r-n[1])/(n[3]-n[1]),distance:0})}for(let t=0;t<a.length;++t)e.indices.push(l+a[t])}async _projectAndNormalizeGeometry(e){await c(e.spatialReference,this.view.spatialReference);const t=u(e);return a(t,e.spatialReference,this.view.spatialReference)}};e([t({dependsOn:["layer.loaded"]})],w.prototype,"_tileInfoView",null),e([t()],w.prototype,"layer",void 0),e([t({dependsOn:["view"]})],w.prototype,"context",null),w=e([s("esri.views.2d.layers.BaseLayerViewGL2D")],w);const j={trackDistance:!0,wrapDistance:1e11,thin:!1,initialDistance:0,enableOuterBisectorSplit:!0,outerBisectorAutoSplitThreshold:1/3.8,enableInnerBisectorSplit:!0,innerBisectorAutoSplitThreshold:1/3.8};var _=w;export default _;

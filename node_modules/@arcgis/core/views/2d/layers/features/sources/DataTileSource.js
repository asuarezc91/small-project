/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{isSome as e}from"../../../../../core/maybe.js";import t from"../../../../../core/Evented.js";import{diff as s}from"../../../../../core/accessorSupport/diffUtils.js";class r{constructor(e){this._abortController=new AbortController,this.requests={pending:new Array,done:new Array},this.tile=e}get signal(){return this._abortController.signal}add(e){this.requests.done.push(e),e.request.end&&(this.resolved=!0)}abort(){this._abortController.abort()}}class o{constructor(e){this.events=new t,this._subscriptions=new Map,this._serviceQueryInfo={outSpatialReference:e.outSR},this._serviceInfo=e.serviceInfo,this._onRequest=e.onRequest}async queryLastEditDate(){throw new Error("Service does not support query type")}async query(e,t){throw new Error("Service does not support query")}get geometryType(){return this._serviceInfo.geometryType}update(e){s(e,this._sourceQueryInfo)&&(this._sourceQueryInfo=e)}updateSubscriptions(){}setViewState(e){}subscribe(e){const t=new r(e);this._subscriptions.set(e.id,t)}unsubscribe(t){const s=this.get(t.id);e(s)&&s.abort(),this._subscriptions.delete(t.id)}pause(){}resume(){}get(e){return this._subscriptions.has(e)?this._subscriptions.get(e):null}enableEvent(e,t){}}export{o as DataTileSource,r as DataTileSubscription};

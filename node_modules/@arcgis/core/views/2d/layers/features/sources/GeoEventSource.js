/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import"../../../../../core/has.js";import{andThen as e,isSome as t,unwrapOr as s}from"../../../../../core/maybe.js";import r from"../../../../../layers/graphics/OptimizedGeometry.js";import{convertFromFeature as o,quantizeOptimizedGeometry as n,quantizeX as i,quantizeY as a}from"../../../../../layers/graphics/featureConversionUtils.js";import{FeatureSetReaderJSON as c}from"../support/FeatureSetReaderJSON.js";import{r as u}from"../../../../../chunks/rbush.js";import h from"../../../../../layers/graphics/data/StreamFeatureManager.js";import{createConnection as d}from"../../../../../layers/graphics/sources/connections/createConnection.js";import{DataTileSource as m}from"./DataTileSource.js";function p(e,t){const s=e.weakClone(),o=i(t,e.geometry.coords[0]),n=a(t,e.geometry.coords[1]);return s.geometry=new r([],[o,n]),s}function l(e,t){const s=u(9,function(e){switch(e){case"esriGeometryPoint":return e=>({minX:e.geometry.coords[0],minY:e.geometry.coords[1],maxX:e.geometry.coords[0],maxY:e.geometry.coords[1]});default:return e=>{let t=1/0,s=1/0,r=-1/0,o=-1/0;return e.geometry.forEachVertex(((e,n)=>{t=Math.min(t,e),s=Math.min(s,n),r=Math.max(r,e),o=Math.max(o,n)})),{minX:t,minY:s,maxX:r,maxY:o}}}}(t));return s.load(e),s}function _(e,t){return e.search({minX:t.bounds[0],minY:t.bounds[1],maxX:t.bounds[2],maxY:t.bounds[3]})}class f{constructor(e,t){this.onUpdate=e,this._geometryType=t,this._objectIdToFeature=new Map}get _features(){const e=[];return this._objectIdToFeature.forEach((t=>e.push(t))),e}add(e){this._objectIdToFeature.set(e.objectId,e),this._index=null}get(e){return this._objectIdToFeature.has(e)?this._objectIdToFeature.get(e):null}forEach(e){this._objectIdToFeature.forEach(e)}search(e){return this._index||(this._index=l(this._features,this._geometryType)),_(this._index,e)}removeById(e){const t=this._objectIdToFeature.get(e);return t?(this._objectIdToFeature.delete(e),this._index=null,t):null}update(e,t){this.onUpdate(e,t)}get size(){return this._objectIdToFeature.size}}class g extends m{constructor(e){super(e),this.type="geoevent",this._dataReceiveEventEnabled=!1,this._updateInfo={websocket:0,client:0};const{outSR:t}=e,{geometryType:s,objectIdField:o,timeInfo:i,purgeOptions:a,source:c,spatialReference:u,serviceFilter:m,maxReconnectionAttempts:l,maxReconnectionInterval:_,updateInterval:g}=e.serviceInfo,y=new f(this._onUpdate.bind(this),s),b=new h(y,o,i,a),I=d(c,u,t,s,m,l,_);this._store=y,this._manager=b,this._connection=I,this._quantize=function(e){switch(e){case"esriGeometryPoint":return p;case"esriGeometryPolygon":case"esriGeometryPolyline":default:return(t,s)=>{const o=t.weakClone(),i=new r,a=n(i,t.geometry,!1,!1,e,s,!1,!1);return o.geometry=a,o}}}(s),this._handles=[this._connection.on("feature",(e=>this._onFeature(e))),this._connection.watch("connectionStatus",(e=>this.events.emit("connectionStatus",e))),this._connection.watch("errorString",(e=>this.events.emit("errorString",e)))];let v=performance.now();this._updateIntervalId=setInterval((()=>{const t=performance.now(),s=t-v;if(s>2500){v=t;const e=Math.round(this._updateInfo.client/(s/1e3)),r=Math.round(this._updateInfo.websocket/(s/1e3));this._updateInfo.client=0,this._updateInfo.websocket=0,this.events.emit("updateRate",{client:e,websocket:r})}e.canAcceptRequest()&&this._manager.checkForUpdates()}),g)}destroy(){clearInterval(this._updateIntervalId),this._handles.forEach((e=>e.remove())),this._connection.destroy()}_fetchDataTile(){}enableEvent(e,t){"data-received"===e&&(this._dataReceiveEventEnabled=t)}get updating(){return!1}subscribe(e){super.subscribe(e);const t=this._getTileFeatures(e);this._onRequest({tile:e,id:e.key.id,features:t,end:!0},"new")}unsubscribe(e){super.unsubscribe(e)}forEachRequest(e,t){const s=this._subscriptions.get(e),{tile:r,signal:o}=s;t({tile:r,id:e,features:this._getTileFeatures(r),end:!0},{signal:o})}async resend(e){this._subscriptions.forEach((t=>{const{tile:s}=t,r={tile:s,id:s.id,features:this._getTileFeatures(s),end:!0};this._onRequest(r,"update",e)}))}_getTileFeatures(e){const t=this._store.search(e).map((t=>this._quantize(t,e.transform)));return c.fromOptimizedFeatures(t,this.geometryType,e.transform)}_onFeature(e){this._updateInfo.websocket++;try{this._dataReceiveEventEnabled&&this.events.emit("feature",e);const t=o(e,this.geometryType,!1,!1,this._serviceInfo.objectIdField);this._manager.add(t)}catch(e){}}async _onUpdate(r,o){const n=e(r,(e=>l(e,this.geometryType))),i=e(o,(e=>l(e,this.geometryType)));t(r)&&(this._updateInfo.client+=r.length),this._subscriptions.forEach(((t,r)=>{const o=t.tile,a=e(n,(e=>_(e,o))),u=e(a,(e=>e.map((e=>this._quantize(e,o.transform))))),h=e(u,(e=>c.fromOptimizedFeatures(e,this.geometryType,o.transform))),d=e(i,(e=>_(e,o))),m=e(d,(e=>e.map((e=>e.objectId))));this._onRequest({tile:o,id:r,features:h,remove:s(m,[]),end:!0},"update")}))}}export{g as GeoEventSource};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import e from"../../../../../core/has.js";import{throwIfAborted as t,isAbortError as r}from"../../../../../core/promiseUtils.js";import{BaseFeatureSource as o}from"./BaseFeatureSource.js";const s=e("esri-featurelayer-webgl"),i=e("esri-mobile"),a={maxDrillLevel:s&&"object"==typeof s&&null!=s.maxDrillLevel?s.maxDrillLevel:i?1:4,maxRecordCountFactor:s&&"object"==typeof s&&null!=s.maxRecordCountFactor?s.maxRecordCountFactor:i?1:3};class n extends o{constructor(e){super(e)}async _fetchDataTile(e){const o=this._serviceInfo.capabilities.query.supportsMaxRecordCountFactor,s=this._subscriptions.get(e.key.id),i=s.signal,n=e.getQuantizationParameters();let c=0;const u=async(l,d)=>{const m=this._sourceQueryInfo,f=this._createQuery(l,{maxRecordCountFactor:o?a.maxRecordCountFactor:void 0,returnExceededLimitFeatures:!1,quantizationParameters:n});c++;try{const r=await this._queue.push({tile:e,query:f,signal:i,depth:d});if(c--,t(i),!r)return;if(m!==this._sourceQueryInfo)return void u(l,d);if(r.exceededTransferLimit&&d<a.maxDrillLevel){for(const e of l.createChildTiles())u(e,d+1);return}const o={tile:e,id:e.id,features:r,end:0===c};s.requests.done.push({query:f,request:o}),this._onRequest(o,"new")}catch(t){r(t)||this._onRequest({tile:e,id:e.id,features:null,end:!0},"new")}};u(e,0)}}export{n as DrillDownFeatureSource};

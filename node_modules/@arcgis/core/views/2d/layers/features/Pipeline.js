/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../chunks/tslib.es6.js";import"../../../../core/has.js";import"../../../../core/Logger.js";import"../../../../core/accessorSupport/ensureType.js";import{property as e}from"../../../../core/accessorSupport/decorators/property.js";import{subclass as r}from"../../../../core/accessorSupport/decorators/subclass.js";import"../../../../core/urlUtils.js";import"../../../../core/uuid.js";import"../../../../portal/support/resourceExtension.js";import{all as o}from"../../../../core/promiseUtils.js";import{HandleOwner as s}from"../../../../core/HandleOwner.js";import i from"../../../../layers/support/TileInfo.js";import n from"../../ViewState.js";import l from"../../tiling/TileInfoView.js";import c from"./support/TileStore.js";import{loadProcessorModule as a}from"./processors.js";import{UpdateToken as p}from"./support/UpdateToken.js";import h from"./controllers/FeatureController2D.js";const u=new Set;function d(){return u}let m=class extends s{constructor(){super(...arguments),this.controller=null,this.processor=null,this.remoteClient=null,this.tileStore=null,this.service=null,this.viewState=null}initialize(){this.handles.add(this.watch("updating",(t=>{this.remoteClient.invoke("setUpdating",t).catch((t=>{}))})))}destroy(){var t,e,r;null==(t=this.controller)||t.destroy(),null==(e=this.processor)||e.destroy(),null==(r=this.tileStore)||r.destroy(),this.controller=this.processor=this.tileStore=this.remoteClient=null}get updating(){return!this.controller||this.controller.updating}async startup({service:t,config:e,tileInfo:r}){if(this.service=t,!this.tileStore){const t=new l(i.fromJSON(r));this.tileStore=new c(t)}await this._configure(e),this.tileStore.clear()}async updateTiles(t){this.tileStore.updateTiles(t)}async update({config:t,pause:e}){const r=p.empty();return await o([this.processor.update(r,t),this.controller.update(r,t,e)]),r.toJSON()}async invalidate(t){const e=p.create(t),r=this.controller.invalidate(e);return await this.remoteClient.invoke("setUpdating",this.updating),r}setViewState(t){const e=n.fromJSON(t);this._set("viewState",e)}async _configure(t){await o([this._handleControllerConfig(t),this._handleProcessorConfig(t)]),this.controller.processor=this.processor,await this.update({config:t})}async _handleControllerConfig(t){const e=await this._createController(this.service,t);return await e.startup(),e}async _handleProcessorConfig(t){return this._createProcessor(this.service,t)}async _createController(t,e){this.controller&&this.controller.destroy();const{tileStore:r,remoteClient:o}=this,s=new h({service:t,config:e,tileStore:r,remoteClient:o});return this.controller=s,s}async _createProcessor(t,e){const r=e.schema.processors[0].type,o=(await a(r)).default,{remoteClient:s,tileStore:i}=this,n=new o({service:t,config:e,tileStore:i,remoteClient:s});return this.processor&&this.processor.destroy(),this.processor=n,n}};t([e()],m.prototype,"controller",void 0),t([e()],m.prototype,"processor",void 0),t([e({dependsOn:["controller.updating"]})],m.prototype,"updating",null),t([e()],m.prototype,"viewState",void 0),m=t([r("esri.views.2d.layers.features.Pipeline")],m);var f=m;export default f;export{d as getInstances};

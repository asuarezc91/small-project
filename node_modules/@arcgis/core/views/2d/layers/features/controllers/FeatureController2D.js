/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import t from"../../../../../core/has.js";import{isNone as s}from"../../../../../core/maybe.js";import"../../../../../core/Logger.js";import"../../../../../core/accessorSupport/ensureType.js";import{property as r}from"../../../../../core/accessorSupport/decorators/property.js";import{subclass as i}from"../../../../../core/accessorSupport/decorators/subclass.js";import"../../../../../core/urlUtils.js";import"../../../../../core/uuid.js";import"../../../../../portal/support/resourceExtension.js";import{ignoreAbortErrors as a,createResolver as o,all as n,after as u,throwIfAborted as h,throwIfNotAbortError as d,isAbortError as c}from"../../../../../core/promiseUtils.js";import{whenFalseOnce as p}from"../../../../../core/watchUtils.js";import{convertToGeometry as l}from"../../../../../layers/graphics/featureConversionUtils.js";import g from"../../../../../layers/support/FieldsIndex.js";import{HandleOwner as f}from"../../../../../core/HandleOwner.js";import{FeatureSetReaderJSON as m}from"../support/FeatureSetReaderJSON.js";import{QueueProcessor as y}from"../../../../support/QueueProcessor.js";import _ from"../support/AttributeStore.js";import{ComputedAttributeStorage as S}from"../support/ComputedAttributeStorage.js";import{FeatureStore2D as v}from"../FeatureStore2D.js";import b from"../../../../../layers/graphics/data/QueryEngine.js";import{UpdateToken as w}from"../support/UpdateToken.js";import{Source2D as I}from"../Source2D.js";import{ClusterStore as T}from"../support/ClusterStore.js";function C(e){if(!c(e)&&!function(e){return"worker:port-closed"===e.name}(e))throw e}let j=class extends f{constructor(){super(...arguments),this._storage=new S,this._markedIdsBufId=this._storage.createBitset(),this._lastCleanup=performance.now(),this._cleanupNeeded=!1,this._invalidated=!1,this._tileToResolver=new Map,this.tileStore=null,this.config=null,this.processor=null,this.remoteClient=null,this.service=null,this._editing=!1}initialize(){this._initAttributeStore(),this._initStores(),this._initQueryEngine(),this._initSource(),this._updateQueue=new y({concurrency:4,process:(e,t)=>this._onDisplayTilePatch(e,{signal:t})}),this.handles.add([this.tileStore.on("update",this.onTileUpdate.bind(this)),this.watch("updating",(e=>!e&&this.onIdle()))])}async startup(){this._initAttributeStore()}_initSource(){this._source=new I(this.service,this.spatialReference,this.tileStore.tileScheme),this._source.onDisplayTilePatch=(e,t)=>(this._invalidated=!0,this._patchTile(e,t)),this._source.canAcceptPatch=()=>this._updateQueue.length<50;const e=this._source.sourceEvents;if("geoevent"===e.type){const t=e.events;this.handles.add([t.on("connectionStatus",(e=>this.remoteClient.invoke("setProperty",{propertyName:"connectionStatus",value:e}).catch(C))),t.on("errorString",(e=>this.remoteClient.invoke("setProperty",{propertyName:"errorString",value:e}).catch(C))),t.on("feature",(e=>this.remoteClient.invoke("emitEvent",{name:"data-received",event:{attributes:e.attributes,centroid:e.centroid,geometry:e.geometry}}).catch(C))),t.on("updateRate",(e=>this.remoteClient.invoke("emitEvent",{name:"update-rate",event:{...e}}).catch(C)))])}}_initAttributeStore(){this.attributeStore?this.attributeStore.invalidateResources():this.attributeStore=new _({type:"remote",initialize:(e,t)=>a(this.remoteClient.invoke("tileRenderer.featuresView.attributeView.initialize",e,{signal:t}).catch(C)),update:(e,t)=>a(this.remoteClient.invoke("tileRenderer.featuresView.attributeView.requestUpdate",e,{signal:t}).catch(C)),render:e=>a(this.remoteClient.invoke("tileRenderer.featuresView.requestRender",void 0,{signal:e}).catch(C))},this.config)}_initStores(){const e={geometryInfo:{geometryType:this.service.geometryType,hasM:!1,hasZ:!1},spatialReference:this.spatialReference,fieldsIndex:this.fieldsIndex,fields:this.service.fields};this.featureStore=new v(e,this._storage),this.aggregateStore=new T(e,this.spatialReference,this._storage),this.handles.add(this.aggregateStore.events.on("valueRangesChanged",(e=>{this.remoteClient.invoke("emitEvent",{name:"valueRangesChanged",event:{valueRanges:e.valueRanges}}).catch(C)})))}_initQueryEngine(){var e;const t=this;null==(e=this.queryEngine)||e.destroy(),this.queryEngine=new b({definitionExpression:this.config.definitionExpression,fields:this.service.fields,geometryType:this.service.geometryType,objectIdField:this.service.objectIdField,hasM:!1,hasZ:!1,spatialReference:this.spatialReference.toJSON(),cacheSpatialQueries:!0,featureStore:this.featureStore,aggregateAdapter:{getFeatureObjectIds:e=>t.aggregateStore.getFeatureDisplayIdsForAggregate(e).map((e=>t.getObjectId(e)))},timeInfo:this.service.timeInfo})}destroy(){this._updateQueue.destroy(),this._source.destroy(),this.queryEngine.destroy(),this.attributeStore&&this.attributeStore.destroy()}get fieldsIndex(){return new g(this.service.fields)}get hasAggregates(){return!!this.config.schema.targets.aggregate}get spatialReference(){return this.tileStore.tileScheme.spatialReference}get updating(){return this.isUpdating()}isUpdating(){return this._source.updating||!!this._updateQueue.length}enableEvent(e){this._source.enableEvent(e.name,e.value)}async invalidate(e){if(!e.any())return;t("esri-2d-update-debug")&&e.describe();const s=this.tileStore.tiles.map((({key:e})=>{const t=o();return this._tileToResolver.set(e.id,t),t.promise})),r=this._updateQueue.takeAll();this._updateQueue.resume(),this.hasAggregates&&e.mesh&&e.targets.aggregate&&!e.queryFilter?this._repushAggregateMeshTiles(e):(this._source.resubscribe(e),n(s).then((()=>{this._source.resume()})),e.mesh&&await p(this,"updating")),this.notifyChange("updating"),await n(s),this._updateQueue.pause();for(const e of r)this._patchTile(e);e.source&&(this._cleanupNeeded=!0)}resume(){return this._updateQueue.resume(),this._source.resume()}async update(e,t,s=!1){this._editing&&await p(this,"updating"),s&&(this._source.pause(),this._updateQueue.pause()),this._set("config",t),this._schema=t.schema,this._initQueryEngine(),await n([this._source.update(e,t.schema.source),this.featureStore.updateSchema(e,t.schema.targets.feature),this.attributeStore.update(e,t),this.attributeStore.updateFilters(e,this)]),await this.aggregateStore.updateSchema(e,t.schema.targets.aggregate)}async refresh(){this._source.resubscribe(w.all(),!0),this._cleanupNeeded=!0,this.notifyChange("updating"),await p(this,"updating",!0)}onTileUpdate(e){this.aggregateStore.onTileUpdate(e);for(const t of e.added)this._source.subscribe(t),this._level=t.level;for(const t of e.removed)this._source.unsubscribe(t),this._cleanupNeeded=!0,this._tileToResolver.has(t.id)&&(this._tileToResolver.get(t.id).resolve(),this._tileToResolver.delete(t.id));this.notifyChange("updating")}onIdle(){this.hasAggregates&&this._invalidated&&(this._repushAggregateMeshTiles(),this._invalidated=!1),this._markAndSweep()}async onEdits(e){if(this._editing)return await p(this,"updating"),await u(16),this.onEdits(e);this._editing=!0;try{await this._source.onEdits(e),await p(this,"updating")}catch(e){}this._editing=!1}queryExtent(e){return this.queryEngine.executeQueryForExtent(e)}queryFeatures(e){return this.queryEngine.executeQuery(e)}queryFeatureCount(e){return this.queryEngine.executeQueryForCount(e)}queryLatestObservations(e){return this.queryEngine.executeQueryForLatestObservations(e)}queryObjectIds(e){return this.queryEngine.executeQueryForIds(e)}async queryStatistics(){return{...this.featureStore.storeStatistics,displayedFeatureCount:0,displayedVertexCount:0,displayPreProcessTime:0}}getObjectId(e){return this.featureStore.lookupObjectId(e,this._storage)}getDisplayId(e){if(this._schema.targets.aggregate){const t=this.aggregateStore.getDisplayId(e);if(s(t)){const t=this.featureStore.lookupDisplayId(e);return this.aggregateStore.getDisplayIdForReferenceId(t)}return t}return this.featureStore.lookupDisplayId(e)}getFeature(e){const t=this.featureStore.lookupFeatureByDisplayId(e,this._storage);if(s(t))return null;const r=t.readHydratedGeometry(),i=l(r,t.geometryType,t.hasZ,t.hasM);return{attributes:t.readAttributes(),geometry:i}}getAggregate(e){return this.aggregateStore.getAggregate(e)}async setHighlight(e){const t=e.map((e=>this.getDisplayId(e)));return this.attributeStore.setHighlight(e,t)}_repushAggregateMeshTiles(e){for(const t of this.tileStore.tiles)this._patchTile({type:"replace",id:t.key.id,addOrUpdate:m.fromOptimizedFeatures([],this.service.geometryType),remove:[],end:!0,noData:!1,update:e||w.create({mesh:!0,targets:{aggregate:!0}})})}_maybeForceCleanup(){performance.now()-this._lastCleanup>5e3&&this._markAndSweep()}_patchTile(e,t){const s=this._updateQueue.push(e,t).then((()=>{this.notifyChange("updating")})).catch((e=>{this.notifyChange("updating")}));return this.notifyChange("updating"),s}async _onDisplayTilePatch(e,t){h(t);const r=this.tileStore.get(e.id);if(!r)return;const i=e.update;e.remove.length&&(this._cleanupNeeded=!0);const a=[];for(const t of e.remove)a.push(this.featureStore.lookupDisplayId(t));e.remove=a;try{if(s(e.addOrUpdate))return this.processor.onTileData(r,{...e,addOrUpdate:null},t).catch((e=>{d(e)})),void this._finishedPatch(e);e.addOrUpdate._storage=this._storage;const a=e.addOrUpdate.hasFilter(),o=e.addOrUpdate.instance;e.addOrUpdate._arcadeSpatialReference=this.spatialReference,(!this.featureStore.hasInstance(o)||i.targets.feature&&!a)&&this.featureStore.onTileData(r,e,this._storage),!i.storage.data&&!i.storage.filters||a||(this.attributeStore.onTileData(r,e),this._source.isStream?await this.attributeStore.sendUpdates():this.attributeStore.sendUpdates()),this.hasAggregates&&i.targets.aggregate&&(this.aggregateStore.onTileData(r,e,this._storage,this.attributeStore,i.mesh),i.mesh&&(this.attributeStore.onTileData(r,e),await this.attributeStore.sendUpdates())),i.mesh&&await this.processor.onTileData(r,e,t),this._maybeForceCleanup(),this._finishedPatch(e)}catch(e){d(e)}}_finishedPatch(e){if((e.noData||e.end)&&this._tileToResolver.has(e.id)){this._tileToResolver.get(e.id).resolve(),this._tileToResolver.delete(e.id)}}_markAndSweep(){if(this._lastCleanup=performance.now(),!this._cleanupNeeded&&!this._source.isStream)return;this._cleanupNeeded=!1;const e=this._storage.getBitset(this._markedIdsBufId),t=new Set;e.clear();const r=s=>{const r=this.featureStore.lookupDisplayId(s),i=(4294901760&this._storage.getInstanceId(r))>>>16;r&&(t.add(i),e.set(r))};for(const e of this.tileStore.tiles)this._source.forEachRequest(e.key.id,(e=>{if(s(e.features))return;const t=e.features.getCursor();for(;t.next();){const e=t.getObjectId();r(e)}}));this._source.forEachPendingEdit((e=>r(e))),this._updateQueue.forEach((e=>{for(const t of e.remove)r(t)})),this.config.schema.targets.aggregate&&(this.aggregateStore.sweepFeatures(e,this.featureStore),this.aggregateStore.sweepClusters(this._storage,this.attributeStore,this._level)),this.featureStore.sweepFeatures(e,this._storage,this.attributeStore),this.featureStore.sweepFeatureSets(t)}};e([r({constructOnly:!0})],j.prototype,"tileStore",void 0),e([r()],j.prototype,"config",void 0),e([r({readOnly:!0,dependsOn:["service"]})],j.prototype,"fieldsIndex",null),e([r()],j.prototype,"processor",void 0),e([r({constructOnly:!0})],j.prototype,"remoteClient",void 0),e([r({constructOnly:!0})],j.prototype,"service",void 0),e([r({dependsOn:["tileStore"]})],j.prototype,"spatialReference",null),e([r()],j.prototype,"updating",null),j=e([i("esri.views.2d.layers.features.controllers.FeatureController2D")],j);var R=j;export default R;

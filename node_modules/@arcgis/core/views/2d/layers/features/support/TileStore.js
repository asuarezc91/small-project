/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import e from"../../../../../core/has.js";import t from"../../../../../core/Evented.js";import s from"../../../tiling/TileKey.js";import i from"../../../tiling/TileCoverage.js";import{r as o}from"../../../../../chunks/rbush.js";import{Tile as n}from"./Tile.js";const h={added:[],removed:[]},r=new Set,d=new s(0,0,0,0);export default class extends t{constructor(t){super(),this._tiles=new Map,this._index=o(9,e("csp-restrictions")?e=>({minX:e.bounds[0],minY:e.bounds[1],maxX:e.bounds[2],maxY:e.bounds[3]}):[".bounds[0]",".bounds[1]",".bounds[2]",".bounds[3]"]),this.tiles=[],this.tileScheme=t}destroy(){this.clear()}clear(){this.tiles.length=0,this._tiles.clear(),this._index.clear()}has(e){return this._tiles.has(e)}get(e){return this._tiles.get(e)}findByKey(e){return this._tiles.get(e.id)}intersections(e,t){const s="string"==typeof e?this.get(e):e;if(!s)return[];const i=t*s.resolution,o=s.bounds[0]-i,n=s.bounds[1]-i,h=s.bounds[2]+i,r=s.bounds[3]+i,d=[];for(const e of this._index.search({minX:o,minY:n,maxX:h,maxY:r})){const t=e.bounds.slice();t[0]=Math.max(t[0],o),t[1]=Math.max(t[1],n),t[2]=Math.min(t[2],h),t[3]=Math.min(t[3],r),t[2]-t[0]>0&&t[3]-t[1]>0&&d.push({bounds:t,tile:e})}return d}boundsIntersections(e){return this._index.search({minX:e[0],minY:e[1],maxX:e[2],maxY:e[3]})}updateTiles(e){const t={added:[],removed:[]};for(const s of e.added)if(!this.has(s)){const e=new n(this.tileScheme,s);this._tiles.set(s,e),this._index.insert(e),t.added.push(e)}for(const s of e.removed)if(this.has(s)){const e=this.get(s);this._tiles.delete(s),this._index.remove(e),t.removed.push(e)}this.tiles.length=0,this._tiles.forEach((e=>this.tiles.push(e))),(t.added.length||t.removed.length)&&this.emit("update",t)}setViewState(e){const t=this.tileScheme.getTileCoverage(e,0);if(!t)return;const{spans:s,lodInfo:o}=t,{level:l}=o;if(s.length>0)for(const{row:e,colFrom:t,colTo:i}of s)for(let s=t;s<=i;s++){const t=d.set(l,e,o.normalizeCol(s),o.getWorldForColumn(s)).id;if(r.add(t),!this.has(t)){const e=new n(this.tileScheme,t);this._tiles.set(t,e),this._index.insert(e),this.tiles.push(e),h.added.push(e)}}for(let e=this.tiles.length-1;e>=0;e--){const t=this.tiles[e];r.has(t.id)||(this._tiles.delete(t.id),this.tiles.splice(e,1),this._index.remove(t),h.removed.push(t))}(h.added.length||h.removed.length)&&this.emit("update",h),i.pool.release(t),r.clear(),h.added.length=0,h.removed.length=0}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{DisplayIdGenerator as t}from"./displayIdUtils.js";import{StaticBitSet as e}from"./StaticBitSet.js";function s(t,e,s){if(!(t.length>e))for(;t.length<=e;)t.push(s)}class i{constructor(){this._numerics=[],this._strings=[],this._idGenerator=new t,this._allocatedSize=256,this._bitsets=[],this._instanceIds=[],this._bounds=[]}createBitset(){const t=this._bitsets.length;return this._bitsets.push(e.create(this._allocatedSize,2147483647)),t+1}getBitset(t){return this._bitsets[t-1]}_expand(){this._allocatedSize<<=1;for(const t of this._bitsets)t.resize(this._allocatedSize)}_ensureNumeric(t,e){this._numerics[t]||(this._numerics[t]=[]);s(this._numerics[t],e,0)}_ensureInstanceId(t){s(this._instanceIds,t,0)}_ensureString(t,e){this._strings[t]||(this._strings[t]=[]);s(this._strings[t],e,null)}createDisplayId(t=!1){const e=this._idGenerator.createId();return e>this._allocatedSize&&this._expand(),((t,e)=>((e?2147483648:0)|t)>>>0)(e,t)}releaseDisplayId(t){for(const e of this._bitsets)e.unset(t);return this._idGenerator.releaseId(2147483647&t)}getComputedNumeric(t,e){return this.getComputedNumericAtIndex(2147483647&t,0)}setComputedNumeric(t,e,s){return this.setComputedNumericAtIndex(2147483647&t,s,0)}getComputedString(t,e){return this.getComputedStringAtIndex(2147483647&t,0)}setComputedString(t,e,s){return this.setComputedStringAtIndex(2147483647&t,0,s)}getComputedNumericAtIndex(t,e){const s=2147483647&t;return this._ensureNumeric(e,s),this._numerics[e][s]}setComputedNumericAtIndex(t,e,s){const i=2147483647&t;this._ensureNumeric(e,i),this._numerics[e][i]=s}getInstanceId(t){const e=2147483647&t;return this._ensureInstanceId(e),this._instanceIds[e]}setInstanceId(t,e){const s=2147483647&t;this._ensureInstanceId(s),this._instanceIds[s]=e}getComputedStringAtIndex(t,e){const s=2147483647&t;return this._ensureString(e,s),this._strings[e][s]}setComputedStringAtIndex(t,e,s){const i=2147483647&t;this._ensureString(e,i),this._strings[e][i]=s}getXMin(t){return this._bounds[4*(2147483647&t)]}getYMin(t){return this._bounds[4*(2147483647&t)+1]}getXMax(t){return this._bounds[4*(2147483647&t)+2]}getYMax(t){return this._bounds[4*(2147483647&t)+3]}setBounds(t,e){const i=e.readHydratedGeometry();if(!i||!i.coords.length)return!1;let n=1/0,r=1/0,u=-1/0,h=-1/0;i.forEachVertex(((t,e)=>{n=Math.min(n,t),r=Math.min(r,e),u=Math.max(u,t),h=Math.max(h,e)}));const d=2147483647&t;return s(this._bounds,4*d+4,0),this._bounds[4*d]=n,this._bounds[4*d+1]=r,this._bounds[4*d+2]=u,this._bounds[4*d+3]=h,!0}}export{i as ComputedAttributeStorage};

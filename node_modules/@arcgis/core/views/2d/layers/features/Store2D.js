/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import e from"../../../../core/has.js";import{isNone as s}from"../../../../core/maybe.js";import{all as t}from"../../../../core/promiseUtils.js";import{createRendererExpression as r}from"../../../../support/arcadeOnDemand.js";import{diff as i,hasDiff as a}from"../../../../core/accessorSupport/diffUtils.js";import o from"../../arcade/callExpressionWithCursor.js";const c=import("../../../../layers/support/labelFormatUtils.js");class n{constructor(e,s){this._canCacheExpressionValue=!1,this._sourceInfo=e,this._bitsets={computed:s.getBitset(s.createBitset())}}async updateSchema(r,o){const c=i(this._schema,o);if(this._schema=o,!o||s(c)||!a(c,"attributes"))return;e("esri-2d-update-debug")&&console.debug("Applying Update - Store:",c),this._bitsets.computed.clear(),r.targets[o.name]=!0;const n=o.attributes,p=[],u=[];for(const e in n){const s=n[e];switch(s.type){case"field":break;case"expression":p.push(this._createArcadeComputedField(s));break;case"label-expression":p.push(this._createLabelArcadeComputedField(s));break;case"statistic":u.push(s)}}this._computedFields=await t(p),this._canCacheExpressionValue=!this._computedFields.some((e=>"expression"===e.type&&e.expression.referencesScale())),this._statisticFields=u}setComputedAttributes(e,s,t,r){const i=this._bitsets.computed;if(!this._canCacheExpressionValue||!i.has(t)){i.set(t);for(const i of this._computedFields){const a=this._evaluateField(s,i,r);switch(i.resultType){case"numeric":e.setComputedNumericAtIndex(t,i.fieldIndex,a);break;case"string":e.setComputedStringAtIndex(t,i.fieldIndex,a)}}}}async _createArcadeComputedField(e){const s=this._sourceInfo.spatialReference,t=this._sourceInfo.fieldsIndex;return{...e,expression:await r(e.valueExpression,s,t)}}async _createLabelArcadeComputedField(e){const s=this._sourceInfo.spatialReference,t=this._sourceInfo.fields,{createLabelFunction:r}=await c,i=await r(e.label,t,s);return{...e,builder:i}}_evaluateField(e,s,t){switch(s.type){case"label-expression":{const t=e.readArcadeFeature();return s.builder.evaluate(t)||""}case"expression":{const{expression:r}=s;return o(r,e,{$view:{scale:t}})}}}}export{n as Store2D};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{isNone as e}from"../../../../core/maybe.js";import{polygonCentroid as t}from"../../../../geometry/support/centroid.js";import{isPolygon as s,isPolyline as r}from"../../../../geometry/support/jsonUtils.js";import{create as o}from"../../../../geometry/support/aaBoundingRect.js";import i from"../../../../layers/graphics/OptimizedGeometry.js";import{convertFromPolyline as h,generalizeOptimizedGeometry as l,quantizeOptimizedGeometry as n,convertToPolyline as m}from"../../../../layers/graphics/featureConversionUtils.js";import{quantizePoint as u,quantizeGeometry as a}from"../../../../geometry/support/quantizationUtils.js";import{isMarkerSymbol as y,getBounds as g}from"./graphicsUtils.js";const p=new i,c=new i;function d(e){e.coords.length=0,e.lengths.length=0}class f{constructor(){this.bounds=o(),this.graphic=null,this.size=[0,0,0,0]}static acquire(e=null,t,s,r,o,i){let h;return 0===f._pool.length?h=new f:(h=f._pool.pop(),this._set.delete(h)),h.acquire(e,t,s,r,o,i),h}static release(e){e&&!this._set.has(e)&&(e.release(),this._pool.push(e),this._set.add(e))}static getCentroidQuantized(r,o){if(s(r.geometry)){const s=r.symbol;if(e(s))return null;if(y(s.type)){const e=t(r.geometry);return u(o,{},{x:e[0],y:e[1]},!1,!1)}}return null}acquire(e=null,t,s,r,o,i){e&&this.set(e,t,s,r,o,i)}release(){this.graphic=null,this.symbolResource=null,this.geometry=null}get symbol(){return this.symbolResource.symbol}set(e,t,s,r,o,i){this.graphic=e,this.geometry=s,this.symbolResource=t,this.updateBounds(r,o,i)}updateBounds(e,t,s){g(this.bounds,this.size,this.symbolResource,this.geometry,e,t,s)}getGeometryQuantized(e){if(s(this.geometry)){const t=this.geometry.rings;if(1===t.length&&2===t[0].length)return a(e,{paths:[[t[0][0],t[0][1]]]})}else if(r(this.geometry))return d(p),d(c),h(p,this.geometry),l(c,p,this.geometry.hasZ,this.geometry.hasM,"esriGeometryPolyline",e.scale[0]),n(p,c,this.geometry.hasZ,this.geometry.hasM,"esriGeometryPolyline",e),m(p,this.geometry.hasZ,this.geometry.hasM);return a(e,this.geometry)}}f._pool=[],f._set=new Set;export default f;

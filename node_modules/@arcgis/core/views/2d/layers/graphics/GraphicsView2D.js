/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../chunks/tslib.es6.js";import"../../../../core/has.js";import{isNone as e,isSome as i}from"../../../../core/maybe.js";import"../../../../core/Logger.js";import"../../../../core/accessorSupport/ensureType.js";import{property as s}from"../../../../core/accessorSupport/decorators/property.js";import{subclass as r}from"../../../../core/accessorSupport/decorators/subclass.js";import"../../../../core/urlUtils.js";import"../../../../core/uuid.js";import"../../../../portal/support/resourceExtension.js";import{resolve as a,all as o,createAbortController as h,isAbortError as n}from"../../../../core/promiseUtils.js";import d from"../../../../core/Accessor.js";import{getInfo as p}from"../../../../geometry/support/spatialReferenceUtils.js";import c from"../../../../geometry/SpatialReference.js";import{closeRingsAndFixWinding as l}from"../../../../geometry/support/coordsUtils.js";import g from"../../../../geometry/Polygon.js";import{getJsonType as u,isPolygon as m,isPolyline as _,isExtent as f,isPoint as y}from"../../../../geometry/support/jsonUtils.js";import{createScreenPoint as S}from"../../../../core/screenUtils.js";import{width as w,height as b,create as v}from"../../../../geometry/support/aaBoundingRect.js";import{errorPolylineSymbol2D as T,errorPolygonSymbol2D as U,errorPointSymbol2D as G}from"../../../../symbols/support/defaults.js";import{HandleOwnerMixin as I}from"../../../../core/HandleOwner.js";import{checkProjectionSupport as j,project as C}from"../../../../layers/graphics/data/projectionSupport.js";import{FILTER_FLAG_0 as A}from"../../engine/webgl/definitions.js";import R from"../../../webgl/capabilities.js";import{bidiText as M}from"../../engine/webgl/util/BidiText.js";import{expandSymbol as x}from"../../../../symbols/cim/cimSymbolUtils.js";import{TileData as q}from"../../engine/webgl/TileData.js";import{WGLTile as F}from"../../engine/webgl/WGLTile.js";import{createMatcherSchema as H,createSymbolSchema as z}from"../features/schemaUtils.js";import{createMatcher as D}from"../../engine/webgl/mesh/factories/matcherUtils.js";import{WGLTemplateStore as O}from"../../engine/webgl/mesh/templates/WGLTemplateStore.js";import{WGLMeshFactory as P}from"../../engine/webgl/mesh/factories/WGLMeshFactory.js";import k from"../features/support/AttributeStore.js";import{ComputedAttributeStorage as N}from"../features/support/ComputedAttributeStorage.js";import{GraphicsReader as V}from"../features/support/GraphicsReader.js";import L from"../features/support/TileStore.js";import B from"./GraphicContainer.js";import{normalizeCentralMeridian as W}from"./graphicsUtils.js";import E from"./GraphicStore.js";import{GraphicsView as J}from"../../../layers/GraphicsView.js";function Z(t,e,i){if(i.has(t))return i.get(t);const s={tile:e,addedOrModified:[],removed:[]};return i.set(t,s),s}let K=class extends(J(I(d))){constructor(t){super(t),this._storage=new N,this._displayIds=new Map,this._tiles=new Map,this._graphicStoreUpdate=!1,this._graphicsSet=new Set,this._matcher=a(null),this._tileUpdateSet=new Set,this._tilesToUpdate=new Map,this._graphicIdToAbortController=new Map,this._attached=!1,this._highlightIds=new Map,this._updatingGraphicsTimer=null,this._processing=!1,this._needsProcessing=!1,this._pendingUpdate={added:new Set,updated:new Set,removed:new Set},this.lastUpdateId=-1,this.updateRequested=!1,this.graphicUpdateHandler=this.graphicUpdateHandler.bind(this),this._processAnalyzedGraphics=this._processAnalyzedGraphics.bind(this),this._graphicsChangeHandler=this._graphicsChangeHandler.bind(this)}_createMatcher(t,e){if(t){const i=H({indexCount:0,fields:{}},"feature",t);this._matcher=D(i,e,null)}}_createDisplayId(t){return this._displayIds.has(t)||this._displayIds.set(t,this._storage.createDisplayId()),this._displayIds.get(t)}initialize(){this._tileStore=new L(this.view.featuresTilingScheme),this.container=new B(this.view.featuresTilingScheme),this._attributeStore=new k({type:"local",initialize:t=>a(this.container.attributeView.initialize(t)),update:t=>this.container.attributeView.requestUpdate(t),render:()=>this.container.requestRender()},R());this._graphicStore=new E(this.view.featuresTilingScheme,this.view.state.scale,this.uid,this.graphics,(t=>{this._createDisplayId(t.uid),this._setFilterState(t.uid,t.visible)}),(t=>{const e=this._displayIds.get(t.uid);this._displayIds.delete(t.uid),this._storage.releaseDisplayId(e)}));const t=new O(this.container.getMaterialItems.bind(this.container),!0);this._createMatcher(this.renderer,t),this._meshFactory=new P(null,this.uid,t),this._templateStore=t,this.watch("renderer",(e=>{this._createMatcher(e,t);for(const t of this.graphics)this._pendingUpdate.updated.add(t);this.requestUpdate()})),this._tileStore.on("update",this._onTileUpdate.bind(this)),this.container.on("attach",(()=>{this.graphics.items.length>0&&this._graphicsChangeHandler({target:this.graphics,added:this.graphics.items,removed:[],moved:[]}),this.handles.add(this.graphics.on("change",this._graphicsChangeHandler),"graphics"),this._attached=!0,this.notifyChange("updating")}))}destroy(){this._updatingGraphicsTimer&&(clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=null,this.notifyChange("updating")),this.container.destroy(),this._set("graphics",null),this._graphicStore.clear(),this._tileStore.destroy(),this._attributeStore=null}get updating(){return!this._attached||null!==this._updatingGraphicsTimer||this._tileUpdateSet.size>0||this._tilesToUpdate.size>0}hitTest(t,e){if(!this.view||!this.view.position)return a();const i=this.view.toMap(S(t,e));return this.searchFeatures(i).then((t=>t&&t.length?t[0]:null))}async searchFeatures(t,e=2){return this._graphicStore.hitTest(t.x,t.y,e,this.view.state.resolution,this.view.state.rotation)}update(t){const e=t.state,i=this.view.featuresTilingScheme.getClosestInfoForScale(e.scale).level;if(this._graphicStore.updateLevel(i),this._tileStore.setViewState(e),this._graphicStoreUpdate=!0,this.updateRequested=!1,this._pendingUpdate.updated.size>0){if(!this._processing)return void this._updateGraphics();this._needsProcessing=!0}}viewChange(){this.requestUpdate()}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.requestUpdateCallback())}processUpdate(t){this.updateRequested&&(this.updateRequested=!1,this.update(t))}graphicUpdateHandler(t){const{graphic:e,property:i,newValue:s}=t,r=e;switch(i){case"attributes":break;case"geometry":case"symbol":this._pendingUpdate.updated.add(r),this.requestUpdate();break;case"visible":this._setFilterState(r.uid,s),this._attributeStore.sendUpdates()}}addHighlight(t){for(const e of t)if(this._highlightIds.has(e)){const t=this._highlightIds.get(e);this._highlightIds.set(e,t+1)}else this._highlightIds.set(e,1);this._updateHighlight()}removeHighlight(t){for(const e of t)if(this._highlightIds.has(e)){const t=this._highlightIds.get(e)-1;0===t?this._highlightIds.delete(e):this._highlightIds.set(e,t)}this._updateHighlight()}_updateHighlight(){const t=Array.from(this._highlightIds.keys()),e=t.map((t=>this._displayIds.get(t)));this._attributeStore.setHighlight(t,e)}_getIntersectingTiles(t){const e=this._graphicStore.getBounds(t);return!e||0===w(e)||0===b(e)?[]:this._tileStore.boundsIntersections(e)}_updateTile(t){const e=t.tile,i=this._getGraphicsData(this._templateStore,e,t.addedOrModified);return this._processGraphics(i).then((i=>(this._patchTile(e.key,{type:"update",addOrUpdate:i,remove:t.removed,end:!0}),i)))}_patchTile(t,e){if(!this._tiles.has(t))return;const i=this._tiles.get(t);this.container.onTileData(i,e),this.container.requestRender()}_graphicsChangeHandler(t){for(const e of t.added)this._pendingUpdate.added.add(e);for(const e of t.moved)this._pendingUpdate.added.add(e);for(const e of t.removed)this._pendingUpdate.added.has(e)?this._pendingUpdate.added.delete(e):this._pendingUpdate.removed.add(e);this._processing?this._needsProcessing=!0:this._updateGraphics()}_getGraphicsToUpdate(){const t={added:[],removed:[],updated:[]},e=this._pendingUpdate;for(const i of this.graphics.items)e.added.has(i)?t.added.push(i):e.updated.has(i)&&t.updated.push(i);for(const i of e.removed)this._graphicStore.has(i)&&t.removed.push(i);return e.added.clear(),e.removed.clear(),e.updated.clear(),t}async _updateGraphics(){this._processing=!0;const{added:t,removed:e,updated:i}=this._getGraphicsToUpdate(),s=this._tilesToUpdate;let r;try{if(!this._graphicStoreUpdate){const t=this.view.state,e=this.view.featuresTilingScheme.getClosestInfoForScale(t.scale).level;this._graphicStore.updateLevel(e),this._tileStore.setViewState(t)}const a=[],h=new Array(t.length+e.length);for(let t=0;t<i.length;t++){const e=i[t],o=this._getIntersectingTiles(e);for(const t of o){r=t.id;Z(r,t,s).removed.push(this._displayIds.get(e.uid))}a.push(this._updateGraphic(e,null)),h[t]=e}const n=i.length;for(let e=0;e<t.length;e++){const i=t[e];h[n+e]=i,this._graphicsSet.add(i),a.push(this.addGraphic(i))}for(const t of e){this._abortProcessingGraphic(t.uid);const e=this._getIntersectingTiles(t);for(const i of e){r=i.id;Z(r,i,s).removed.push(this._displayIds.get(t.uid))}this._graphicsSet.delete(t),this._graphicStore.remove(t)}let d;this._flipUpdatingGraphics(),await o(a);for(let t=0;t<h.length;t++){d=h[t];const e=this._getIntersectingTiles(d);for(const t of e){r=t.id;Z(r,t,s).addedOrModified.push(d)}}this._graphicStore.updateZ();const p=[];for(const[t,e]of s)p.push(this._updateTile(e));await o(p)}catch(t){}s.clear(),this.notifyChange("updating"),this._processing=!1,this._needsProcessing&&(this._needsProcessing=!1,this._updateGraphics())}_getArcadeInfo(t){const i=(t.attributes?Object.keys(t.attributes):[]).map((e=>({name:e,alias:e,type:"string"==typeof t.attributes[e]?"esriFieldTypeString":"esriFieldTypeDouble"})));return e(t.geometry)?null:{geometryType:u(t.geometry),spatialReference:c.fromJSON(t.geometry.spatialReference),fields:i}}async _getSymbolForGraphic(t,e){return i(t.symbol)?t.symbol:i(this.renderer)?this.renderer.getSymbolAsync(t,{scale:this.view.scale,abortOptions:e}):this._getNullSymbol(t)}async _getSymbolResources(t,e){if(!this.container.stage)return a(null);const i=this._getArcadeInfo(t),s=await this._getSymbolForGraphic(t,e),r=z(s),o=await x(r,i,e);if("esriTS"===o.type){const t=[],[e]=M(o.text);for(let i=0;i<e.length;i++)t.push(e.charCodeAt(i));const i={symbol:o,id:0,glyphIds:t},[{mosaicItem:s}]=await this.container.getMaterialItems([i]);return{symbol:o,mosaicItem:s}}return{symbol:o,mosaicItem:null}}async _projectAndNormalizeGeometry(t){if(e(t.geometry))return a(null);let i=t.geometry;if(m(i)){const t=i.rings;i.rings=t}else if(_(i)){const t=i.paths;i.paths=t}else f(i)&&(i=g.fromExtent(i));return j(i.spatialReference,this.view.spatialReference).then((()=>{const t=W(i),e=C(t,i.spatialReference,this.view.spatialReference);return l(e),e}))}_onTileUpdate(t){const e=p(this.view.spatialReference);if(t.added&&t.added.length>0)for(const i of t.added)this._addNewTile(i,e);if(t.removed&&t.removed.length>0)for(const e of t.removed)this._removeTile(e.key)}addGraphic(t){this._abortProcessingGraphic(t.uid);const e=h();this._graphicIdToAbortController.set(t.uid,e);const i={signal:e.signal};return this._addOrUpdateGraphic(t,i).then((()=>{this._graphicIdToAbortController.delete(t.uid)})).catch((e=>{if(this._graphicIdToAbortController.delete(t.uid),!n(e))throw e}))}async _updateGraphic(t,e){const i=this._projectAndNormalizeGeometry(t),s=this._getSymbolResources(t,e),[r,a]=await o([i,s]);this._graphicStore.addOrModify(t,a,r)}async _addOrUpdateGraphic(t,e){const i=this._projectAndNormalizeGeometry(t),s=this._getSymbolResources(t,e);try{const[e,r]=await o([i,s]);this._addProjectedGraphic(t,r,e)}catch(t){if(!n(t))throw t}}_addProjectedGraphic(t,e,i){this._graphicsSet.has(t)&&this._graphicStore.addOrModify(t,e,i)}_addTile(t){const e=v();this.view.featuresTilingScheme.getTileBounds(e,t);const i=new F(t,e,!0);return this._tiles.set(t,i),this.container.addChild(i),i}_addNewTile(t,e){const i=this._addTile(t.key),s=this._graphicStore.queryTileData(this._templateStore,t);if(e){const i=Math.round((e.valid[1]-e.valid[0])/t.resolution);for(const t of s)t.geometry&&y(t.geometry)&&this._wrapPoints(t,i)}const r=t.key;this._tileUpdateSet.add(t.key),this.notifyChange("updating"),this._processGraphics(s).then((t=>{const e={type:"update",clear:!0,addOrUpdate:t,remove:[],end:!0};i.setData(e),this._tileUpdateSet.delete(r),this.notifyChange("updating")})).catch((t=>{if(this._tileUpdateSet.delete(r),this.notifyChange("updating"),!n(t))throw t}))}_removeTile(t){if(!this._tiles.has(t))return;const e=this._tiles.get(t);this.container.removeChild(e),e.destroy(),this._tiles.delete(t)}_setFilterState(t,e){const i=this._displayIds.get(t),s=this._attributeStore.getHighlightFlag(t);this._attributeStore.setData(i,0,0,s|(e?A:0))}_getGraphicsData(t,e,i){const s=p(this.view.spatialReference),r=this._graphicStore.getGraphicsData(t,e,i);if(s){const t=Math.round((s.valid[1]-s.valid[0])/e.resolution);for(const e of r)e.geometry&&y(e.geometry)&&this._wrapPoints(e,t)}return r}_wrapPoints(t,e){const i=t.geometry;512===e?i.x<20?t.geometry={points:[[i.x,i.y],[e,0]]}:i.x>492&&(t.geometry={points:[[i.x,i.y],[-e,0]]}):i.x<-20?t.geometry={points:[[i.x,i.y],[e,0]]}:i.x>532&&(t.geometry={points:[[i.x,i.y],[-e,0]]})}async _processGraphics(t,e){if(!(t&&t.length)||!this._meshFactory)return null;const i=V.from(t),s=this._meshFactory;return await s.analyzeGraphics(i,await this._matcher,null,null,e),this._attributeStore.sendUpdates(),this._processAnalyzedGraphics(i)}_processAnalyzedGraphics(t){const e=this._meshFactory,i=e.createMeshData(t.getApproximateSize()),s=t.getCursor();for(;s.next();){const t=s.readGraphic();t.insertAfter=-1===t.insertAfter?-1:this._displayIds.get(t.insertAfter),t.displayId=this._displayIds.get(t.attributes[this.uid]),e.writeGraphic(i,s)}const r={};return i.encode(r,[]),q.decode(r)}_abortProcessingGraphic(t){if(this._graphicIdToAbortController.has(t)){this._graphicIdToAbortController.get(t).abort()}}_getNullSymbol(t){const e=t.geometry;return _(e)?T:m(e)||f(e)?U:G}_flipUpdatingGraphics(){this._updatingGraphicsTimer&&clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=setTimeout((()=>{this._updatingGraphicsTimer=null,this.notifyChange("updating")}),160),this.notifyChange("updating")}};t([s({constructOnly:!0})],K.prototype,"requestUpdateCallback",void 0),t([s({constructOnly:!0})],K.prototype,"graphics",void 0),t([s()],K.prototype,"updating",null),t([s()],K.prototype,"view",void 0),t([s()],K.prototype,"updateRequested",void 0),K=t([r("esri.views.2d.layers.support.GraphicsView2D")],K);var Q=K;export default Q;

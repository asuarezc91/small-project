/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import"../../../../core/has.js";import"../../../../core/Logger.js";import"../../../../core/accessorSupport/ensureType.js";import{property as t}from"../../../../core/accessorSupport/decorators/property.js";import{subclass as r}from"../../../../core/accessorSupport/decorators/subclass.js";import"../../../../core/urlUtils.js";import"../../../../core/uuid.js";import"../../../../portal/support/resourceExtension.js";import{createResolver as s,createAbortController as o,ignoreAbortErrors as i,throwIfNotAbortError as n}from"../../../../core/promiseUtils.js";import{EsriPromise as a}from"../../../../core/Promise.js";import{open as c}from"../../../../core/workers/workers.js";let l=class extends a{constructor(e){super(e),this._startupResolver=s(),this.isReady=!1}initialize(){this._controller=o(),this.addResolvingPromise(this._startWorker(this._controller.signal))}destroy(){this._controller.abort(),this._connection&&this._connection.close()}set tileRenderer(e){this.client.tileRenderer=e}get closed(){return this._connection.closed}async startup(e,t,r){await this.when();const s=this._controller.signal,o=(i=r.source,Array.isArray(i)?{transferList:r.source,signal:s}:void 0);var i;const n={service:r,config:t,tileInfo:e.tileInfo.toJSON()};await this._connection.invoke("startup",n,o),this._startupResolver.resolve(),this._set("isReady",!0)}async updateTiles(e){return await this._startupResolver.promise,i(this._connection.invoke("updateTiles",e))}async update(e,t){const r={config:e,pause:t};return await this._startupResolver.promise,this._connection.invoke("update",r)}async invalidate(e){return await this._startupResolver.promise,this._connection.invoke("invalidate",e)}async resume(){return await this._startupResolver.promise,i(this._connection.invoke("controller.resume"))}async setHighlight(e){return await this._startupResolver.promise,i(this._connection.invoke("controller.setHighlight",e))}async refresh(){return await this._startupResolver.promise,i(this._connection.invoke("controller.refresh"))}async setViewState(e){return await this._startupResolver.promise,i(this._connection.invoke("setViewState",e.toJSON()))}async queryFeatures(e,t){return await this._startupResolver.promise,this._connection.invoke("controller.queryFeatures",e.toJSON(),t)}async queryObjectIds(e,t){return await this._startupResolver.promise,this._connection.invoke("controller.queryObjectIds",e.toJSON(),t)}async queryFeatureCount(e,t){return await this._startupResolver.promise,this._connection.invoke("controller.queryFeatureCount",e.toJSON(),t)}async queryExtent(e,t){return this._connection.invoke("controller.queryExtent",e.toJSON(),t)}async queryLatestObservations(e,t){return await this._startupResolver.promise,this._connection.invoke("controller.queryLatestObservations",e.toJSON(),t)}async queryStatistics(e){return await this._startupResolver.promise,this._connection.invoke("controller.queryStatistics",e)}async getObjectId(e){return await this._startupResolver.promise,this._connection.invoke("controller.getObjectId",e)}async getDisplayId(e){return await this._startupResolver.promise,this._connection.invoke("controller.getDisplayId",e)}async getFeature(e){return await this._startupResolver.promise,this._connection.invoke("controller.getFeature",e)}async getAggregate(e){return await this._startupResolver.promise,this._connection.invoke("controller.getAggregate",e)}async getAggregateValueRanges(){return await this._startupResolver.promise,this._connection.invoke("controller.getAggregateValueRanges")}async mapValidDisplayIds(e){return await this._startupResolver.promise,this._connection.invoke("controller.mapValidDisplayIds",e)}async onEdits(e){await this._startupResolver.promise;const{addedFeatures:t,deletedFeatures:r,updatedFeatures:s}=e;return i(this._connection.invoke("controller.onEdits",{addedFeatures:t,deletedFeatures:r,updatedFeatures:s}))}async enableEvent(e,t){return await this._startupResolver.promise,i(this._connection.invoke("controller.enableEvent",{name:e,value:t}))}async _startWorker(e){try{this._connection=await c("Pipeline",{client:this.client,strategy:"dedicated",signal:e})}catch(e){n(e)}}};e([t()],l.prototype,"isReady",void 0),e([t()],l.prototype,"client",void 0),e([t()],l.prototype,"tileRenderer",null),l=e([r("esri.views.2d.layers.support.FeatureLayerProxy")],l);var u=l;export default u;

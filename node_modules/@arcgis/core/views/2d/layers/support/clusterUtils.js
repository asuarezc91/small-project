/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import e from"../../../../core/has.js";import{isNone as i}from"../../../../core/maybe.js";import t from"../../../../core/Logger.js";import r from"../../../../core/Error.js";import s from"../../../../renderers/visualVariables/support/SizeStop.js";import a from"../../../../renderers/visualVariables/SizeVariable.js";import{createMD5Hash as n}from"../../../../core/MD5.js";import{LevelDependentSizeVariable as l}from"../../engine/LevelDependentSizeVariable.js";const o=t.getLogger("esri.views.2d.layers.support.clusterUtils");e.add("esri-cluster-arcade-enabled",1);const u=e("esri-cluster-arcade-enabled"),c=(e,t,r,s)=>{const a=t.clone();if(!m(a))return a;if(r.fields)for(const i of r.fields)v(e,i);if("visualVariables"in a){const t=(a.visualVariables||[]).filter((e=>"$view.scale"!==e.valueExpression)),n=d(t);t.forEach((i=>{"rotation"===i.type?i.field?i.field=S(e,i.field,"avg_angle"):i.valueExpression&&(i.field=x(e,i.valueExpression,"avg_angle"),i.valueExpression=null):i.normalizationField?(i.field=S(e,i.field,"norm",i.normalizationField),i.normalizationField=null):i.field?i.field=S(e,i.field,"avg"):(i.field=x(e,i.valueExpression,"avg"),i.valueExpression=null)})),i(n)&&!p(t)&&(t.push(f(r,s)),a.dynamicClusterSize=!0),a.visualVariables=t}switch(a.type){case"simple":break;case"unique-value":a.field?a.field=S(e,a.field,"mode"):a.valueExpression&&(a.field=x(e,a.valueExpression,"mode"),a.valueExpression=null);break;case"class-breaks":a.normalizationField?(a.field=S(e,a.field,"norm",a.normalizationField),a.normalizationField=null):a.field?a.field=S(e,a.field,"avg"):(a.field=x(e,a.valueExpression,"avg"),a.valueExpression=null)}return a},d=e=>{for(const i of e)if("size"===i.type)return i;return null},p=e=>{for(const i of e)if("cluster_count"===i.field)return!0;return!1},f=(e,t)=>{const r=[new s({value:0,size:0}),new s({value:1})];if(i(t))return new a({field:"cluster_count",stops:[...r,new s({value:2,size:0})]});const n=Object.keys(t).reduce(((i,a)=>({...i,[a]:[...r,new s({value:Math.max(2,t[a].minValue),size:e.clusterMinSize}),new s({value:Math.max(3,t[a].maxValue),size:e.clusterMaxSize})]})),{});return new l({field:"cluster_count",levels:n})},m=e=>{const i=i=>o.error(new r("Unsupported-renderer",i,{renderer:e}));if("unique-value"===e.type){if(e.field2||e.field3)return i("FeatureReductionCluster does not support multi-field UniqueValueRenderers"),!1}else if("class-breaks"===e.type){if(e.normalizationField){const t=e.normalizationType;if("field"!==t)return i(`FeatureReductionCluster does not support a normalizationType of ${t}`),!1}}else if("simple"!==e.type)return i(`FeatureReductionCluster does not support renderers of type ${e.type}`),!1;if(!u){if("valueExpression"in e&&e.valueExpression)return i("FeatureReductionCluster does not currently support renderer.valueExpression. Support will be added in a future release"),!1;if(("visualVariables"in e&&e.visualVariables||[]).some((e=>!(!("valueExpression"in e)||!e.valueExpression))))return i("FeatureReductionCluster does not currently support visualVariables with a valueExpression. Support will be added in a future release"),!1}return!0};function v(e,i){const{name:t,outStatistic:s}=i,{onStatisticField:a,onStatisticValueExpression:l,statisticType:u}=s;if(l){const i=n(l.toLowerCase());e.push({name:t,outStatistic:{onStatisticField:i,onStatisticValueExpression:l,statisticType:u}})}else a?e.push({name:t,outStatistic:{onStatisticField:a,statisticType:u}}):o.error(new r("mapview-unsupported-field","Unable to handle field",{field:i}))}function x(e,i,t){const r=n(i),s="mode"===t?`cluster_type_${r}`:`cluster_avg_${r}`;return e.some((e=>e.name===s))||e.push({name:s,outStatistic:{onStatisticField:r,onStatisticValueExpression:i,statisticType:t}}),s}function S(e,i,t,r){if("cluster_count"===i||e.some((e=>e.name===i)))return i;const s=function(e,i,t){switch(e){case"avg":case"avg_angle":return`cluster_avg_${i}`;case"mode":return`cluster_type_${i}`;case"norm":{const e=t,r="field",s=i.toLowerCase()+",norm:"+r+","+e.toLowerCase();return"cluster_avg_"+n(s)}}}(t,i,r);return e.some((e=>e.name===s))||("norm"===t?e.push({name:s,outStatistic:{onStatisticField:i,onStatisticNormalizationField:r,statisticType:t}}):e.push({name:s,outStatistic:{onStatisticField:i,statisticType:t}})),s}export{f as createClusterCountSizeVariable,c as createClusterRenderer,d as findSizeVV,p as hasClusterCountVV,m as isClusterCompatibleRenderer};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{unwrap as e}from"../../../core/maybe.js";import{a as t,f as r}from"../../../chunks/vec2f64.js";import{j as o}from"../../../chunks/vec2.js";import{defaults as i}from"./Settings.js";import{anyMapPointToScreenPoint as s,squareDistance as n}from"./snappingUtils.js";import{SnappingAlgorithm as a}from"./SnappingAlgorithm.js";import{projectPointToLine as l}from"../../3d/support/geometryUtils/vector2d.js";import{ParallelLineSnappingCandidate as h}from"./ParallelLineSnappingCandidate.js";class c extends a{constructor({enabled:e=i.lineSnapper.enabled,proximityThreshold:r=i.lineProximityThreshold,shortLineThreshold:o=i.shortLineThreshold}={}){super({enabled:e,proximityThreshold:r,shortLineThreshold:o}),this._tmpProjection=t()}snapNewVertex(e,t){const r=t.geometry.data.components[0],o=r.edges.length,i=r.vertices.length,n=[];if(o<2)return n;const a=t.geometry.data.coordinateHelper.fromPoint(e),l=s(a,t.geometry.data.coordinateHelper,t.elevationInfo,t.view),h=r.vertices[i-1],c=r.vertices[0],d=r.edges[o-1];let p=d;do{this.edgeExceedsShortLineThreshold(p,t)&&(this._checkEdgeForParalleLines(p,h.pos,e,l,t,n),this._checkEdgeForParalleLines(p,c.pos,e,l,t,n)),p=p.left.left}while(p&&p!==d);return n}snapExistingVertex(t,r){const o=[],i=e(r.vertexHandle),n=i.component;if(n.edges.length<3)return o;const a=r.geometry.data.coordinateHelper.fromPoint(t),l=s(a,r.geometry.data.coordinateHelper,r.elevationInfo,r.view),h=i.left,c=i.right,d=n.vertices[0],p=n.vertices.length,m=n.vertices[p-1],g=n.edges[0];let f=g;do{f!==h&&f!==c&&this.edgeExceedsShortLineThreshold(f,r)&&(h&&this._checkEdgeForParalleLines(f,h.left.pos,t,l,r,o),c&&this._checkEdgeForParalleLines(f,c.right.pos,t,l,r,o),i===d?this._checkEdgeForParalleLines(f,m.pos,t,l,r,o):i===m&&this._checkEdgeForParalleLines(f,d.pos,t,l,r,o)),f=f.right.right}while(f&&f!==g);return o}_checkEdgeForParalleLines(e,t,a,c,d,p){const m=e.left.pos,g=e.right.pos;if(l(this._tmpProjection,t,m,g),o(this._tmpProjection,t)<i.parallelLineThreshold)return;l(this._tmpProjection,r(a.x,a.y),m,g,t);const f=d.geometry.data.coordinateHelper,P=f.fromXYZ(this._tmpProjection,a.hasZ?a.z:0);if(n(c,s(P,f,d.elevationInfo,d.view))<this.squaredProximityTreshold(d.pointer)){if(this.parallelToPreviousCandidate(e,p))return;p.push(new h({coordinateHelper:f,referenceLine:e,lineStart:t,targetPoint:P}))}}parallelToPreviousCandidate(e,t){const r=e.left.pos,s=e.right.pos;for(const n of t)if(l(this._tmpProjection,s,n.constraint.start,n.constraint.end,r),o(this._tmpProjection,s)<i.parallelLineThreshold)return n.addReferenceLine(e),!0;return!1}}export{c as ParallelLineSnapper};

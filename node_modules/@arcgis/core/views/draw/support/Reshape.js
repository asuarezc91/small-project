/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../core/has.js";import{unwrap as t,get as s}from"../../../core/maybe.js";import"../../../core/Logger.js";import"../../../core/accessorSupport/ensureType.js";import{property as i}from"../../../core/accessorSupport/decorators/property.js";import{subclass as o}from"../../../core/accessorSupport/decorators/subclass.js";import"../../../core/urlUtils.js";import"../../../core/uuid.js";import"../../../portal/support/resourceExtension.js";import r from"../../../geometry/Point.js";import{geometryToCoordinates as h,getMidpoint as a}from"../../../geometry/support/coordsUtils.js";import"../../../geometry.js";import c from"../../../core/Evented.js";import n from"../../../symbols/SimpleMarkerSymbol.js";import l from"../../../Graphic.js";import p from"../../../core/Handles.js";import{whenOnce as d,pausable as m}from"../../../core/watchUtils.js";import{ViewEventPriorities as v}from"../../input/InputManager.js";import{cloneMove as y}from"./drawUtils.js";import{addUniqueLayer as _}from"./layerUtils.js";import u from"./GraphicMover.js";import{settings as g}from"./settings.js";class f{constructor(e,t,s){this.graphic=e,this.mover=t,this.selected=s,this.type="reshape-start"}}class x{constructor(e,t,s){this.graphic=e,this.mover=t,this.selected=s,this.type="reshape"}}class b{constructor(e,t,s){this.graphic=e,this.mover=t,this.selected=s,this.type="reshape-stop"}}class G{constructor(e,t,s){this.mover=e,this.dx=t,this.dy=s,this.type="move-start"}}class S{constructor(e,t,s){this.mover=e,this.dx=t,this.dy=s,this.type="move"}}class w{constructor(e,t,s){this.mover=e,this.dx=t,this.dy=s,this.type="move-stop"}}class M{constructor(e){this.added=e,this.type="vertex-select"}}class k{constructor(e){this.removed=e,this.type="vertex-deselect"}}class H{constructor(e,t,s,i){this.added=e,this.graphic=t,this.oldGraphic=s,this.vertices=i,this.type="vertex-add"}}class E{constructor(e,t,s,i){this.removed=e,this.graphic=t,this.oldGraphic=s,this.vertices=i,this.type="vertex-remove"}}const I={removeVertex:["Backspace","Delete"]},R=g.reshapeGraphics,C={vertices:{default:new n({style:"circle",size:R.vertex.size,color:R.vertex.color,outline:{color:R.vertex.outlineColor,width:1}}),hover:new n({style:"circle",size:R.vertex.hoverSize,color:R.vertex.hoverColor,outline:{color:R.vertex.hoverOutlineColor,width:1}}),selected:new n({style:"circle",size:R.selected.size,color:R.selected.color,outline:{color:R.selected.outlineColor,width:1}})},midpoints:{default:new n({style:"circle",size:R.midpoint.size,color:R.midpoint.color,outline:{color:R.midpoint.outlineColor,width:1}}),hover:new n({style:"circle",size:R.midpoint.size,color:R.midpoint.color,outline:{color:R.midpoint.outlineColor,width:1}})}};let j=class extends c.EventedAccessor{constructor(e){super(e),this._handles=new p,this._graphicAttributes={esriSketchTool:"box"},this._mover=null,this._viewHandles=new p,this._totalDx=0,this._totalDy=0,this.callbacks={onReshapeStart(){},onReshape(){},onReshapeStop(){},onMoveStart(){},onMove(){},onMoveStop(){},onGraphicClick(){}},this.enableMidpoints=!0,this.graphic=null,this.handleGraphics=[],this.layer=null,this.midpointGraphics=[],this.midpointSymbol=new n({style:"circle",size:6,color:[200,200,200],outline:{color:[100,100,100],width:1}}),this.selectedHandles=[],this.type="reshape",this.view=null}initialize(){this._setup(),this._handles.add([d(this,"view.ready",(()=>{const{layer:e,view:t}=this;_(t,e),this._viewHandles.add([t.on("key-down",(e=>this._keyDownHandler(e)),v.TOOL)])})),m(this,"graphic",(()=>this.refresh())),m(this,"layer",((e,t)=>{t&&(this._clearSelection(),this._resetGraphics(t)),this.refresh()})),m(this,"enableMidpoints",(()=>{this.refresh()}))])}destroy(){this._reset(),this._mover&&this._mover.destroy(),this._mover=null,this._handles.removeAll(),this._handles=null,this._viewHandles.removeAll(),this._viewHandles=null}get state(){const e=!!this.get("view.ready"),t=!(!this.get("graphic")||!this.get("layer"));return e&&t?"active":e?"ready":"disabled"}set symbols(e){const{midpoints:t=C.midpoints,vertices:s=C.vertices}=e||{};this._set("symbols",{midpoints:t,vertices:s})}isUIGraphic(e){const t=[];return this.graphic&&t.push(this.graphic),t.concat(this.handleGraphics,this.midpointGraphics),t.length&&t.includes(e)}refresh(){this._reset(),this._setup()}reset(){this.graphic=null}clearSelection(){this._clearSelection()}removeSelectedHandles(){this.selectedHandles.length&&this._removeVertex(this.selectedHandles)}_setup(){this.graphic&&this.layer&&(this._setupGraphics(),this._setupMover())}_reset(){this._clearSelection(),this._resetGraphicStateVars(),this._resetGraphics(),this._mover&&this._mover.destroy(),this._mover=null,this.view.cursor="default"}_resetGraphicStateVars(){this._totalDx=0,this._totalDy=0}_resetGraphics(e){const t=e||this.layer;t&&(t.removeMany(this.handleGraphics),t.removeMany(this.midpointGraphics)),this.handleGraphics.forEach((e=>e.destroy())),this.midpointGraphics.forEach((e=>e.destroy())),this._set("handleGraphics",[]),this._set("midpointGraphics",[]),this._set("selectedHandles",[])}_setupGraphics(){const e=t(this.graphic.geometry),s=h(e.clone());if("polygon"===e.type)for(const e of s){const t=e[e.length-1];e[0][0]===t[0]&&e[0][1]===t[1]&&e.length>2&&e.pop()}this._set("handleGraphics",this._createHandleGraphics(s)),this.enableMidpoints&&this._set("midpointGraphics",this._createMidpointGraphics(s)),this._saveRelatedIndices(this.handleGraphics),this.layer.addMany(this.midpointGraphics),this.layer.addMany(this.handleGraphics)}_createHandleGraphics(e){const{_graphicAttributes:t,symbols:s,view:{spatialReference:i}}=this,o=[];return null==e||e.forEach(((e,h)=>{e.forEach(((e,a)=>{var c;const[n,p]=e;o.push(new l({geometry:new r({x:n,y:p,spatialReference:i}),symbol:null==s||null==(c=s.vertices)?void 0:c.default,attributes:{...t,pathIndex:h,pointIndex:a}}))}))})),o}_createMidpointGraphics(e){const{_graphicAttributes:t,symbols:i,view:{spatialReference:o}}=this,h=[];return null==e||e.forEach(((e,c)=>{e.forEach(((n,p)=>{const[d,m]=n,v=e[p+1]?p+1:0;if("polygon"===s(this.graphic.geometry,"type")||0!==v){const[s,n]=e[v],[y,_]=a([d,m],[s,n]);h.push(new l({geometry:new r({x:y,y:_,spatialReference:o}),symbol:i.midpoints.default,attributes:{...t,pathIndex:c,pointIndexStart:p,pointIndexEnd:v}}))}}))})),h}_saveRelatedIndices(e){if(!e)return;const t=e.map((({geometry:e})=>({x:e.x,y:e.y})));for(let s=0;s<t.length;s++){const i=[];for(let e=0;e<t.length;e++){if(s===e)continue;const o=t[s],r=t[e];o.x===r.x&&o.y===r.y&&i.push(e)}e[s].attributes.relatedGraphicIndices=i}}_setupMover(){this._mover=new u({enableMoveAllGraphics:!1,graphics:[].concat(this.handleGraphics,this.midpointGraphics,this.graphic),view:this.view,callbacks:{onGraphicClick:e=>this._onGraphicClickCallback(e),onGraphicMoveStart:e=>this._onGraphicMoveStartCallback(e),onGraphicMove:e=>this._onGraphicMoveCallback(e),onGraphicMoveStop:e=>this._onGraphicMoveStopCallback(e),onGraphicPointerOver:e=>this._onGraphicPointerOverCallback(e),onGraphicPointerOut:e=>this._onGraphicPointerOutCallback(e)}})}_onGraphicClickCallback(e){e.viewEvent.stopPropagation();const t=e.graphic;if(t===this.graphic)this.clearSelection(),this.emit("graphic-click",e),this.callbacks.onGraphicClick&&this.callbacks.onGraphicClick(e);else if(this._isMidpoint(t)){if(2===e.viewEvent.button)return;const s=this.graphic.clone(),i=this._createHandleFromMidpoint(t);this.refresh(),this._emitVertexAddEvent([t],s,i)}else if(this._isHandle(t))if(e.viewEvent.stopPropagation(),2===e.viewEvent.button)this._removeVertex(t);else{e.viewEvent.native.shiftKey||this._clearSelection(),this.selectedHandles.includes(t)?this._removeFromSelection(t,!0):this._addToSelection(t)}}_onGraphicMoveStartCallback(e){const t=e.graphic;if(this._resetGraphicStateVars(),t===this.graphic){const{dx:t,dy:s}=e;return this.handleGraphics.forEach((e=>e.visible=!1)),this.midpointGraphics.forEach((e=>e.visible=!1)),this._clearSelection(),void this._emitMoveStartEvent(t,s)}if(this._isMidpoint(t)){this._clearSelection();const e=this.graphic.clone(),s=this._createHandleFromMidpoint(t);this._emitVertexAddEvent([t],e,s),this._addToSelection(t)}else this.selectedHandles.includes(t)||(this._clearSelection(),this._addToSelection(t));this._emitReshapeStartEvent(t)}_onGraphicMoveCallback(e){const{graphic:t,dx:s,dy:i}=e;this._totalDx+=s,this._totalDy+=i,t===this.graphic?this._emitMoveEvent(s,i):(this._syncGeometryAfterHandleMove(t,s,i),this._emitReshapeEvent(t))}_onGraphicMoveStopCallback(e){const{graphic:t,dx:s,dy:i}=e;if(this._totalDx+=s,this._totalDy+=i,t===this.graphic){for(const e of[].concat(this.handleGraphics,this.midpointGraphics))e.visible=!0;this._syncGraphicsWithGeometry(),this._emitMoveStopEvent()}else this._syncGeometryAfterHandleMove(t,s,i),this._isMidpoint(t)&&this.refresh(),this._emitReshapeStopEvent(t);this._resetGraphicStateVars()}_syncGraphicsWithGeometry(){const e=this.graphic.geometry,t="polyline"===e.type?e.paths:e.rings;this._updateHandleGraphicLocations(t),this._updateMidpointGraphicLocations(t)}_updateHandleGraphicLocations(e){for(const t of this.handleGraphics){const{pathIndex:s,pointIndex:i}=t.attributes,[o,h]=e[s][i];t.set("geometry",new r(o,h,this.view.spatialReference))}}_updateMidpointGraphicLocations(e){for(const t of this.midpointGraphics){const{pathIndex:s,pointIndexStart:i,pointIndexEnd:o}=t.attributes,[h,c]=e[s][i],[n,l]=e[s][o],[p,d]=a([h,c],[n,l]);t.geometry=new r({x:p,y:d,spatialReference:this.view.spatialReference})}}_syncGeometryAfterHandleMove(e,s,i){const o=t(this.graphic.geometry).clone(),r="polyline"===o.type?o.paths:o.rings,{pathIndex:h,pointIndex:a}=e.attributes,{x:c,y:n}=e.geometry,l=r[h].length-1;if(r[h][a]=[c,n],"polygon"===o.type&&(0===a?r[h][l]=[c,n]:a===l&&(r[h][0]=[c,n])),this._isHandle(e)){const{relatedGraphicIndices:t}=e.attributes;for(const s of t){const t=this.handleGraphics[s],{pathIndex:i,pointIndex:o}=t.attributes;r[i][o]=[c,n],t.geometry=e.geometry}for(const t of this.selectedHandles)if(t!==e){const{pathIndex:e,pointIndex:h,relatedGraphicIndices:a}=t.attributes,c=y(t.geometry,s,i,this.view),n=r[e].length-1;r[e][h]=[c.x,c.y],t.geometry=c,"polygon"===o.type&&(0===h?r[e][n]=[c.x,c.y]:h===n&&(r[e][0]=[c.x,c.y]));for(const e of a){const t=this.handleGraphics[e],{pathIndex:s,pointIndex:i}=t.attributes;r[s][i]=[c.x,c.y],t.geometry=c}}this._updateMidpointGraphicLocations(r)}this.graphic.geometry=o}_onGraphicPointerOverCallback(e){const t=e.graphic;this._isHandle(t)&&!this._isSelected(t)&&(t.symbol=this.symbols.vertices.hover),this._updateHoverCursor(t)}_onGraphicPointerOutCallback(e){const t=e.graphic;this._isHandle(t)&&!this._isSelected(t)&&(t.symbol=this.symbols.vertices.default),this.view.cursor="default"}_createHandleFromMidpoint(e){const{_graphicAttributes:s}=this,i=[],o=t(this.graphic.geometry).clone(),{pathIndex:r,pointIndexStart:h,pointIndexEnd:a}=e.attributes,{x:c,y:n}=e.geometry,l=0===a?h+1:a,p="polyline"===o.type?o.paths:o.rings;return p[r].splice(l,0,[c,n]),e.attributes={...s,pathIndex:r,pointIndex:l,relatedGraphicIndices:[]},i.push({coordinates:p[r][l],componentIndex:r,vertexIndex:l}),this.graphic.geometry=o,i}_removeHandles(e){const s=t(this.graphic.geometry).clone(),i="polygon"===s.type?s.rings:s.paths,o=[];e instanceof l&&(e=[e]);for(const t of e){const{x:e,y:s}=t.geometry;for(let t=0;t<i.length;t++){const r=i[t];for(let h=0;h<r.length;h++){const[a,c]=r[h];e===a&&s===c&&(o.push({coordinates:i[t][h],componentIndex:t,vertexIndex:h}),i[t].splice(Number(h),1))}}}if("polygon"===s.type)for(const e of i){const[t,s]=e[0],[o,r]=e[e.length-1];(1===e.length||e.length<3&&t===o&&s===r)&&i.splice(i.indexOf(e),1),e.length>2&&(t!==o||s!==r)&&e.push(e[0])}else for(const e of i)1===e.length&&i.splice(i.indexOf(e),1);return this.graphic.geometry=s,o}_addToSelection(e){e instanceof l&&(e=[e]);for(const t of e)t.symbol=this.symbols.vertices.selected;this._set("selectedHandles",this.selectedHandles.concat(e)),this._emitSelectEvent(e)}_removeFromSelection(e,t){const{vertices:s}=this.symbols,i=t?s.hover:s.default;e instanceof l&&(e=[e]);for(const t of e)this.selectedHandles.splice(this.selectedHandles.indexOf(t),1),this._set("selectedHandles",this.selectedHandles),t.set("symbol",i);this._emitDeselectEvent(e)}_clearSelection(){if(this.selectedHandles.length){const e=this.selectedHandles;for(const e of this.selectedHandles)e.set("symbol",this.symbols.vertices.default);this._set("selectedHandles",[]),this._emitDeselectEvent(e)}}_keyDownHandler(e){I.removeVertex.includes(e.key)&&!e.repeat&&this.selectedHandles.length&&this._removeVertex(this.selectedHandles)}_removeVertex(e){if("polygon"===this.graphic.geometry.type&&this.handleGraphics.length<4||this.handleGraphics.length<3)return;const t=this.graphic.clone();e instanceof l&&(e=[e]);const s=this._removeHandles(e);this.refresh(),this._emitVertexRemoveEvent(e,t,s)}_isHandle(e){return this.handleGraphics.includes(e)}_isSelected(e){return this._isHandle(e)&&this.selectedHandles.includes(e)}_isMidpoint(e){return this.midpointGraphics.includes(e)}_updateHoverCursor(e){this.view.cursor=this._isMidpoint(e)?"copy":"move"}_emitMoveStartEvent(e,t){const s=new G(this.graphic,e,t);this.emit("move-start",s),this.callbacks.onMoveStart&&this.callbacks.onMoveStart(s)}_emitMoveEvent(e,t){const s=new S(this.graphic,e,t);this.emit("move",s),this.callbacks.onMove&&this.callbacks.onMove(s)}_emitMoveStopEvent(){const e=new w(this.graphic,this._totalDx,this._totalDy);this.emit("move-stop",e),this.callbacks.onMoveStop&&this.callbacks.onMoveStop(e)}_emitReshapeStartEvent(e){const t=new f(this.graphic,e,this.selectedHandles);this.emit("reshape-start",t),this.callbacks.onReshapeStart&&this.callbacks.onReshapeStart(t)}_emitReshapeEvent(e){const t=new x(this.graphic,e,this.selectedHandles);this.emit("reshape",t),this.callbacks.onReshape&&this.callbacks.onReshape(t)}_emitReshapeStopEvent(e){const t=new b(this.graphic,e,this.selectedHandles);this.emit("reshape-stop",t),this.callbacks.onReshapeStop&&this.callbacks.onReshapeStop(t)}_emitSelectEvent(e){const t=new M(e);this.emit("select",t),this.callbacks.onVertexSelect&&this.callbacks.onVertexSelect(t)}_emitDeselectEvent(e){const t=new k(e);this.emit("deselect",t),this.callbacks.onVertexDeselect&&this.callbacks.onVertexDeselect(t)}_emitVertexAddEvent(e,t,s){const i=new H(e,this.graphic,t,s);this.emit("vertex-add",i),this.callbacks.onVertexAdd&&this.callbacks.onVertexAdd(i)}_emitVertexRemoveEvent(e,t,s){const i=new E(e,this.graphic,t,s);this.emit("vertex-remove",i),this.callbacks.onVertexRemove&&this.callbacks.onVertexRemove(i)}};e([i()],j.prototype,"callbacks",void 0),e([i()],j.prototype,"enableMidpoints",void 0),e([i()],j.prototype,"graphic",void 0),e([i({readOnly:!0})],j.prototype,"handleGraphics",void 0),e([i()],j.prototype,"layer",void 0),e([i({readOnly:!0})],j.prototype,"midpointGraphics",void 0),e([i()],j.prototype,"midpointSymbol",void 0),e([i({readOnly:!0})],j.prototype,"selectedHandles",void 0),e([i({dependsOn:["view.ready","graphic","layer"],readOnly:!0})],j.prototype,"state",null),e([i({value:C})],j.prototype,"symbols",null),e([i({readOnly:!0})],j.prototype,"type",void 0),e([i()],j.prototype,"view",void 0),j=e([o("esri.views.draw.support.Reshape")],j);var V=j;export default V;

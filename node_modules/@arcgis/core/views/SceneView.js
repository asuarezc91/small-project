/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../chunks/tslib.es6.js";import t from"../core/has.js";import{isSome as i,isNone as r}from"../core/maybe.js";import s from"../core/Logger.js";import{ensureType as n}from"../core/accessorSupport/ensureType.js";import{handlesGroup as a,makeHandle as o}from"../core/handleUtils.js";import{property as l}from"../core/accessorSupport/decorators/property.js";import{cast as p}from"../core/accessorSupport/decorators/cast.js";import{subclass as h}from"../core/accessorSupport/decorators/subclass.js";import d from"../core/Error.js";import"../core/urlUtils.js";import"../core/uuid.js";import"../portal/support/resourceExtension.js";import{on as c}from"../core/events.js";import{resolve as u,create as g,createAbortController as m,throwIfAborted as f}from"../core/promiseUtils.js";import{setFrameDuration as y}from"../core/scheduling.js";import w from"../geometry/SpatialReference.js";import{canProject as v,project as _}from"../geometry/support/webMercatorUtils.js";import b from"../geometry/Point.js";import x from"../geometry/Extent.js";import"../geometry.js";import R from"../core/Collection.js";import{screenPointObjectToArray as T,createScreenPoint as S,createScreenPointArray as M}from"../core/screenUtils.js";import O from"../Graphic.js";import{c as C}from"../chunks/vec3f64.js";import V from"../Camera.js";import E from"../Ground.js";import j from"../Viewpoint.js";import{on as I,whenOnce as P,init as H,whenTrueOnce as G}from"../core/watchUtils.js";import{getSphericalPCPF as L}from"../geometry/projectionEllipsoid.js";import U from"../geometry/HeightModelInfo.js";import{toExtent as A}from"../geometry/support/aaBoundingRect.js";import{projectPointToVector as D,projectVectorToVector as F}from"../geometry/projection.js";import{isSpatialReferenceSupported as k}from"./support/spatialReferenceSupport.js";import W from"../webscene/Environment.js";import{initialize as q}from"../core/workers/workers.js";import{byId as z}from"../core/domUtils.js";import{toRenderSettings as N,screenshotSuperSampleSettings as B}from"./support/screenshotUtils.js";import{getResolutionForScale as $}from"../geometry/support/scaleUtils.js";import{occludeesSupported as Q}from"./support/layerViewUtils.js";import{DOMContainer as K}from"./DOMContainer.js";import{isSupportedScreenPointEvent as Z,createScreenPointFromSupportedEvent as J}from"./support/screenUtils.js";import X from"./View.js";import{isTiledLayer as Y}from"../layers/support/layerUtils.js";import{BreakpointsOwner as ee}from"./BreakpointsOwner.js";import{getElevationAtPoint as te}from"./3d/support/ElevationProvider.js";import ie from"./GroundView.js";import{PopupView as re}from"./PopupView.js";import se from"./ViewAnimation.js";import{check as ne}from"./support/WebGLRequirements.js";import{viewingModeFromString as ae}from"./ViewingMode.js";import{layerView3DImporter as oe}from"./3d/layerViewModuleImportUtils.js";import le from"./3d/constraints/Constraints.js";import pe from"./3d/environment/SceneViewEnvironment.js";import{B as he}from"../chunks/boundedPlane.js";import{boundedPlane as de}from"./3d/support/geometryUtils.js";import ce from"./3d/environment/SceneViewEnvironmentManager.js";import{TERRAIN_ID as ue}from"./3d/webgl-engine/lib/intersectorUtils.js";import{Intersector as ge}from"./3d/webgl-engine/lib/Intersector.js";import me from"./3d/input/SceneInputManager.js";import fe from"./3d/support/debugFlags.js";import{GraphicsDeconflictor as ye}from"./3d/layers/graphics/GraphicsDeconflictor.js";import{Labeler as we}from"./3d/layers/graphics/Labeler.js";import{ObjectResourceCache as ve}from"./3d/layers/graphics/ObjectResourceCache.js";import _e from"./3d/layers/support/FeatureTileTree3D.js";import{PropertiesPool as be}from"./3d/support/PropertiesPool.js";import xe from"./3d/state/ViewState.js";import Re from"./3d/state/ViewStateManager.js";import{SceneIntersectionHelper as Te}from"./3d/state/helpers/SceneIntersectionHelper.js";import{CombinedElevationProvider as Se}from"./3d/support/CombinedElevationProvider.js";import Me from"./3d/support/DisplayQualityProfile.js";import Oe from"./3d/support/HighlightOptions.js";import{MapCoordsHelper as Ce}from"./3d/support/MapCoordsHelper.js";import Ve from"./3d/support/QualitySettings.js";import{RenderCoordsHelper as Ee}from"./3d/support/RenderCoordsHelper.js";import{newResourceController as je}from"./3d/support/ResourceController.js";import{getTiledLayerInfo as Ie}from"./3d/terrain/terrainUtils.js";import Pe from"./3d/support/SceneViewPerformanceInfo.js";import{SharedSymbolResources as He}from"./3d/support/SharedSymbolResources.js";import Ge from"./3d/support/pointsOfInterest/PointsOfInterest.js";import Le from"./3d/terrain/TerrainSurface.js";import{Stage as Ue}from"./3d/webgl-engine/Stage.js";import{hitTestSelectSameDistance as Ae}from"./support/hitTestSelectUtils.js";import De from"./ui/3d/DefaultUI3D.js";const Fe=s.getLogger("esri.views.SceneView");let ke=class extends(ee(K(re(X)))){constructor(e){super(e),this._clippingArea=null,this._userClippingArea=null,this._initialDefaultSpatialReference=null,this._defaults={},this._externallySet={environment:!1},this._createGraphicsViewController=null,this._resolveWhenReady=[],this.propertiesPool=new be({slicePlane:he},this),this._resourceController=je(this),this._defaultToMapOptions={include:new Set},this._defaultHitTestOptions={exclude:new Set},this.deconflictor=new ye({view:this}),this.labeler=new we({view:this,deconflictor:this.deconflictor.labels}),this.sharedSymbolResources=null,this.basemapTerrain=null,this.elevationProvider=null,this.camera=null,this.canvas=null,this.center=null,this.constraints=new le,this.environmentManager=new ce,this.extent=null,this.windowDevicePixelRatio=1,this.fullOpacity=1,this.graphicsView=null,this.groundView=null,this.navigating=!1,this.map=null,this.screenSizePerspectiveEnabled=!0,this.state=new xe,this.scale=null,this.spatialReference=null,this.isHeightModelInfoRequired=!0,this.alphaCompositingEnabled=!1,this.supersampleScreenhotsEnabled=!0,this.type="3d",this.ui=new De,this._numUpdating=0,this._lastUpdateTime=0,this.updatingProgress=.5,this.viewpoint=null,this.zoom=null,this.highlightOptions=new Oe,q(),e&&e.environment||(this._defaults.environment=new pe,this.environment=this._defaults.environment);const t=()=>{this.notifyChange("dataExtent"),this.updatingChanged(),this.map&&this.map.allLayers.forEach((async e=>{try{await e.when()}catch{}this.updatingChanged()}))};this.handles.add([I(this,"map.allLayers","after-changes",t,t,t,!0),this.allLayerViews.on("after-changes",(()=>this._updateUpdatingMonitors())),this.watch("map",(e=>{e&&e.load&&e.load().catch((()=>{}))}))]),this.inputManager=new me({view:this});this.stateManager=new Re({view:this,updateDevicePixelRatio:()=>{const e=window.devicePixelRatio;e!==this.windowDevicePixelRatio&&(this.windowDevicePixelRatio=e,this.notifyChange("pixelRatio"))}})}initialize(){this.groundView=new ie({view:this}),this._updateUpdatingMonitors();const e=()=>this._updateDefaultToMapOptions();this.handles.add(I(this,"map.allLayers","after-changes",e,e,e)),this.updatingHandles.add(this.qualitySettings,"memoryLimit",(e=>{this.resourceController&&(this.resourceController.memoryController.maxMemory=e)}),2),this.updatingHandles.add(this.qualitySettings,"additionalCacheMemory",(e=>{this.resourceController&&(this.resourceController.memoryController.additionalCacheMemory=e)}),2),this.updatingHandles.add(this.qualitySettings,"frameRate",(e=>y(e>0?1e3/Math.ceil(e):0)),2),this.updatingHandles.add(fe,"SCENEVIEW_LOCKING_LOG",(e=>this.defaultsFromMap.logDebugInformation=e),2),this.updatingHandles.add(this,"map.ground",e,3),this.updatingHandles.add(this,"map.ground.opacity",(()=>this._updateDefaultHitTestOptions()),3),this.handles.add(this.watch("spatialReference",(()=>this.notifyChange("clippingArea")),!0))}destroy(){this.destroyed||(this.invalidate(),this.activeTool=null,this.layerViewManager.clear(),this._exitSurface(),this._disposeGraphicsView(),this.sharedSymbolResources&&(this.sharedSymbolResources.destroy(),this.sharedSymbolResources=null),this.labeler.destroy(),this._set("labeler",null),this.deconflictor.destroy(),this._set("deconflictor",null),this._resourceController.destroy(),this._resourceController=null,this.stateManager.destroy(),this._set("stateManager",null),this.inputManager.destroy(),this._set("inputManager",null),this.propertiesPool.destroy(),this.handles.remove("updatingMonitors"),this.environmentManager.destroy(),this._set("environmentManager",null),this.groundView.destroy(),this.groundView=null)}get renderSpatialReference(){return this.renderCoordsHelper&&this.renderCoordsHelper.spatialReference}get basemapSpatialReference(){return this.basemapTerrain&&this.basemapTerrain.spatialReference}get clippingArea(){if("global"===this.viewingMode)return null;let e=this._userClippingArea||this.get("map.clippingArea");if(!(!!this._userClippingArea||this.get("map.clippingEnabled"))||!e)return this._clippingArea=null,null;if(!(e instanceof x))return Fe.error("#clippingArea","only clippingArea geometries of type Extent are supported"),this._clippingArea;if(this.spatialReference){if(!v(e.spatialReference,this.spatialReference))return Fe.error("#clippingArea","setting clippingArea with incompatible SpatialReference"),this._clippingArea;e=_(e,this.spatialReference)}return this._clippingArea&&e&&this._clippingArea.equals(e)?this._clippingArea:(this._clippingArea=e,e)}set clippingArea(e){this.ready&&"global"===this.viewingMode&&e?Fe.error("#clippingArea=","Clipping area is only supported in local viewingMode"):(this._userClippingArea=e,this.notifyChange("clippingArea"))}get dataExtent(){const e=[],t=this.spatialReference||w.WGS84;let i=this.clippingArea;i&&(i=_(i,t));const r=r=>{if(!r)return;let s=_(r,t);s&&(i&&(s=s.intersection(i),!s)||e.push(s))},s=this.basemapTerrain;if(s&&s.spatialReference&&r(new x({xmin:s.extent[0],ymin:s.extent[1],zmin:0,xmax:s.extent[2],ymax:s.extent[3],zmax:0,spatialReference:s.spatialReference})),this.map&&this.map.allLayers.forEach((e=>r(e.fullExtent))),0===e.length)return new x({xmin:0,ymin:0,zmin:0,xmax:0,ymax:0,zmax:0,spatialReference:t});const n=e.reduce(((e,t)=>e.union(t)));return n.hasZ?(n.zmin=Math.min(0,n.zmin),n.zmax=Math.max(0,n.zmax)):(n.zmin=0,n.zmax=0),n}set environment(e){e!==this._defaults.environment&&(this._externallySet.environment=!0),this._set("environment",e)}castEnvironment(e){return e?e instanceof pe?e:e instanceof W?null!=this.environment?this.environment.cloneWithWebsceneEnvironment(e):pe.fromWebsceneEnvironment(e):n(pe,e):new pe}get pixelRatio(){return Math.min(this.windowDevicePixelRatio,this.maximumPixelRatio)}set pixelRatio(e){i(e)?this._override("pixelRatio",e):this._clearOverride("pixelRatio")}get maximumPixelRatio(){let e=1/0;const{maximumPixelRatio:t,maximumRenderResolution:i}=this.qualitySettings;if(null!=t&&(e=Math.min(e,t)),null!=i){const t=i/Math.max(this.width,this.height);e=Math.min(e,t)}return e}set maximumPixelRatio(e){i(e)?this._override("maximumPixelRatio",e):this._clearOverride("maximumPixelRatio")}get groundExtent(){const e=this._get("basemapTerrain");if(e&&e.spatialReference){const t=e.extent;return new x({xmin:t[0],ymin:t[1],xmax:t[2],ymax:t[3],spatialReference:e.spatialReference})}const t=this.spatialReference||w.WGS84;return new x({spatialReference:t})}get initialExtentRequired(){return this.stateManager&&!this.stateManager.hasInitialView}get interacting(){return this.navigating||i(this.activeTool)}get stationary(){return!this.animation&&!this.resizing&&(r(this.state)||this.state.stationary)}set qualityProfile(e){Me.isValidProfile(e)&&(Me.apply(e,this.qualitySettings),this._set("qualityProfile",e))}get qualityProfile(){return this._get("qualityProfile")||Me.getDefaultProfile()}set slicePlane(e){if(this._stage.renderView.setRenderParameters({slicePlane:e}),r(e))return void this._set("slicePlane",null);const t=this.propertiesPool.get("slicePlane");de.copy(e,t),this._set("slicePlane",t)}get resolution(){return null!=this.spatialReference?$(this.scale,this.spatialReference):0}get heightModelInfo(){const e=this.getDefaultHeightModelInfo();return null!=e?U.deriveUnitFromSR(e,this.spatialReference):null}get updating(){var e,t,r;let s=0,n=0,a=!1;this.allLayerViews.forEach((e=>{if(e.isFulfilled()){if(e.updating){if(a=!0,e.suspended)return;++n,s+="updatingProgress"in e?e.updatingProgress:.5}}else++n}));for(const e of[this.graphicsView,this.basemapView,this.basemapTerrain,this.layerViewManager,this._resourceController,null==(o=this._stage)?void 0:o.renderView,this.featureTiles,this.pointsOfInterest,this.environmentManager,this.overlay,this.updatingHandles,this.featureTreeDebugger]){var o;if(i(e)&&e.updating){const e=.1;n+=e,s+=.5*e}}for(const e of[this.deconflictor,this.labeler])i(e)&&e.updating&&(++n,s+=e.updatingProgress);if(a=!!(a||n>0||!this.ready||!this.stationary||this._createGraphicsViewController||null!=(e=this.inputManager)&&e.hasPendingInputs||null!=(t=this.map)&&null!=(r=t.allLayers)&&r.some((e=>!e.isFulfilled()))),a?(this._numUpdating=Math.max(n,this._numUpdating),s+=this._numUpdating-n):this._numUpdating=0,this._numUpdating>0?s/=this._numUpdating:s=a?.5:1,this._get("updatingProgress")!==s){const e=this._resourceController.scheduler.now;if(s<1){const t=Math.min((e-this._lastUpdateTime)/2e3,1);s=this.updatingProgress*(1-t)+s*t}this._set("updatingProgress",s),this._lastUpdateTime=a&&s<1?e:0}return a}get viewingMode(){const e=this.get("map.initialViewProperties.viewingMode");if(e)return e;const t=this.spatialReference;return!t||k(t,"global")?"global":"local"}set viewingMode(e){if(this.ready)Fe.error("#viewingMode","viewingMode cannot be set once view is ready");else{["local","global"].indexOf(e)>=0?this._override("viewingMode",e):void 0===e&&this._clearOverride("viewingMode")}}get resourceController(){return this._resourceController}get performanceInfo(){return new Pe(this)}on(e,t,i,r){const s=this.viewEvents.on(e,t,i,r);return s||super.on(e,t)}hasEventListener(e){return super.hasEventListener(e)||this.viewEvents.hasHandler(e)}toMap(e,t){if(!this.ready)return Fe.error("#toMap()","Scene view cannot be used before it is ready"),null;const s=t?this.externalToInternalIntersectOptions(t):this._defaultToMapOptions,n=i(s.graphics)&&(i(s.graphics.include)||i(s.graphics.exclude)),a=Z(e)?J(this,e):e,o=T(a);s.enableDraped=s.include&&!s.include.has(ue)||s.exclude&&s.exclude.has(ue);const l=this.sceneIntersectionHelper,p=new ge(this.state.mode);if(p.options.selectionMode=!0,p.options.store=n?2:0,l.intersectIntersectorScreen(o,p,s),n){for(const e of p.results.all){const t=e.toGraphic(this);if(r(t))return this._intersectResultToMapPoint(e);if(this._testGraphicUidFilter(s.graphics,t))return this._intersectResultToMapPoint(e)}return null}return this._intersectResultToMapPoint(p.results.min)}toScreen(e){if(!this.ready)return Fe.error("#toScreen()","Scene view cannot be used before it is ready"),null;const t=null==e.z&&te(this.elevationProvider,e)||0;return D(e,qe,this.renderSpatialReference,t),this.state.camera.projectToScreen(qe,ze),S(ze[0],ze[1])}pixelSizeAt(e){return this.ready?e?(D(e,qe,this.renderSpatialReference),this.state.camera.computeScreenPixelSizeAt(qe)):0:(Fe.error("#pixelSizeAt()","Scene view cannot be used before it is ready"),null)}overlayPixelSizeInMapUnits(e){const t=this.basemapTerrain.overlayManager;return t?t.overlayPixelSizeInMapUnits(e):1}hitTest(e,t){if(!this.ready)return Fe.error("#hitTest()","Scene view cannot be used before it is ready"),null;const r=Z(e)?J(this,e):e,s=M(r.x,r.y),n=t?this.externalToInternalIntersectOptions(t):this._defaultHitTestOptions;n.requiresGroundFeedback=!0,n.enableDraped=!0;const a=new ge(this.state.mode);a.options.selectionMode=!0,a.options.store=2,this.sceneIntersectionHelper.intersectIntersectorScreen(s,a,n);const o=this._intersectResultsToHits(a.results.all,n.graphics),l=a.results.ground,p=l.toOwner(this),h=i(p)&&"type"in p&&"integrated-mesh"===p.type?p:null,d={screenPoint:r,results:o,ground:{mapPoint:this._intersectResultToMapPoint(l),distance:l.hasIntersectionPoint?l.distanceInRenderSpace:0,layer:h}};return fe.SCENEVIEW_HITTEST_RETURN_INTERSECTOR&&(d.intersector=a),u(d)}popupHitTest(e){return Ae(this,e).then((({results:t,ground:i})=>{let r=null;return!(0===t.length||Math.abs(t[0].distance-i.distance)<1e-5)||i.layer&&"integrated-mesh"===i.layer.type||(r=i.mapPoint),{results:t,screenPoint:e,mapPoint:r}}))}goTo(e,t){return this.updatingHandles.addPromise(this.stateManager.goTo(e,t))}whenLayerView(e){return super.whenLayerView(e)}takeScreenshot(e){return this.whenReady().then((()=>{const t=N(e,this);return t.pixelRatio/=this.pixelRatio,this._stage.renderView.takeScreenshot(B(t,this.supersampleScreenhotsEnabled,this.padding))}))}importLayerView(e){return oe.importLayerView(e)}hasLayerViewModule(e){return oe.hasLayerViewModule(e)}forceDOMReadyCycle(){this.forceReadyCycle()}getDefaultSpatialReference(){return this.get("map.initialViewProperties.spatialReference")||this.get("defaultsFromMap.spatialReference")||this.get("defaultsFromMap.isSpatialReferenceDone")&&this._initialDefaultSpatialReference||null}async validate(){let e=ne();if(t("safari")&&t("safari")<9&&(e=new d("sceneview:browser-not-supported","This browser is not supported by SceneView (Safari < 9)",{type:"safari",requiredVersion:9,detectedVersion:t("safari")})),i(e))throw Fe.warn("#validate()",e.message),e}isSpatialReferenceSupported(e,t,i){const r=e.isGeographic,s=e.isWebMercator,n=k(e,"global"),a="local"===this.viewingMode,o=!(!this._isOverridden("viewingMode")&&!this.get("map.initialViewProperties.viewingMode"));if(o){if(a&&r)return i&&i(`Layer ${t.id} is ignored because it is GCS and viewing mode is local`),!1;if(!a&&!n)return i&&i(`Layer ${t.id} is ignored because its spatial reference is not supported in global viewing mode`),!1}else if(r&&!n)return i&&i(`Layer ${t.id} is ignored because its spatial reference is geographic but unsupported`),!1;if(t)if(Y(t)){let r;if(o){r=null!=Ie(t,e,ae(this.viewingMode)).tileInfo}else{let i=Ie(t,e,1);null==i.tileInfo&&(i=Ie(t,e,2),null!=i.tileInfo&&s&&!this.ready&&(this.viewingMode="local")),r=null!=i.tileInfo}if(!r)return i&&i(`Layer ${t.id} is ignored because it is tiled but\n            its tiling scheme is not supported or compatible with the viewing mode`),!1}else if((e.isWGS84||s)&&!a)return null==this._initialDefaultSpatialReference&&(this._initialDefaultSpatialReference=e),o||this.ready||(this.viewingMode="global",i&&i(`Viewing mode locked to global due to reprojectable layer ${t.id}`)),i&&i(`Layer ${t.id} is ignored because it supports server-side reprojection`),!1;return!0}whenReady(){return g((e=>{this.ready?e(this):this._resolveWhenReady.push(e)}))}computeMapPointFromVec3d(e,t){let i=this.spatialReference||w.WGS84;return F(e,this.renderSpatialReference,e,i)||(i=w.WGS84,F(e,this.renderSpatialReference,e,i)),t?(t.x=e[0],t.y=e[1],t.z=e[2],t.spatialReference=i):t=new b(e,i),t}flushDisplayModifications(){this._stage.processDirty()}trackGraphicState(e){if(!e.graphic)return Fe.error("trackGraphicState","GraphicState.graphic must not be null or undefined to start tracking"),null;const t=this.getViewForGraphic(e.graphic);let r=null,s=!1;const n=t=>{!s&&i(t)&&"graphics3d"in t&&t.graphics3d&&t.graphics3d.graphicsCore&&(r=t.graphics3d.graphicsCore.trackGraphicState(e))};return i(t)?n(t):this.whenViewForGraphic(e.graphic,{waitForLayer:!0}).then((e=>n(e)),(()=>{})).catch((()=>{})),{remove:()=>{s=!0,i(r)&&(r.remove(),r=null)}}}highlight(e){if(Array.isArray(e))return a(e.map((e=>this.highlight(e))));if(R.isCollection(e))return a(e.toArray().map((e=>this.highlight(e))));const t=this.getViewForGraphic(e);return t&&"highlight"in t?t.highlight(e):o()}maskOccludee(e){if(!e)return Fe.error("maskOccludee","GraphicState.graphic must not be null or undefined to mask an occludee"),null;const t=this.getViewForGraphic(e);let r=null,s=!1;const n=t=>{!s&&i(t)&&"graphics3d"in t&&Q(t)&&(r=t.maskOccludee(e))};return i(t)?n(t):this.whenViewForGraphic(e,{waitForLayer:!0}).then((e=>n(e)),(()=>{})).catch((()=>{})),{remove:()=>{s=!0,i(r)&&(r.remove(),r=null)}}}getViewForGraphic(e){return e.layer===this.graphics?this.graphicsView:e.layer?this.allLayerViews.find((t=>t.layer===e.layer)):null}graphicChanged(e){i(this.graphicsView)&&this.graphicsView.graphicChanged(e)}async whenViewForGraphic(e,t){if(e.layer===this)return await P(this,"graphicsView"),this.graphicsView;if(!e.layer||!this.map)throw new d("no-view-for-graphic");return t&&t.waitForLayer&&!this.map.allLayers.includes(e.layer)?g(((t,i)=>{const r=this.map.allLayers.on("change",(s=>{-1!==s.added.indexOf(e.layer)&&(r.remove(),this.whenLayerView(e.layer).then(t,i))}))})):this.whenLayerView(e.layer)}externalToInternalIntersectOptions(e){const t=this._externalToInternalRenderItems(e.include,0),i=this._externalToInternalRenderItems(e.exclude,1);return{include:t.layerUids,exclude:i.layerUids,graphics:{include:t.graphicUids,exclude:i.graphicUids}}}_intersectResultToMapPoint(e,t){if(e.getIntersectionPoint(qe)){t=this.computeMapPointFromVec3d(qe,t);const i=this.basemapTerrain;return"TerrainRenderer"===e.intersector&&i&&(t.z=te(i,t)||0),t}return null}_intersectResultsToHits(e,t){const s=new Array;let n=null;for(let a=0;a<e.length;a++){const o=e[a],l=o.toOwner(this);if(i(l)&&(l===this.map.ground||"type"in l&&"integrated-mesh"===l.type))break;const p=o.toGraphic(this);if(!i(p))continue;if(r(n)&&a!==e.length-1&&(n=new Set),i(n)){const e=this._getGraphicFilterUid(p);if(n.has(e))continue;n.add(e)}if(!this._testGraphicUidFilter(t,p))continue;const h=this._intersectResultToMapPoint(o),d=o.distanceInRenderSpace;s.push({graphic:p,mapPoint:h,distance:d})}return s}_getGraphicFilterUid(e){if(e.layer&&"objectIdField"in e.layer){const t=e.attributes[e.layer.objectIdField];if(t)return`o-${e.layer.id}-${t}`}return`u-${e.uid}`}_testGraphicUidFilter(e,t){const i=this._getGraphicFilterUid(t);return r(e)||(r(e.include)||e.include.has(i))&&(r(e.exclude)||!e.exclude.has(i))}_externalToInternalRenderItems(e,t,r={layerUids:null,graphicUids:null}){return e?(e instanceof O?(!function(e,t){e.graphicUids||(e.graphicUids=new Set);e.graphicUids.add(t)}(r,this._getGraphicFilterUid(e)),0===t&&(i(this.graphicsView)&&e.layer===this?We(r,this.graphicsView.mockLayerId):e.layer&&We(r,e.layer.uid))):"forEach"in e?e.forEach((e=>{Array.isArray(e)?this._externalToInternalRenderItems(e,t,r):R.isCollection(e)?e===this.graphics&&i(this.graphicsView)?We(r,this.graphicsView.mockLayerId):this._externalToInternalRenderItems(e,t,r):e instanceof E?e===this.map.ground&&We(r,ue):this._externalToInternalRenderItems(e,t,r)})):We(r,e.uid),r):r}_viewingModeToManifold(e){switch(e){case 1:return"spherical";case 2:return"planar"}}_initBasemapTerrain(e){this._set("basemapTerrain",new Le({view:this,manifold:this._viewingModeToManifold(e)})),this._set("elevationProvider",new Se({view:this})),this.elevationProvider.register("ground",this.basemapTerrain)}_exitBasemapTerrain(){this.basemapTerrain&&(this.elevationProvider.unregister(this.basemapTerrain),this.elevationProvider.destroy(),this._set("elevationProvider",null),this.basemapTerrain.destroy(),this._set("basemapTerrain",null))}_initGlobe(e){this._initCoordinateSystem(e),this.state.init(e,this.spatialReference),this._initBasemapTerrain(e),this._set("pointsOfInterest",new Ge({view:this})),this._set("featureTiles",new _e({renderCoordsHelper:this.renderCoordsHelper,cameraOnSurface:this.pointsOfInterest.cameraOnSurface,focus:this.pointsOfInterest.focus,tilingSchemeOwner:this.basemapTerrain,viewState:this.state,scheduler:this._resourceController.scheduler}));const t=()=>{const e=this.basemapTerrain&&this.basemapTerrain.extent;if(this.clippingArea||e)if(e&&this.basemapTerrain.spatialReference){const e=A(this.basemapTerrain.extent,this.basemapTerrain.spatialReference);this.clippingArea?this.featureTiles.filterExtent=e.intersection(this.clippingArea):this.featureTiles.filterExtent=e}else this.featureTiles.filterExtent=this.clippingArea;else this.featureTiles.filterExtent=null};this.handles.add([this.updatingHandles.add(fe,"FEATURE_TILE_TREE_SHOW_TILES",(e=>{e&&this.featureTiles&&!this.featureTreeDebugger?this.updatingHandles.addPromise(import("./3d/layers/support/FeatureTileTree3DDebugger.js")).then((({FeatureTileTree3DDebugger:e})=>{!this.featureTreeDebugger&&fe.FEATURE_TILE_TREE_SHOW_TILES&&(this.featureTreeDebugger=new e({view:this}))})):e||!this.featureTreeDebugger||fe.FEATURE_TILE_TREE_SHOW_TILES||(this.featureTreeDebugger.destroy(),this.featureTreeDebugger=null)}),3),this.updatingHandles.add(this,"clippingArea",t,3),this.updatingHandles.add(this,"basemapTerrain.extent",t,3)],"feature-tiles"),this.stateManager.init()}_exitGlobe(){this.state&&(this.stateManager.deinit(),this.handles.remove("render-coords-helper"),this.handles.remove("feature-tiles"),this.featureTiles.destroy(),this._set("featureTiles",null),this.pointsOfInterest.destroy(),this._set("pointsOfInterest",null),this._exitBasemapTerrain(),this.state.exit(),this._exitCoordinateSystem())}_initCoordinateSystem(e){if(this.spatialReference){const t=this.spatialReference;this.mapCoordsHelper&&this.mapCoordsHelper.spatialReference.equals(t)||this._set("mapCoordsHelper",new Ce(this.map,t));const i=1===e,r=i?L(t):t;r!==this.renderSpatialReference&&(this._set("renderCoordsHelper",Ee.createMode(e,r)),i||this.handles.add(this.watch("basemapTerrain.extent",(e=>{0===e[0]&&0===e[1]&&0===e[2]&&0===e[3]||(this.renderCoordsHelper.extent=e)}),!0),"render-coords-helper"),this.sceneIntersectionHelper&&this.sceneIntersectionHelper.setTolerance(ge.DEFAULT_TOLERANCE/this.renderCoordsHelper.unitInMeters))}else this._set("mapCoordsHelper",null),this._set("renderCoordsHelper",null)}_exitCoordinateSystem(){this.mapCoordsHelper&&(this.handles.remove("render-coords-helper"),this._set("renderCoordsHelper",null),this._set("mapCoordsHelper",null))}updatingChanged(){this.notifyChange("updating")}_updateUpdatingMonitors(){this.handles.remove("updatingMonitors"),this.allLayerViews.forEach((e=>{e.destroyed||(this.handles.add([e.watch(["updating","updatingProgress"],(()=>this.updatingChanged()),!0)],"updatingMonitors"),e.when((()=>this.updatingChanged()),(()=>this.updatingChanged())))})),this.updatingChanged()}_renderScreenshotOverlay(e,t){if(!this.overlay||!this.overlay.hasVisibleItems)return;const i=e.getContext("2d");i.putImageData(t,0,0),this.overlay.renderCanvas(e);const r=i.getImageData(0,0,t.width,t.height);for(let e=0;e<r.data.length;e++)t.data[e]=r.data[e]}_initStage(e){const t={renderContext:this.renderContext,deactivatedWebGLExtensions:this.deactivatedWebGLExtensions,debugWebGLExtensions:this.debugWebGLExtensions,viewingMode:e,alpha:this.alphaCompositingEnabled,canvas:this.renderCanvas,screenshot:{renderOverlay:(e,t)=>this._renderScreenshotOverlay(e,t)}},i=new Te(e,{forEachLayer:e=>{this._stage.getLayers().forEach(e)}},this);this._set("sceneIntersectionHelper",i);const r=z(this.surface);this._stage=new Ue({scheduler:this.resourceController.scheduler,viewingMode:e,container:r,options:t,sceneIntersectionHelper:i}),this._lostWebGLContextHandle=c(this._stage.renderView.getCanvas(),"webglcontextlost",(()=>this.fatalError=new d("webgl-context-lost"))),this.handles.add([this.updatingHandles.add(this.qualitySettings,"antialiasingEnabled",(()=>{this._stage.renderView.setRenderParameters({antialiasingEnabled:this.qualitySettings.antialiasingEnabled})}),2),this.updatingHandles.add(this.qualitySettings,"orderIndependentTransparencyEnabled",(()=>{this._stage.renderView.setRenderParameters({orderIndependentTransparencyEnabled:this.qualitySettings.orderIndependentTransparencyEnabled})}),2),H(this,"magnifier",(e=>this._stage.renderView.magnifier=e),!0)],"stage");const s=()=>{this._stage.renderView.setRenderParameters({defaultHighlightOptions:Oe.toEngineOptions(this.highlightOptions)})};for(const e of["highlightOptions","highlightOptions.color","highlightOptions.haloColor","highlightOptions.haloOpacity","highlightOptions.fillOpacity"])this.handles.add(this.updatingHandles.add(this,e,s),"stage");s(),this.renderCoordsHelper&&this.sceneIntersectionHelper.setTolerance(ge.DEFAULT_TOLERANCE/this.renderCoordsHelper.unitInMeters),this._set("canvas",this._stage.renderView.getCanvas())}_exitStage(){this._set("sceneIntersectionHelper",null),this._stage.destroy(),this._stage=null,this._lostWebGLContextHandle.remove(),this._lostWebGLContextHandle=null,this.handles.remove("stage"),this._set("canvas",null)}_initSurface(e){this._exitSurface(),this._initStage(e),this._initGlobe(e),this.sharedSymbolResources=new He({view:this,viewingMode:e,resourceController:this._resourceController,pointsOfInterest:this.pointsOfInterest,viewState:this.state,objectResourceCache:new ve})}_exitSurface(){this.sharedSymbolResources&&(this.sharedSymbolResources.objectResourceCache.destroy(),this.sharedSymbolResources.destroy(),this.sharedSymbolResources=null,this._exitGlobe(),this._exitStage())}_createGraphicsViewIfNeeded(){if(this.graphicsView||this._createGraphicsViewController)return;if(0===this.graphics.length)return;this.handles.remove("graphics-view"),this._createGraphicsViewController=m();const e=()=>{this._createGraphicsViewController=null,this.updatingChanged()};this._createGraphicsViewAsync(this._createGraphicsViewController.signal).then(e,e),this.updatingChanged()}async _createGraphicsViewAsync(e){const t=(await import("./3d/layers/GraphicsView3D.js")).default;f(e),await G(this.basemapTerrain,"ready",e),this._set("graphicsView",new t({view:this}))}_disposeGraphicsView(){this._createGraphicsViewController&&(this._createGraphicsViewController.abort(),this._createGraphicsViewController=null),this.handles.remove("graphics-view"),i(this.graphicsView)&&(this.handles.remove(this.graphicsView.mockLayerId),this.graphicsView.destroy(),this._set("graphicsView",null))}_startup(){const e=ae(this.viewingMode);if(1===e&&(this._clippingArea=null),this._set("ready",!0),this._initSurface(e),this.handles.add(I(this,"graphics","after-changes",(()=>this._createGraphicsViewIfNeeded())),"graphics-view"),this._createGraphicsViewIfNeeded(),!this._externallySet.environment){const e=this.get("map.initialViewProperties.environment");e&&(this.environment=e)}this.labeler.setup(),this.environmentManager.connectView(this),this.inputManager.connect();const t=this._resolveWhenReady;this._resolveWhenReady=[],t.forEach((e=>e(this)))}_teardown(){this._initialDefaultSpatialReference=null,this.inputManager.disconnect(),this.environmentManager.disconnectView(),this.labeler.dispose(),this._disposeGraphicsView(),this.handles.remove("graphics-view"),this._exitSurface(),this._set("ready",!1)}_updateDefaultToMapOptions(){if(this._defaultToMapOptions.include.clear(),this.map){this.map.ground&&this._defaultToMapOptions.include.add(ue);for(const e of this.map.allLayers.items)"integrated-mesh"===e.type&&this._defaultToMapOptions.include.add(e.uid)}}_updateDefaultHitTestOptions(){if(this._defaultHitTestOptions.exclude.clear(),this.map){this.map.ground&&this.map.ground.opacity<1&&this._defaultHitTestOptions.exclude.add(ue);for(const e of this.map.allLayers.items)"integrated-mesh"===e.type&&e.opacity<1&&this._defaultToMapOptions.exclude.add(e.uid)}}};function We(e,t){e.layerUids||(e.layerUids=new Set),e.layerUids.add(t)}e([l()],ke.prototype,"_resourceController",void 0),e([l()],ke.prototype,"_stage",void 0),e([l({readOnly:!0})],ke.prototype,"deconflictor",void 0),e([l({readOnly:!0})],ke.prototype,"labeler",void 0),e([l({type:se,readOnly:!0,aliasOf:"state.animation"})],ke.prototype,"animation",void 0),e([l({readOnly:!0})],ke.prototype,"basemapTerrain",void 0),e([l({readOnly:!0})],ke.prototype,"elevationProvider",void 0),e([l({type:V,aliasOf:"stateManager.camera"})],ke.prototype,"camera",void 0),e([l({readOnly:!0})],ke.prototype,"canvas",void 0),e([l({type:b,aliasOf:"stateManager.center"})],ke.prototype,"center",void 0),e([l({type:x,dependsOn:["map.clippingArea?","map.clippingEnabled?","viewingMode"],autoTracked:!1})],ke.prototype,"clippingArea",null),e([l({type:le})],ke.prototype,"constraints",void 0),e([l({type:x,dependsOn:["basemapTerrain.extent","clippingArea","map"],autoTracked:!1,readOnly:!0})],ke.prototype,"dataExtent",null),e([l({value:null,type:pe})],ke.prototype,"environment",null),e([p("environment")],ke.prototype,"castEnvironment",null),e([l({readOnly:!0})],ke.prototype,"environmentManager",void 0),e([l({type:x,aliasOf:"stateManager.extent"})],ke.prototype,"extent",void 0),e([l({readOnly:!0,aliasOf:"stateManager.screenCenter"})],ke.prototype,"screenCenter",void 0),e([l({type:Number,dependsOn:["maximumPixelRatio"]})],ke.prototype,"pixelRatio",null),e([l({type:Number,dependsOn:["qualitySettings.maximumPixelRatio","qualitySettings.maximumRenderResolution","size"],autoTracked:!1})],ke.prototype,"maximumPixelRatio",null),e([l({aliasOf:"stateManager.frustum"})],ke.prototype,"frustum",void 0),e([l({type:Number,readOnly:!0})],ke.prototype,"fullOpacity",void 0),e([l({readOnly:!0})],ke.prototype,"graphicsView",void 0),e([l({type:x,dependsOn:["basemapTerrain.extent"],autoTracked:!1,readOnly:!0})],ke.prototype,"groundExtent",null),e([l()],ke.prototype,"groundView",void 0),e([l({type:Boolean,dependsOn:["stateManager.hasInitialView"]})],ke.prototype,"initialExtentRequired",null),e([l({type:Boolean,dependsOn:["navigating","activeTool"],readOnly:!0})],ke.prototype,"interacting",null),e([l({dependsOn:["animation","resizing","state.stationary"]})],ke.prototype,"stationary",null),e([l({aliasOf:"state.navigating"})],ke.prototype,"navigating",void 0),e([l()],ke.prototype,"map",void 0),e([l({readOnly:!0})],ke.prototype,"mapCoordsHelper",void 0),e([l({aliasOf:"stateManager.padding"})],ke.prototype,"padding",void 0),e([l({type:Ge,readOnly:!0})],ke.prototype,"pointsOfInterest",void 0),e([l({type:_e,readOnly:!0})],ke.prototype,"featureTiles",void 0),e([l()],ke.prototype,"featureTreeDebugger",void 0),e([l({type:Boolean})],ke.prototype,"screenSizePerspectiveEnabled",void 0),e([l({constructOnly:!0})],ke.prototype,"deactivatedWebGLExtensions",void 0),e([l({constructOnly:!0})],ke.prototype,"debugWebGLExtensions",void 0),e([l({constructOnly:!0})],ke.prototype,"renderCanvas",void 0),e([l({constructOnly:!0})],ke.prototype,"state",void 0),e([l({readOnly:!0})],ke.prototype,"inputManager",void 0),e([l({readOnly:!0})],ke.prototype,"stateManager",void 0),e([l({type:["low","medium","high"]})],ke.prototype,"qualityProfile",null),e([l({type:Ve,get(){let e=this._get("qualitySettings");return e||(e=new Ve,Me.apply(this.qualityProfile,e)),e}})],ke.prototype,"qualitySettings",void 0),e([l()],ke.prototype,"slicePlane",null),e([l({dependsOn:["viewingMode"],autoTracked:!1})],ke.prototype,"preconditionsReady",void 0),e([l({readOnly:!0})],ke.prototype,"renderCoordsHelper",void 0),e([l({readOnly:!0})],ke.prototype,"sceneIntersectionHelper",void 0),e([l({type:Number,dependsOn:["scale","spatialReference"],autoTracked:!1,readOnly:!0})],ke.prototype,"resolution",null),e([l({type:Number,aliasOf:"stateManager.scale"})],ke.prototype,"scale",void 0),e([l({dependsOn:[],autoTracked:!1})],ke.prototype,"heightModelInfo",null),e([l({dependsOn:["map.initialViewProperties?.spatialReference","defaultsFromMap.isSpatialReferenceDone"],autoTracked:!1})],ke.prototype,"spatialReference",void 0),e([l({type:Boolean,constructOnly:!0})],ke.prototype,"alphaCompositingEnabled",void 0),e([l({type:Boolean})],ke.prototype,"supersampleScreenhotsEnabled",void 0),e([l({readOnly:!0})],ke.prototype,"type",void 0),e([l({type:De})],ke.prototype,"ui",void 0),e([l({type:Boolean,readOnly:!0,dependsOn:["graphicsView.updating","basemapView.updating","basemapTerrain.updating","layerViewManager.updating","_resourceController.updating","_stage.renderView.updating","featureTiles.updating","pointsOfInterest.updating","environmentManager.updating","overlay.updating","updatingHandles.updating","featureTreeDebugger.updating","labeler.updating","deconflictor.updating","ready","stationary","inputManager.hasPendingInputs"],autoTracked:!1})],ke.prototype,"updating",null),e([l({type:Number,readOnly:!0,dependsOn:["updating"],autoTracked:!1})],ke.prototype,"updatingProgress",void 0),e([l({type:["global","local"],dependsOn:["map.initialViewProperties?.viewingMode","spatialReference"],autoTracked:!1})],ke.prototype,"viewingMode",null),e([l({type:j,aliasOf:"stateManager.viewpoint"})],ke.prototype,"viewpoint",void 0),e([l({type:Number,aliasOf:"stateManager.zoom"})],ke.prototype,"zoom",void 0),e([l({type:Oe})],ke.prototype,"highlightOptions",void 0),ke=e([h("esri.views.SceneView")],ke);const qe=C(),ze=M();var Ne=ke;export default Ne;

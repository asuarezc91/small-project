/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{isUint16Array as e,isUint32Array as t}from"../../core/typedArrayUtil.js";class i{constructor(e,t,i,n,r){this._context=null,this._glName=null,this._bufferType=void 0,this._usage=35044,this._size=-1,this._indexType=void 0,this.id=s++,e.instanceCounter.increment(1,this),this._context=e,this._bufferType=t,this._usage=i,this._glName=this._context.gl.createBuffer(),n&&this.setData(n,r)}static createIndex(e,t,s,n){return new i(e,34963,t,s,n)}static createVertex(e,t,s){return new i(e,34962,t,s)}get glName(){return this._glName}get size(){return this._size}get usage(){return this._usage}get bufferType(){return this._bufferType}get indexType(){return this._indexType}get byteSize(){return 34962===this._bufferType?this._size:5125===this._indexType?4*this._size:2*this._size}dispose(){if(this._context){if(this._glName){this._context.gl.deleteBuffer(this._glName),this._glName=null}this._context.instanceCounter.decrement(1,this),this._context=null}}setData(i,s){if(!i)return;if("number"==typeof i){if(i<0&&console.error("Buffer size cannot be negative!"),34963===this._bufferType&&s)switch(this._indexType=s,this._size=i,s){case 5123:i*=2;break;case 5125:i*=4}}else{let s=i.byteLength;e(i)&&(s/=2,this._indexType=5123),t(i)&&(s/=4,this._indexType=5125),this._size=s}const n=this._context.getBoundVAO();this._context.bindVAO(null),this._context.bindBuffer(this);this._context.gl.bufferData(this._bufferType,i,this._usage),this._context.bindVAO(n)}setSubData(i,s=0,n=0,r){if(!i)return;(s<0||s>=this._size)&&console.error("offset is out of range!");let h=s,o=n,u=r,f=i.byteLength;e(i)&&(f/=2,h*=2,o*=2,u*=2),t(i)&&(f/=4,h*=4,o*=4,u*=4),void 0===r&&(r=f-1),n>=r&&console.error("end must be bigger than start!"),s+n-r>this._size&&console.error("An attempt to write beyond the end of the buffer!");const _=this._context.getBoundVAO();this._context.bindVAO(null),this._context.bindBuffer(this);const a=this._context.gl,c=ArrayBuffer.isView(i)?i.buffer:i;a.bufferSubData(this._bufferType,h,c.slice(o,u)),this._context.bindVAO(_)}}let s=0;export default i;

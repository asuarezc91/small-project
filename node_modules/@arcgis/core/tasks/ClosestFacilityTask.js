/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../chunks/tslib.es6.js";import"../core/has.js";import"../core/Logger.js";import"../core/accessorSupport/ensureType.js";import{property as r}from"../core/accessorSupport/decorators/property.js";import{subclass as t}from"../core/accessorSupport/decorators/subclass.js";import"../core/urlUtils.js";import"../core/uuid.js";import"../portal/support/resourceExtension.js";import{resolve as s}from"../core/promiseUtils.js";import i from"../request.js";import{normalizeCentralMeridian as o}from"../geometry/support/normalizeUtils.js";import a from"./Task.js";import{createQueryParamsHelper as n}from"../core/queryUtils.js";import{NAServiceDescriptionMixin as c}from"./mixins/NAServiceDescription.js";import u from"./support/ClosestFacilitySolveResult.js";const l=n({accumulateAttributes:{name:"accumulateAttributeNames"},attributeParameterValues:!0,directionsTimeAttribute:{name:"directionsTimeAttributeName"},impedanceAttribute:{name:"impedanceAttributeName"},facilities:!0,incidents:!0,outSpatialReference:{name:"outSR",getter:e=>e.outSpatialReference.wkid},pointBarriers:{name:"barriers"},polylineBarriers:!0,polygonBarriers:!0,restrictionAttributes:{name:"restrictionAttributeNames"},returnPointBarriers:{name:"returnBarriers"},returnRoutes:{name:"returnCFRoutes"},travelMode:!0});let p=class extends(c(a)){constructor(e){super(e),this.url=null}solve(e,r){const t=[],a=[],n={},c={};return e.incidents&&e.incidents.features&&this._collectGeometries(e.incidents.features,a,"incidents.features",n),e.facilities&&e.facilities.features&&this._collectGeometries(e.facilities.features,a,"facilities.features",n),e.pointBarriers&&e.pointBarriers.features&&this._collectGeometries(e.pointBarriers.features,a,"pointBarriers.features",n),e.polylineBarriers&&e.polylineBarriers.features&&this._collectGeometries(e.polylineBarriers.features,a,"polylineBarriers.features",n),e.polygonBarriers&&e.polygonBarriers.features&&this._collectGeometries(e.polygonBarriers.features,a,"polygonBarriers.features",n),o(a).then((e=>{for(const r in n){const s=n[r];t.push(r),c[r]=e.slice(s[0],s[1])}return this._isInputGeometryZAware(c,t)?this.getServiceDescription():s({dontCheck:!0})})).then((s=>{("dontCheck"in s?s.dontCheck:s.hasZ)||this._dropZValuesOffInputGeometry(c,t);for(const r in c)c[r].forEach(((t,s)=>{e.get(r)[s].geometry=t}));let o={query:{...this.parsedUrl.query,f:"json",...l.toQueryParams(e)}};return(this.requestOptions||r)&&(o={...this.requestOptions,...r,...o}),i(`${this.parsedUrl.path}/solveClosestFacility`,o)})).then((e=>u.fromJSON(e.data)))}_collectGeometries(e,r,t,s){s[t]=[r.length,r.length+e.length],e.forEach((e=>{r.push(e.geometry)}))}};e([r()],p.prototype,"url",void 0),p=e([t("esri.tasks.ClosestFacilityTask")],p);var m=p;export default m;

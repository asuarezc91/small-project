/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
function e(e,t){return Number(e.toFixed(t))}function t(e){const t=a(e),l=[],n=t.uniqueValues.length;for(let e=0;e<n;e++){const n=t.uniqueValues[e],a=t.valueFrequency[e],u=n.toString();l.push({value:n,count:a,label:u})}return{uniqueValues:l}}function l(t){const{normalizationTotal:l}=t;return{classBreaks:function(t){const l=t.definition,{classificationMethod:s,breakCount:r,normalizationType:i}=l,c=[];let f=t.values;if(0===f.length)return[];f=f.sort(((e,t)=>e-t));const h=f[0],m=f[f.length-1];if("equal-interval"===s)if(f.length>=r){const t=(m-h)/r;let l=h;for(let a=1;a<r;a++){const u=e(h+a*t,6);c.push({minValue:l,maxValue:u,label:n(l,u,i)}),l=u}c.push({minValue:l,maxValue:m,label:n(l,m,i)})}else f.forEach((e=>{c.push({minValue:e,maxValue:e,label:n(e,e,i)})}));else if("natural-breaks"===s){const t=a(f),l=function(e,t,l){const n=e.length,a=[];l>n&&(l=n);for(let e=0;e<l;e++)a.push(Math.round(e*n/l-1));a.push(n-1);let s=u(a,e,t,l);(function(e,t,l,n,a,u){let s=0,r=0,i=0,c=0,f=!0;for(let h=0;h<2&&f;h++){0===h&&(f=!1);for(let h=0;h<u-1;h++)for(;l[h+1]+1!==l[h+2];){l[h+1]=l[h+1]+1;const u=o(h,l,n,a);i=u.sbMean,s=u.sbSdcm;const m=o(h+1,l,n,a);if(c=m.sbMean,r=m.sbSdcm,!(s+r<t[h]+t[h+1])){l[h+1]=l[h+1]-1;break}t[h]=s,t[h+1]=r,e[h]=i,e[h+1]=c,f=!0}for(let h=u-1;h>0;h--)for(;l[h]!==l[h-1]+1;){l[h]=l[h]-1;const u=o(h-1,l,n,a);i=u.sbMean,s=u.sbSdcm;const m=o(h,l,n,a);if(c=m.sbMean,r=m.sbSdcm,!(s+r<t[h-1]+t[h])){l[h]=l[h]+1;break}t[h-1]=s,t[h]=r,e[h-1]=i,e[h]=c,f=!0}}return f})(s.mean,s.sdcm,a,e,t,l)&&(s=u(a,e,t,l));return a}(t.uniqueValues,t.valueFrequency,r);let s=h;for(let a=1;a<r;a++)if(t.uniqueValues.length>a){const u=e(t.uniqueValues[l[a]],6);c.push({minValue:s,maxValue:u,label:n(s,u,i)}),s=u}c.push({minValue:s,maxValue:m,label:n(s,m,i)})}else if("quantile"===s)if(f.length>=r&&h!==m){let e=h,t=Math.ceil(f.length/r),l=0;for(let a=1;a<r;a++){let u=t+l-1;u>f.length&&(u=f.length-1),u<0&&(u=0),c.push({minValue:e,maxValue:f[u],label:n(e,f[u],i)}),e=f[u],l+=t,t=Math.ceil((f.length-l)/(r-a))}c.push({minValue:e,maxValue:m,label:n(e,m,i)})}else{let e=-1;for(let t=0;t<f.length;t++){const l=f[t];l!==e&&(e=l,c.push({minValue:e,maxValue:l,label:n(e,l,i)}),e=l)}}else if("standard-deviation"===s){const t=function(e){let t=0;for(let l=0;l<e.length;l++)t+=e[l];return t/=e.length,t}(f),l=function(e,t){let l=0;for(let n=0;n<e.length;n++){const a=e[n];l+=(a-t)*(a-t)}l/=e.length;return Math.sqrt(l)}(f,t);if(0===l)c.push({minValue:f[0],maxValue:f[0],label:n(f[0],f[0],i)});else{const a=function(e,t,l,n,a){const u=Math.max(n-e,t-n);let o=u/a/l;o=o>=1?1:o>=.5?.5:.25;return o}(h,m,r,t,l)*l;let u=0,o=h;for(let l=r;l>=1;l--){const s=e(t-(l-.5)*a,6);c.push({minValue:o,maxValue:s,label:n(o,s,i)}),o=s,u++}let s=e(t+.5*a,6);c.push({minValue:o,maxValue:s,label:n(o,s,i)}),o=s,u++;for(let l=1;l<=r;l++)s=u===2*r?m:e(t+(l+.5)*a,6),c.push({minValue:o,maxValue:s,label:n(o,s,i)}),o=s,u++}}return c}(t),normalizationTotal:l}}function n(e,t,l){let n=null;return n=e===t?l&&"percent-of-total"===l?e+"%":e.toString():l&&"percent-of-total"===l?e+"% - "+t+"%":e+" - "+t,n}function a(e){const t=[],l=[];let n=Number.MIN_VALUE,a=1,u=-1;for(let o=0;o<e.length;o++){const s=e[o];s===n?(a++,l[u]=a):null!==s&&(t.push(s),n=s,a=1,l.push(a),u++)}return{uniqueValues:t,valueFrequency:l}}function u(e,t,l,n){let a=[],u=[],s=[],r=0;const i=[],c=[];for(let a=0;a<n;a++){const n=o(a,e,t,l);i.push(n.sbMean),c.push(n.sbSdcm),r+=c[a]}let f,h=r,m=!0;for(;m||r<h;){m=!1,a=[];for(let t=0;t<n;t++)a.push(e[t]);for(let l=0;l<n;l++)for(let a=e[l]+1;a<=e[l+1];a++)if(f=t[a],l>0&&a!==e[l+1]&&Math.abs(f-i[l])>Math.abs(f-i[l-1]))e[l]=a;else if(l<n-1&&e[l]!==a-1&&Math.abs(f-i[l])>Math.abs(f-i[l+1])){e[l+1]=a-1;break}h=r,r=0,u=[],s=[];for(let a=0;a<n;a++){u.push(i[a]),s.push(c[a]);const n=o(a,e,t,l);i[a]=n.sbMean,c[a]=n.sbSdcm,r+=c[a]}}if(r>h){for(let t=0;t<n;t++)e[t]=a[t],i[t]=u[t],c[t]=s[t];r=h}return{mean:i,sdcm:c}}function o(e,t,l,n){let a=0,u=0;for(let o=t[e]+1;o<=t[e+1];o++){const e=n[o];a+=l[o]*e,u+=e}u<=0&&console.log("Exception in Natural Breaks calculation");const o=a/u;let s=0;for(let a=t[e]+1;a<=t[e+1];a++)s+=n[a]*Math.pow(l[a]-o,2);return{sbMean:o,sbSdcm:s}}export{l as createGenerateRendererClassBreaks,t as createGenerateRendererUniqueValues};

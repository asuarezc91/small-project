/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import{property as t}from"../../core/accessorSupport/decorators/property.js";import{JSONMap as r}from"../../core/jsonMap.js";import{reader as i}from"../../core/accessorSupport/decorators/reader.js";import{subclass as o}from"../../core/accessorSupport/decorators/subclass.js";import{writer as s}from"../../core/accessorSupport/decorators/writer.js";import{JSONSupport as n}from"../../core/JSONSupport.js";import a from"../../geometry/SpatialReference.js";import"../../geometry.js";const p=new r({esriNAOutputLineNone:"none",esriNAOutputLineStraight:"straight",esriNAOutputLineTrueShape:"true-shape",esriNAOutputLineTrueShapeWithMeasure:"true-shape-with-measure"}),l=new r({esriNAOutputPolygonNone:"none",esriNAOutputPolygonSimplified:"simplified",esriNAOutputPolygonDetailed:"detailed"}),u=new r({esriNFSBAllowBacktrack:"allow-backtrack",esriNFSBAtDeadEndsOnly:"at-dead-ends-only",esriNFSBNoBacktrack:"no-backtrack",esriNFSBAtDeadEndsAndIntersections:"at-dead-ends-and-intersections"}),y=new r({esriNATravelDirectionFromFacility:"from-facility",esriNATravelDirectionToFacility:"to-facility"}),d=new r({esriCentimeters:"centimeters",esriDecimalDegrees:"decimal-degrees",esriDecimeters:"decimeters",esriFeet:"feet",esriInches:"inches",esriKilometers:"kilometers",esriMeters:"meters",esriMiles:"miles",esriMillimeters:"millimeters",esriNauticalMiles:"nautical-miles",esriPoints:"points",esriYards:"yards"});let c=class extends n{constructor(e){super(e),this.accumulateAttributes=null,this.attributeParameterValues=null,this.defaultBreaks=null,this.doNotLocateOnRestrictedElements=!0,this.excludeSourcesFromPolygons=null,this.facilities=null,this.impedanceAttribute=null,this.mergeSimilarPolygonRanges=!1,this.outputGeometryPrecision=null,this.outputGeometryPrecisionUnits=null,this.outputLines=null,this.outputPolygons=null,this.outSpatialReference=null,this.overlapLines=!1,this.overlapPolygons=!1,this.pointBarriers=null,this.polygonBarriers=null,this.polylineBarriers=null,this.restrictionAttributes=null,this.restrictUTurns=null,this.returnFacilities=!1,this.returnPointBarriers=!1,this.returnPolygonBarriers=!1,this.returnPolylineBarriers=!1,this.splitLinesAtBreaks=!1,this.splitPolygonsAtBreaks=!1,this.timeOfDay=null,this.travelDirection=null,this.travelMode=null,this.trimOuterPolygon=!1,this.trimPolygonDistance=null,this.trimPolygonDistanceUnits=null,this.useHierarchy=null}readTimeOfDay(e,t){return null!=t.timeOfDay?new Date(t.timeOfDay):null}writeTimeOfDay(e,t){t.timeOfDay=e?e.getTime():null}};e([t({type:[String],json:{write:!0}})],c.prototype,"accumulateAttributes",void 0),e([t({json:{write:!0}})],c.prototype,"attributeParameterValues",void 0),e([t({type:[Number],json:{write:!0}})],c.prototype,"defaultBreaks",void 0),e([t({type:Boolean,json:{write:!0}})],c.prototype,"doNotLocateOnRestrictedElements",void 0),e([t({type:[String],json:{write:!0}})],c.prototype,"excludeSourcesFromPolygons",void 0),e([t({json:{write:!0}})],c.prototype,"facilities",void 0),e([t({type:String,json:{read:{source:"impedanceAttributeName"},write:{target:"impedanceAttributeName"}}})],c.prototype,"impedanceAttribute",void 0),e([t({type:Boolean,json:{write:!0}})],c.prototype,"mergeSimilarPolygonRanges",void 0),e([t({type:Number,json:{write:!0}})],c.prototype,"outputGeometryPrecision",void 0),e([t({type:d.apiValues,json:{read:{reader:d.read},write:{writer:d.write}}})],c.prototype,"outputGeometryPrecisionUnits",void 0),e([t({type:p.apiValues,json:{read:{reader:p.read},write:{writer:p.write}}})],c.prototype,"outputLines",void 0),e([t({type:l.apiValues,json:{read:{reader:l.read},write:{writer:l.write}}})],c.prototype,"outputPolygons",void 0),e([t({type:a,json:{write:!0}})],c.prototype,"outSpatialReference",void 0),e([t({type:Boolean,json:{write:!0}})],c.prototype,"overlapLines",void 0),e([t({type:Boolean,json:{write:!0}})],c.prototype,"overlapPolygons",void 0),e([t({json:{write:!0}})],c.prototype,"pointBarriers",void 0),e([t({json:{write:!0}})],c.prototype,"polygonBarriers",void 0),e([t({json:{write:!0}})],c.prototype,"polylineBarriers",void 0),e([t({type:[String],json:{write:!0}})],c.prototype,"restrictionAttributes",void 0),e([t({type:u.apiValues,json:{read:{reader:u.read},write:{writer:u.write}}})],c.prototype,"restrictUTurns",void 0),e([t({type:Boolean,json:{write:!0}})],c.prototype,"returnFacilities",void 0),e([t({type:Boolean,json:{write:!0}})],c.prototype,"returnPointBarriers",void 0),e([t({type:Boolean,json:{write:!0}})],c.prototype,"returnPolygonBarriers",void 0),e([t({type:Boolean,json:{write:!0}})],c.prototype,"returnPolylineBarriers",void 0),e([t({type:Boolean,json:{write:!0}})],c.prototype,"splitLinesAtBreaks",void 0),e([t({type:Boolean,json:{write:!0}})],c.prototype,"splitPolygonsAtBreaks",void 0),e([t({type:Date,json:{type:Number,write:!0}})],c.prototype,"timeOfDay",void 0),e([i("timeOfDay")],c.prototype,"readTimeOfDay",null),e([s("timeOfDay")],c.prototype,"writeTimeOfDay",null),e([t({type:y.apiValues,json:{read:{reader:y.read},write:{writer:y.write}}})],c.prototype,"travelDirection",void 0),e([t({json:{write:!0}})],c.prototype,"travelMode",void 0),e([t({type:Boolean,json:{write:!0}})],c.prototype,"trimOuterPolygon",void 0),e([t({type:Number,json:{write:!0}})],c.prototype,"trimPolygonDistance",void 0),e([t({type:d.apiValues,json:{read:{reader:d.read},write:{writer:d.write}}})],c.prototype,"trimPolygonDistanceUnits",void 0),e([t({type:Boolean,json:{write:!0}})],c.prototype,"useHierarchy",void 0),c=e([o("esri.tasks.support.ServiceAreaParameters")],c);var m=c;export default m;

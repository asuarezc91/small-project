/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import"../../core/has.js";import{isSome as t}from"../../core/maybe.js";import"../../core/Logger.js";import"../../core/accessorSupport/ensureType.js";import{makeHandle as i}from"../../core/handleUtils.js";import"../../core/accessorSupport/decorators/property.js";import{subclass as a}from"../../core/accessorSupport/decorators/subclass.js";import"../../core/urlUtils.js";import"../../core/uuid.js";import"../../portal/support/resourceExtension.js";import{createAbortController as r,create as o,onAbort as s,createAbortError as d,throwIfAborted as n,isAborted as l}from"../../core/promiseUtils.js";import{watch as c}from"../../core/watchUtils.js";import{highlightsSupported as u}from"../../views/support/layerViewUtils.js";import m from"./Edits.js";import h from"./Workflow.js";import{fetchCandidates as f,fetchFullFeature as p,findLayerInfo as g,getVisualVariableAttributes as w,setUpGeometryUpdate as v}from"./workflowUtils.js";import y from"./UpdateWorkflowData.js";var b;let M=b=class extends h{constructor(e){super(e),this.type="update"}static create(e,t,i){const a=new y({edits:new m,viewModel:e}),r=new b({data:a,afterCommit:i});return r._set("steps",this._createWorkflowSteps(r,t)),r}highlight(e){const{data:{viewModel:{view:t}}}=this,i=e&&t.allLayerViews.items.find((({layer:t})=>t===e.layer));u(i)&&this.handles.add(i.highlight(e),"candidate-highlight")}unhighlight(){this.handles.remove("candidate-highlight")}static _createWorkflowSteps(e,a="awaiting-feature-to-update"){const{data:u,handles:m}=e,h={"awaiting-feature-to-update":()=>({id:"awaiting-feature-to-update",async setUp(){const{spinnerViewModel:e,view:t}=u.viewModel;let i=null;m.add({remove(){i&&(i.abort(),i=null)}},this.id),u.edits.feature=null;const a=t.on("immediate-click",(a=>{e.location=a.mapPoint,e.visible=!0,i&&i.abort();const{editableItems:l}=u.viewModel;i=r(),o(((e,r)=>{s(i.signal,(()=>r(d()))),e(f(l,t,a,i.signal))})).then((e=>{if(u.viewModel.spinnerViewModel.visible=!1,n(i),u.candidates=e.reduce(((e,t)=>t.error?e:[...e,...t.value]),[]),0!==u.candidates.length)if(1===u.candidates.length){const e=u.candidates[0];u.edits.feature=e,u.viewModel.activeWorkflow.go("editing-existing-feature")}else u.viewModel.activeWorkflow.next()}))}));m.add(a,this.id)},async tearDown(){m.remove(this.id)}}),"awaiting-update-feature-candidate":()=>({id:"awaiting-update-feature-candidate",async setUp(){const{edits:t}=u;t.feature=null,m.add(c(t,"feature",(t=>{e.unhighlight(),e.highlight(t)})),this.id)},async tearDown(){e.unhighlight(),m.remove(this.id)}}),"editing-existing-feature":()=>({id:"editing-existing-feature",async setUp(){const a=u.edits.feature,o=u.viewModel;u.editableItem=o.editableItems.find((e=>e.layer===a.layer));const s=r();m.add({remove:()=>s.abort()},this.id);const d=o.view.whenLayerView(a.layer),n=p(a,o.view,s.signal),c=await d,h=await n;if(l(s))return;u.edits.updateGeometry(h.geometry),u.edits.updateAttributes(h.attributes),u.edits.trackChanges();const f=h.layer,y=g(o.layerInfos,f),b=y&&y.fieldConfig;o.attachmentsViewModel.set({graphic:h,mode:"view"}),o.featureFormViewModel.set({feature:h,fieldConfig:b});const M="createInteractiveEditSession"in c?c.createInteractiveEditSession(a):null,j=[o.featureFormViewModel.on("value-change",(e=>{u.edits.updateAttributes(o.featureFormViewModel.getValues()),h.attributes=u.edits.feature.attributes,M&&M.setAttribute(e.fieldName,e.value)})),o.attachmentsViewModel.watch("mode",(e=>{"add"===e&&u.viewModel.activeWorkflow.go("adding-attachment"),"edit"===e&&u.viewModel.activeWorkflow.go("editing-attachment")}))];M&&(j.push(i((()=>M.rollback()))),m.add(i((()=>M.commit())),e._handleKeys.afterCommit));const{supportsGeometryUpdate:V}=f.capabilities.editing;if(V){const i=w(h),{interactive:a,visual:r}=await v(h,i,o.sketchViewModel,o.view,(({geometry:e,attributes:a})=>{if(t(i.rotation)){const{field:e}=i.rotation;o.featureFormViewModel.setValue(e,a[e])}if(t(i.size)){const{field:e}=i.size;o.featureFormViewModel.setValue(e,a[e])}u.edits.updateAttributes(a),u.edits.updateGeometry(e)}));j.push(a,r),m.add(a,e._handleKeys.beforeCommit),m.add(r,e._handleKeys.afterCommit)}else e.highlight(h);m.add(j,this.id)},async tearDown(){u.editableItem=null,u.viewModel.featureFormViewModel.set({feature:null,fieldConfig:null}),m.remove(this.id),e.unhighlight()}}),"adding-attachment":()=>({id:"adding-attachment",parent:"editing-existing-feature",async setUp(){},async tearDown(){}}),"editing-attachment":()=>({id:"editing-attachment",parent:"editing-existing-feature",async setUp(){},async tearDown(){}})};let y=!1;return["awaiting-feature-to-update","awaiting-update-feature-candidate","editing-existing-feature","adding-attachment","editing-attachment"].filter((e=>!!y||(y=e===a,y))).map((e=>h[e]()))}};M=b=e([a("esri.widgets.Editor.UpdateWorkflow")],M);var j=M;export default j;

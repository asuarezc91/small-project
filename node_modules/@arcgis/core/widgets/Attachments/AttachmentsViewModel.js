/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import"../../core/has.js";import{isSome as e}from"../../core/maybe.js";import"../../core/Logger.js";import{property as a}from"../../core/accessorSupport/decorators/property.js";import{cast as i}from"../../core/accessorSupport/decorators/cast.js";import{subclass as r}from"../../core/accessorSupport/decorators/subclass.js";import n from"../../core/Error.js";import"../../core/urlUtils.js";import"../../core/uuid.js";import"../../portal/support/resourceExtension.js";import s from"../../core/Collection.js";import o from"../../Graphic.js";import{init as c}from"../../core/watchUtils.js";import h from"../../tasks/support/AttachmentQuery.js";import d from"../../layers/support/AttachmentInfo.js";import{HandleOwner as m}from"../../core/HandleOwner.js";import{getSourceLayer as p}from"../Feature/support/featureUtils.js";const l={editing:!1,operations:{add:!0,update:!0,delete:!0}},u=s.ofType(d);let y=class extends m{constructor(t){super(t),this._getAttachmentsPromise=null,this._attachmentLayer=null,this.abilities={...l},this.activeAttachmentInfo=null,this.attachmentInfos=new u,this.graphic=null,this.mode="view",this.handles.add([c(this,"graphic",(()=>this._graphicChanged()))])}destroy(){this._attachmentLayer=null,this.graphic=null}castAbilities(t){return{...l,...t}}get state(){return this._getAttachmentsPromise?"loading":this.graphic?"ready":"disabled"}get supportsResizeAttachments(){return this.get("graphic.layer.capabilities.operations.supportsResizeAttachments")||!1}async getAttachments(){const{_attachmentLayer:t,attachmentInfos:e}=this;if(!t||"function"!=typeof t.queryAttachments)throw new n("invalid-layer","getAttachments(): A valid layer is required.");const a=this._getFeatureId(),i=new h({objectIds:[a],returnMetadata:!0}),r=[],s=t.queryAttachments(i).then((t=>t[a]||r)).catch((()=>r));this._getAttachmentsPromise=s,this.notifyChange("state");const o=await s;return e.removeAll(),o.length&&e.addMany(o),this._getAttachmentsPromise=null,this.notifyChange("state"),o}async addAttachment(t){const{_attachmentLayer:e,attachmentInfos:a,graphic:i,abilities:r}=this;if(!t)throw new n("invalid-attachment","addAttachment(): An attachment is required.",{attachment:t});if(!r.operations.add)throw new n("invalid-abilities","addAttachment(): add abilities are required.");if(!e||"function"!=typeof e.addAttachment)throw new n("invalid-layer","addAttachment(): A valid layer is required.");const s=e.addAttachment(i,t).then((t=>this._queryAttachment(t.objectId))),o=await s;return a.add(o),o}async deleteAttachment(t){const{_attachmentLayer:e,attachmentInfos:a,graphic:i,abilities:r}=this;if(!t)throw new n("invalid-attachment-info","deleteAttachment(): An attachmentInfo is required.",{attachmentInfo:t});if(!r.operations.delete)throw new n("invalid-abilities","deleteAttachment(): delete abilities are required.");if(!e||"function"!=typeof e.deleteAttachments)throw new n("invalid-layer","deleteAttachment(): A valid layer is required.");const s=e.deleteAttachments(i,[t.id]).then((()=>t)),o=await s;return a.remove(o),o}async updateAttachment(t,e=this.activeAttachmentInfo){const{_attachmentLayer:a,attachmentInfos:i,graphic:r,abilities:s}=this;if(!t)throw new n("invalid-attachment","updateAttachment(): An attachment is required.",{attachment:t});if(!e)throw new n("invalid-attachment-info","updateAttachment(): An attachmentInfo is required.",{attachmentInfo:e});if(!s.operations.update)throw new n("invalid-abilities","updateAttachment(): Update abilities are required.");const o=i.findIndex((t=>t===e));if(!a||"function"!=typeof a.updateAttachment)throw new n("invalid-layer","updateAttachment(): A valid layer is required.");const c=a.updateAttachment(r,e.id,t).then((t=>this._queryAttachment(t.objectId))),h=await c;return i.splice(o,1,h),h}async _queryAttachment(t){if(!t)throw new n("invalid-attachment-id","Could not query attachment.");const{_attachmentLayer:e}=this,a=this._getFeatureId(),i=new h({objectIds:[a],attachmentsWhere:`AttachmentId=${t}`,returnMetadata:!0});return e.queryAttachments(i).then((t=>t[a][0]))}_getFeatureId(){const{_attachmentLayer:t,graphic:e}=this;if(!t||!e)return null;const{objectIdField:a}=t,{attributes:i}=e;return i&&i[a]}_graphicChanged(){this.graphic&&(this._setAttachmentLayer(),this.getAttachments().catch((()=>{})))}_setAttachmentLayer(){const{graphic:t}=this,a=p(t);this._attachmentLayer=a?"scene"===a.type&&e(a.associatedLayer)?a.associatedLayer:a:null}};t([a()],y.prototype,"abilities",void 0),t([i("abilities")],y.prototype,"castAbilities",null),t([a()],y.prototype,"activeAttachmentInfo",void 0),t([a({readOnly:!0,type:u})],y.prototype,"attachmentInfos",void 0),t([a({type:o})],y.prototype,"graphic",void 0),t([a()],y.prototype,"mode",void 0),t([a({dependsOn:["graphic"],readOnly:!0})],y.prototype,"state",null),t([a({readOnly:!0,dependsOn:["graphic","graphic.layer","graphic.layer.loaded","graphic.layer.capabilities.operations.supportsResizeAttachments"]})],y.prototype,"supportsResizeAttachments",null),y=t([r("esri.widgets.Attachments.AttachmentsViewModel")],y);var A=y;export default A;

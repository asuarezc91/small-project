/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import"../../core/has.js";import{isSome as t,isNone as r}from"../../core/maybe.js";import"../../core/Logger.js";import"../../core/accessorSupport/ensureType.js";import{property as o}from"../../core/accessorSupport/decorators/property.js";import{subclass as i}from"../../core/accessorSupport/decorators/subclass.js";import"../../core/urlUtils.js";import"../../core/uuid.js";import"../../portal/support/resourceExtension.js";import s from"../../Color.js";import{s as n,g as l}from"../../chunks/vec3.js";import c from"../../core/Handles.js";import{init as a,on as p,when as u}from"../../core/watchUtils.js";import{getReferenceEllipsoid as d}from"../../geometry/projectionEllipsoid.js";import{getMetersPerVerticalUnitForSR as m}from"../../core/unitUtils.js";import{a as h}from"../../chunks/vec4f64.js";import{ray as v}from"../../views/3d/support/geometryUtils.js";import{Intersector as f}from"../../views/3d/webgl-engine/lib/Intersector.js";import{ElevationProfileLine as y}from"./ElevationProfileLine.js";import{GeometryDescriptor as _}from"../../layers/support/ElevationQuery.js";let w=class extends y{constructor(e){super(e),this.type="view",this.color=new s([191,76,245]),this.include=null,this.exclude=null,this.numSamplesForPreview=50,this.numSamplesPerChunk=100,this._vecA=h(),this._vecB=h(),this._ray=v.create()}get minDemResolution(){var e,t,r;const o=null==(e=this._viewModel)?void 0:e.view;if(!o||"3d"!==o.type)return null;const i=null==(t=o.pointsOfInterest)||null==(r=t.focus)?void 0:r.renderLocation;if(!i)return null;return o.state.camera.computeRenderPixelSizeAt(i)*m(o.spatialReference)}get _intersectOptions(){const e=this._view;return t(e)?e.externalToInternalIntersectOptions({include:this.include,exclude:this.exclude}):{}}get _view(){const e=this._viewModel.view;return"3d"===(null==e?void 0:e.type)?e:null}get _maxIntersectionDistance(){const e=this._view;return r(e)?Number.POSITIVE_INFINITY:d(e.spatialReference).radius/e.renderCoordsHelper.unitInMeters}get _intersector(){const e=this._view;if(r(e))return null;const t=new f(e.state.mode),o=t.options;return o.hud=!1,o.invisibleTerrain=!1,o.backfacesTerrain=!1,o.selectionMode=!1,o.store=2,t}async queryElevation(e,{noDataValue:o,signal:i}){const s=this._view;if(r(s))throw new Error("can only query SceneView");const c=this._viewModel.input,a=t(c)?g(c):null,p=this._intersector,u=this._maxIntersectionDistance,d=s.spatialReference,m=await _.fromGeometry(e).project(d,i);for(const e of m.coordinates){var h;const t=this._vecA,i=this._vecB;n(i,e.x,e.y,null!=(h=e.z)?h:0),s.renderCoordsHelper.toRenderCoords(i,d,i),l(t,i),s.renderCoordsHelper.setAltitude(2e5,t);const c=v.fromPoints(t,i,this._ray);s.sceneIntersectionHelper.computeIntersection(c,p,this._intersectOptions);const m=p.results.all.find((e=>{if(e.distanceInRenderSpace>u)return!1;const t=e.toGraphic(s);return r(t)||g(t)!==a}));if(m){const t=this._vecA;m.getIntersectionPoint(t),s.renderCoordsHelper.fromRenderCoords(t,t,d),e.z=t[2]}else e.z=o}return{geometry:m.export(),noDataValue:o}}attach(e){const t=new c;t.add(super.attach(e));const r=()=>{this.notifyChange("_intersectOptions")},o=()=>{this._watchLayerVisibilities(t,e.view,this._onChange),this._onChange()};return t.add([a(this,"_intersectOptions",this._onChange),p(this,"include","change",r,r,r),p(this,"exclude","change",r,r,r),u(e,"view.stationary",(()=>this._onChange())),p(e,"view.elevationProvider","elevation-change",this._onChange),p(e,"view.map.allLayers","change",o,o,o)]),t}_watchLayerVisibilities(e,t,r){var o,i,s;e.remove("layer-visibilities");const n=null!=(o=null==(i=t.map)||null==(s=i.allLayers)?void 0:s.toArray())?o:[];e.add(n.map((e=>e.watch("visible",r))),"layer-visibilities")}};function g(e){if(e.layer&&"objectIdField"in e.layer){const t=e.attributes[e.layer.objectIdField];if(t)return`o-${e.layer.id}-${t}`}return`u-${e.uid}`}e([o({type:s,nonNullable:!0})],w.prototype,"color",void 0),e([o()],w.prototype,"include",void 0),e([o()],w.prototype,"exclude",void 0),e([o({readOnly:!0})],w.prototype,"minDemResolution",null),e([o()],w.prototype,"_intersectOptions",null),e([o()],w.prototype,"_view",null),e([o()],w.prototype,"_maxIntersectionDistance",null),e([o()],w.prototype,"_intersector",null),w=e([i("esri.widgets.ElevationProfile.ElevationProfileLineView")],w);var j=w;export default j;
